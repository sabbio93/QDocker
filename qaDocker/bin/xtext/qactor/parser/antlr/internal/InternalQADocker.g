/*
 * generated by Xtext 2.10.0
 */
grammar InternalQADocker;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.qactor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.qactor.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.qactor.services.QADockerGrammarAccess;

}

@parser::members {

 	private QADockerGrammarAccess grammarAccess;

    public InternalQADockerParser(TokenStream input, QADockerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "QActorSystem";
   	}

   	@Override
   	protected QADockerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQActorSystem
entryRuleQActorSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQActorSystemRule()); }
	iv_ruleQActorSystem=ruleQActorSystem
	{ $current=$iv_ruleQActorSystem.current; }
	EOF;

// Rule QActorSystem
ruleQActorSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='System'
		{
			newLeafNode(otherlv_0, grammarAccess.getQActorSystemAccess().getSystemKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorSystemAccess().getSpecQActorSystemSpecParserRuleCall_1_0());
				}
				lv_spec_1_0=ruleQActorSystemSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorSystemRule());
					}
					set(
						$current,
						"spec",
						lv_spec_1_0,
						"xtext.qactor.QADocker.QActorSystemSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQActorSystemSpec
entryRuleQActorSystemSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQActorSystemSpecRule()); }
	iv_ruleQActorSystemSpec=ruleQActorSystemSpec
	{ $current=$iv_ruleQActorSystemSpec.current; }
	EOF;

// Rule QActorSystemSpec
ruleQActorSystemSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getQActorSystemSpecAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQActorSystemSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_testing_1_0='-testing'
				{
					newLeafNode(lv_testing_1_0, grammarAccess.getQActorSystemSpecAccess().getTestingTestingKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQActorSystemSpecRule());
					}
					setWithLastConsumed($current, "testing", true, "-testing");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorSystemSpecAccess().getMessageMessageParserRuleCall_2_0());
				}
				lv_message_2_0=ruleMessage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorSystemSpecRule());
					}
					add(
						$current,
						"message",
						lv_message_2_0,
						"xtext.qactor.QADocker.Message");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorSystemSpecAccess().getContextContextParserRuleCall_3_0());
				}
				lv_context_3_0=ruleContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorSystemSpecRule());
					}
					add(
						$current,
						"context",
						lv_context_3_0,
						"xtext.qactor.QADocker.Context");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorSystemSpecAccess().getActorQActorParserRuleCall_4_0());
				}
				lv_actor_4_0=ruleQActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorSystemSpecRule());
					}
					add(
						$current,
						"actor",
						lv_actor_4_0,
						"xtext.qactor.QADocker.QActor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorSystemSpecAccess().getRobotRobotParserRuleCall_5_0());
				}
				lv_robot_5_0=ruleRobot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorSystemSpecRule());
					}
					set(
						$current,
						"robot",
						lv_robot_5_0,
						"xtext.qactor.QADocker.Robot");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRobotAccess().getActorQActorParserRuleCall_1_0());
				}
				lv_actor_1_0=ruleQActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRobotRule());
					}
					set(
						$current,
						"actor",
						lv_actor_1_0,
						"xtext.qactor.QADocker.QActor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='TDDO'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getTDDOKeyword_2());
		}
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMessageAccess().getOutOnlyMessageParserRuleCall_0());
		}
		this_OutOnlyMessage_0=ruleOutOnlyMessage
		{
			$current = $this_OutOnlyMessage_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageAccess().getOutInMessageParserRuleCall_1());
		}
		this_OutInMessage_1=ruleOutInMessage
		{
			$current = $this_OutInMessage_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOutOnlyMessage
entryRuleOutOnlyMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutOnlyMessageRule()); }
	iv_ruleOutOnlyMessage=ruleOutOnlyMessage
	{ $current=$iv_ruleOutOnlyMessage.current; }
	EOF;

// Rule OutOnlyMessage
ruleOutOnlyMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOutOnlyMessageAccess().getDispatchParserRuleCall_0());
		}
		this_Dispatch_0=ruleDispatch
		{
			$current = $this_Dispatch_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOutOnlyMessageAccess().getEventParserRuleCall_1());
		}
		this_Event_1=ruleEvent
		{
			$current = $this_Event_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOutOnlyMessageAccess().getSignalParserRuleCall_2());
		}
		this_Signal_2=ruleSignal
		{
			$current = $this_Signal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOutOnlyMessageAccess().getTokenParserRuleCall_3());
		}
		this_Token_3=ruleToken
		{
			$current = $this_Token_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOutInMessage
entryRuleOutInMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutInMessageRule()); }
	iv_ruleOutInMessage=ruleOutInMessage
	{ $current=$iv_ruleOutInMessage.current; }
	EOF;

// Rule OutInMessage
ruleOutInMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOutInMessageAccess().getRequestParserRuleCall_0());
		}
		this_Request_0=ruleRequest
		{
			$current = $this_Request_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOutInMessageAccess().getInvitationParserRuleCall_1());
		}
		this_Invitation_1=ruleInvitation
		{
			$current = $this_Invitation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Event'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getEventAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Signal'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getSignalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleToken
entryRuleToken returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	iv_ruleToken=ruleToken
	{ $current=$iv_ruleToken.current; }
	EOF;

// Rule Token
ruleToken returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Token'
		{
			newLeafNode(otherlv_0, grammarAccess.getTokenAccess().getTokenKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTokenRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getTokenAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTokenAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTokenRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDispatch
entryRuleDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchRule()); }
	iv_ruleDispatch=ruleDispatch
	{ $current=$iv_ruleDispatch.current; }
	EOF;

// Rule Dispatch
ruleDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dispatch'
		{
			newLeafNode(otherlv_0, grammarAccess.getDispatchAccess().getDispatchKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDispatchRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDispatchAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRequest
entryRuleRequest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequestRule()); }
	iv_ruleRequest=ruleRequest
	{ $current=$iv_ruleRequest.current; }
	EOF;

// Rule Request
ruleRequest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Request'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequestAccess().getRequestKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRequestAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequestRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequestAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequestAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequestRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInvitation
entryRuleInvitation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvitationRule()); }
	iv_ruleInvitation=ruleInvitation
	{ $current=$iv_ruleInvitation.current; }
	EOF;

// Rule Invitation
ruleInvitation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Invitation'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvitationAccess().getInvitationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInvitationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvitationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInvitationAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvitationAccess().getMsgPHeadParserRuleCall_3_0());
				}
				lv_msg_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvitationRule());
					}
					set(
						$current,
						"msg",
						lv_msg_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Context'
		{
			newLeafNode(otherlv_0, grammarAccess.getContextAccess().getContextKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContextAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='ip'
		{
			newLeafNode(otherlv_2, grammarAccess.getContextAccess().getIpKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContextAccess().getIpComponentIPParserRuleCall_3_0());
				}
				lv_ip_3_0=ruleComponentIP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContextRule());
					}
					set(
						$current,
						"ip",
						lv_ip_3_0,
						"xtext.qactor.QADocker.ComponentIP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_env_4_0='-g'
					{
						newLeafNode(lv_env_4_0, grammarAccess.getContextAccess().getEnvGKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContextRule());
						}
						setWithLastConsumed($current, "env", true, "-g");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getColorWindowColorEnumRuleCall_4_1_0());
					}
					lv_color_5_0=ruleWindowColor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						set(
							$current,
							"color",
							lv_color_5_0,
							"xtext.qactor.QADocker.WindowColor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				lv_standalone_6_0='-standalone'
				{
					newLeafNode(lv_standalone_6_0, grammarAccess.getContextAccess().getStandaloneStandaloneKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
					setWithLastConsumed($current, "standalone", true, "-standalone");
				}
			)
		)?
		(
			(
				lv_httpserver_7_0='-httpserver'
				{
					newLeafNode(lv_httpserver_7_0, grammarAccess.getContextAccess().getHttpserverHttpserverKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
					setWithLastConsumed($current, "httpserver", true, "-httpserver");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContextAccess().getHandlerEventHandlerParserRuleCall_7_0());
				}
				lv_handler_8_0=ruleEventHandler
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContextRule());
					}
					add(
						$current,
						"handler",
						lv_handler_8_0,
						"xtext.qactor.QADocker.EventHandler");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleQActor
entryRuleQActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQActorRule()); }
	iv_ruleQActor=ruleQActor
	{ $current=$iv_ruleQActor.current; }
	EOF;

// Rule QActor
ruleQActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='QActor'
		{
			newLeafNode(otherlv_0, grammarAccess.getQActorAccess().getQActorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getQActorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='context'
		{
			newLeafNode(otherlv_2, grammarAccess.getQActorAccess().getContextKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQActorRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getQActorAccess().getContextContextCrossReference_3_0());
				}
			)
		)
		(
			(
				(
					lv_env_4_0='-g'
					{
						newLeafNode(lv_env_4_0, grammarAccess.getQActorAccess().getEnvGKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQActorRule());
						}
						setWithLastConsumed($current, "env", true, "-g");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getQActorAccess().getColorWindowColorEnumRuleCall_4_1_0());
					}
					lv_color_5_0=ruleWindowColor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQActorRule());
						}
						set(
							$current,
							"color",
							lv_color_5_0,
							"xtext.qactor.QADocker.WindowColor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getQActorAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			otherlv_7='Rules'
			{
				newLeafNode(otherlv_7, grammarAccess.getQActorAccess().getRulesKeyword_6_0());
			}
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getQActorAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQActorAccess().getRulesRuleParserRuleCall_6_2_0());
					}
					lv_rules_9_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQActorRule());
						}
						add(
							$current,
							"rules",
							lv_rules_9_0,
							"xtext.qactor.QADocker.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getQActorAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorAccess().getDataDataParserRuleCall_7_0());
				}
				lv_data_11_0=ruleData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorRule());
					}
					add(
						$current,
						"data",
						lv_data_11_0,
						"xtext.qactor.QADocker.Data");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorAccess().getActionActionParserRuleCall_8_0());
				}
				lv_action_12_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorRule());
					}
					add(
						$current,
						"action",
						lv_action_12_0,
						"xtext.qactor.QADocker.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQActorAccess().getPlansPlanParserRuleCall_9_0());
				}
				lv_plans_13_0=rulePlan
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQActorRule());
					}
					add(
						$current,
						"plans",
						lv_plans_13_0,
						"xtext.qactor.QADocker.Plan");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getQActorAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getHeadPHeadParserRuleCall_0_0());
				}
				lv_head_0_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=':-'
			{
				newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getBodyPTermParserRuleCall_1_1_0());
					}
					lv_body_2_0=rulePTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"body",
							lv_body_2_0,
							"xtext.qactor.QADocker.PTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getBodyPTermParserRuleCall_1_2_1_0());
						}
						lv_body_4_0=rulePTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"body",
								lv_body_4_0,
								"xtext.qactor.QADocker.PTerm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRulePHead
entryRulePHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPHeadRule()); }
	iv_rulePHead=rulePHead
	{ $current=$iv_rulePHead.current; }
	EOF;

// Rule PHead
rulePHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPHeadAccess().getPAtomParserRuleCall_0());
		}
		this_PAtom_0=rulePAtom
		{
			$current = $this_PAtom_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPHeadAccess().getPStructParserRuleCall_1());
		}
		this_PStruct_1=rulePStruct
		{
			$current = $this_PStruct_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePTerm
entryRulePTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPTermRule()); }
	iv_rulePTerm=rulePTerm
	{ $current=$iv_rulePTerm.current; }
	EOF;

// Rule PTerm
rulePTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPTermAccess().getPAtomParserRuleCall_0());
		}
		this_PAtom_0=rulePAtom
		{
			$current = $this_PAtom_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPTermAccess().getPStructParserRuleCall_1());
		}
		this_PStruct_1=rulePStruct
		{
			$current = $this_PStruct_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPTermAccess().getPPredefParserRuleCall_2());
		}
		this_PPredef_2=rulePPredef
		{
			$current = $this_PPredef_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPTermAccess().getPActorCallParserRuleCall_3());
		}
		this_PActorCall_3=rulePActorCall
		{
			$current = $this_PActorCall_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePAtom
entryRulePAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAtomRule()); }
	iv_rulePAtom=rulePAtom
	{ $current=$iv_rulePAtom.current; }
	EOF;

// Rule PAtom
rulePAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPAtomAccess().getPAtomStringParserRuleCall_0());
		}
		this_PAtomString_0=rulePAtomString
		{
			$current = $this_PAtomString_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPAtomAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPAtomAccess().getPAtomNumParserRuleCall_2());
		}
		this_PAtomNum_2=rulePAtomNum
		{
			$current = $this_PAtomNum_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPAtomAccess().getPAtomicParserRuleCall_3());
		}
		this_PAtomic_3=rulePAtomic
		{
			$current = $this_PAtomic_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePAtomString
entryRulePAtomString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAtomStringRule()); }
	iv_rulePAtomString=rulePAtomString
	{ $current=$iv_rulePAtomString.current; }
	EOF;

// Rule PAtomString
rulePAtomString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_STRING
			{
				newLeafNode(lv_val_0_0, grammarAccess.getPAtomStringAccess().getValSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPAtomStringRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRulePAtomic
entryRulePAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAtomicRule()); }
	iv_rulePAtomic=rulePAtomic
	{ $current=$iv_rulePAtomic.current; }
	EOF;

// Rule PAtomic
rulePAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_ID
			{
				newLeafNode(lv_val_0_0, grammarAccess.getPAtomicAccess().getValIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPAtomicRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulePAtomNum
entryRulePAtomNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAtomNumRule()); }
	iv_rulePAtomNum=rulePAtomNum
	{ $current=$iv_rulePAtomNum.current; }
	EOF;

// Rule PAtomNum
rulePAtomNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getPAtomNumAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPAtomNumRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRulePStruct
entryRulePStruct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPStructRule()); }
	iv_rulePStruct=rulePStruct
	{ $current=$iv_rulePStruct.current; }
	EOF;

// Rule PStruct
rulePStruct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_functor_0_0=RULE_ID
				{
					newLeafNode(lv_functor_0_0, grammarAccess.getPStructAccess().getFunctorIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPStructRule());
					}
					setWithLastConsumed(
						$current,
						"functor",
						lv_functor_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPStructAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPStructAccess().getMsgArgPTermParserRuleCall_2_0());
				}
				lv_msgArg_2_0=rulePTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPStructRule());
					}
					add(
						$current,
						"msgArg",
						lv_msgArg_2_0,
						"xtext.qactor.QADocker.PTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPStructAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPStructAccess().getMsgArgPTermParserRuleCall_3_1_0());
					}
					lv_msgArg_4_0=rulePTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPStructRule());
						}
						add(
							$current,
							"msgArg",
							lv_msgArg_4_0,
							"xtext.qactor.QADocker.PTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPStructAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePActorCall
entryRulePActorCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPActorCallRule()); }
	iv_rulePActorCall=rulePActorCall
	{ $current=$iv_rulePActorCall.current; }
	EOF;

// Rule PActorCall
rulePActorCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Actor'
		{
			newLeafNode(otherlv_0, grammarAccess.getPActorCallAccess().getActorKeyword_0());
		}
		otherlv_1='<-'
		{
			newLeafNode(otherlv_1, grammarAccess.getPActorCallAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPActorCallAccess().getBodyPStructParserRuleCall_2_0());
				}
				lv_body_2_0=rulePStruct
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPActorCallRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"xtext.qactor.QADocker.PStruct");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePPredef
entryRulePPredef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPPredefRule()); }
	iv_rulePPredef=rulePPredef
	{ $current=$iv_rulePPredef.current; }
	EOF;

// Rule PPredef
rulePPredef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPPredefAccess().getPAtomCutParserRuleCall_0());
		}
		this_PAtomCut_0=rulePAtomCut
		{
			$current = $this_PAtomCut_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPPredefAccess().getPIsParserRuleCall_1());
		}
		this_PIs_1=rulePIs
		{
			$current = $this_PIs_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePIs
entryRulePIs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPIsRule()); }
	iv_rulePIs=rulePIs
	{ $current=$iv_rulePIs.current; }
	EOF;

// Rule PIs
rulePIs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPIsAccess().getVaroutVariableParserRuleCall_0_0());
				}
				lv_varout_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPIsRule());
					}
					set(
						$current,
						"varout",
						lv_varout_0_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getPIsAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPIsAccess().getVarinVariableParserRuleCall_2_0());
				}
				lv_varin_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPIsRule());
					}
					set(
						$current,
						"varin",
						lv_varin_2_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='+'
		{
			newLeafNode(otherlv_3, grammarAccess.getPIsAccess().getPlusSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPIsAccess().getNumPAtomNumParserRuleCall_4_0());
				}
				lv_num_4_0=rulePAtomNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPIsRule());
					}
					set(
						$current,
						"num",
						lv_num_4_0,
						"xtext.qactor.QADocker.PAtomNum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePAtomCut
entryRulePAtomCut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAtomCutRule()); }
	iv_rulePAtomCut=rulePAtomCut
	{ $current=$iv_rulePAtomCut.current; }
	EOF;

// Rule PAtomCut
rulePAtomCut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPAtomCutAccess().getPAtomCutAction_0(),
					$current);
			}
		)
		otherlv_1='!'
		{
			newLeafNode(otherlv_1, grammarAccess.getPAtomCutAccess().getExclamationMarkKeyword_1());
		}
	)
;

// Entry rule entryRuleData
entryRuleData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	iv_ruleData=ruleData
	{ $current=$iv_ruleData.current; }
	EOF;

// Rule Data
ruleData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataAccess().getIntegerDataParserRuleCall_0());
		}
		this_IntegerData_0=ruleIntegerData
		{
			$current = $this_IntegerData_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataAccess().getStringDataParserRuleCall_1());
		}
		this_StringData_1=ruleStringData
		{
			$current = $this_StringData_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerData
entryRuleIntegerData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerDataRule()); }
	iv_ruleIntegerData=ruleIntegerData
	{ $current=$iv_ruleIntegerData.current; }
	EOF;

// Rule IntegerData
ruleIntegerData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerDataAccess().getIntegerDataAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerDataAccess().getIntKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIntegerDataAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerDataRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerDataAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_value_4_0=RULE_INT
				{
					newLeafNode(lv_value_4_0, grammarAccess.getIntegerDataAccess().getValueINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerDataRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringData
entryRuleStringData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringDataRule()); }
	iv_ruleStringData=ruleStringData
	{ $current=$iv_ruleStringData.current; }
	EOF;

// Rule StringData
ruleStringData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringDataAccess().getStringDataAction_0(),
					$current);
			}
		)
		otherlv_1='String'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringDataAccess().getStringKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStringDataAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringDataRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getStringDataAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_value_4_0=RULE_STRING
				{
					newLeafNode(lv_value_4_0, grammarAccess.getStringDataAccess().getValueSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringDataRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Action'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionAccess().getActionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_undoable_2_0='undoable'
				{
					newLeafNode(lv_undoable_2_0, grammarAccess.getActionAccess().getUndoableUndoableKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed($current, "undoable", true, "undoable");
				}
			)
		)?
		(
			otherlv_3='maxtime'
			{
				newLeafNode(otherlv_3, grammarAccess.getActionAccess().getMaxtimeKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getActionAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					lv_msec_5_0=RULE_INT
					{
						newLeafNode(lv_msec_5_0, grammarAccess.getActionAccess().getMsecINTTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionRule());
						}
						setWithLastConsumed(
							$current,
							"msec",
							lv_msec_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getActionAccess().getRightParenthesisKeyword_3_3());
			}
		)
		(
			otherlv_7='arg'
			{
				newLeafNode(otherlv_7, grammarAccess.getActionAccess().getArgKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getArgPStructParserRuleCall_4_1_0());
					}
					lv_arg_8_0=rulePStruct
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_8_0,
							"xtext.qactor.QADocker.PStruct");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getActionAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlanRule()); }
	iv_rulePlan=rulePlan
	{ $current=$iv_rulePlan.current; }
	EOF;

// Rule Plan
rulePlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Plan'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlanAccess().getPlanKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPlanAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlanRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_normal_2_0='normal'
				{
					newLeafNode(lv_normal_2_0, grammarAccess.getPlanAccess().getNormalNormalKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlanRule());
					}
					setWithLastConsumed($current, "normal", true, "normal");
				}
			)
		)?
		(
			(
				lv_resume_3_0='resumeLastPlan'
				{
					newLeafNode(lv_resume_3_0, grammarAccess.getPlanAccess().getResumeResumeLastPlanKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlanRule());
					}
					setWithLastConsumed($current, "resume", true, "resumeLastPlan");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPlanAccess().getActionPlanActionParserRuleCall_4_0());
				}
				lv_action_4_0=rulePlanAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlanRule());
					}
					add(
						$current,
						"action",
						lv_action_4_0,
						"xtext.qactor.QADocker.PlanAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getPlanAccess().getSemicolonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlanAccess().getActionPlanActionParserRuleCall_5_1_0());
					}
					lv_action_6_0=rulePlanAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlanRule());
						}
						add(
							$current,
							"action",
							lv_action_6_0,
							"xtext.qactor.QADocker.PlanAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlanAction
entryRulePlanAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlanActionRule()); }
	iv_rulePlanAction=rulePlanAction
	{ $current=$iv_rulePlanAction.current; }
	EOF;

// Rule PlanAction
rulePlanAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPlanActionAccess().getGuardGuardParserRuleCall_0_0());
				}
				lv_guard_0_0=ruleGuard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlanActionRule());
					}
					set(
						$current,
						"guard",
						lv_guard_0_0,
						"xtext.qactor.QADocker.Guard");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPlanActionAccess().getMoveMoveParserRuleCall_1_0());
				}
				lv_move_1_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlanActionRule());
					}
					set(
						$current,
						"move",
						lv_move_1_0,
						"xtext.qactor.QADocker.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPlanActionAccess().getReactReactionParserRuleCall_2_0());
				}
				lv_react_2_0=ruleReaction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlanActionRule());
					}
					set(
						$current,
						"react",
						lv_react_2_0,
						"xtext.qactor.QADocker.Reaction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3='else'
			{
				newLeafNode(otherlv_3, grammarAccess.getPlanActionAccess().getElseKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlanActionAccess().getElsemoveMoveParserRuleCall_3_1_0());
					}
					lv_elsemove_4_0=ruleMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlanActionRule());
						}
						set(
							$current,
							"elsemove",
							lv_elsemove_4_0,
							"xtext.qactor.QADocker.Move");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlanActionAccess().getElsereactReactionParserRuleCall_3_2_0());
					}
					lv_elsereact_5_0=ruleReaction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlanActionRule());
						}
						set(
							$current,
							"elsereact",
							lv_elsereact_5_0,
							"xtext.qactor.QADocker.Reaction");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
	)
;

// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	iv_ruleGuard=ruleGuard
	{ $current=$iv_ruleGuard.current; }
	EOF;

// Rule Guard
ruleGuard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGuardAccess().getGuardAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getGuardAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_not_2_0='not'
				{
					newLeafNode(lv_not_2_0, grammarAccess.getGuardAccess().getNotNotKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGuardRule());
					}
					setWithLastConsumed($current, "not", true, "not");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardAccess().getGuardspecGuardPredicateParserRuleCall_3_0());
				}
				lv_guardspec_3_0=ruleGuardPredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardRule());
					}
					set(
						$current,
						"guardspec",
						lv_guardspec_3_0,
						"xtext.qactor.QADocker.GuardPredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getGuardAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGuardPredicate
entryRuleGuardPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardPredicateRule()); }
	iv_ruleGuardPredicate=ruleGuardPredicate
	{ $current=$iv_ruleGuardPredicate.current; }
	EOF;

// Rule GuardPredicate
ruleGuardPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGuardPredicateAccess().getGuardPredicateStableParserRuleCall_0());
		}
		this_GuardPredicateStable_0=ruleGuardPredicateStable
		{
			$current = $this_GuardPredicateStable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuardPredicateAccess().getGuardPredicateRemovableParserRuleCall_1());
		}
		this_GuardPredicateRemovable_1=ruleGuardPredicateRemovable
		{
			$current = $this_GuardPredicateRemovable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGuardPredicateRemovable
entryRuleGuardPredicateRemovable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardPredicateRemovableRule()); }
	iv_ruleGuardPredicateRemovable=ruleGuardPredicateRemovable
	{ $current=$iv_ruleGuardPredicateRemovable.current; }
	EOF;

// Rule GuardPredicateRemovable
ruleGuardPredicateRemovable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGuardPredicateRemovableAccess().getGuardPredicateRemovableAction_0(),
					$current);
			}
		)
		otherlv_1='??'
		{
			newLeafNode(otherlv_1, grammarAccess.getGuardPredicateRemovableAccess().getQuestionMarkQuestionMarkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardPredicateRemovableAccess().getPredPTermParserRuleCall_2_0());
				}
				lv_pred_2_0=rulePTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardPredicateRemovableRule());
					}
					set(
						$current,
						"pred",
						lv_pred_2_0,
						"xtext.qactor.QADocker.PTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGuardPredicateStable
entryRuleGuardPredicateStable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardPredicateStableRule()); }
	iv_ruleGuardPredicateStable=ruleGuardPredicateStable
	{ $current=$iv_ruleGuardPredicateStable.current; }
	EOF;

// Rule GuardPredicateStable
ruleGuardPredicateStable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGuardPredicateStableAccess().getGuardPredicateStableAction_0(),
					$current);
			}
		)
		otherlv_1='!?'
		{
			newLeafNode(otherlv_1, grammarAccess.getGuardPredicateStableAccess().getExclamationMarkQuestionMarkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardPredicateStableAccess().getPredPTermParserRuleCall_2_0());
				}
				lv_pred_2_0=rulePTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardPredicateStableRule());
					}
					set(
						$current,
						"pred",
						lv_pred_2_0,
						"xtext.qactor.QADocker.PTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMoveAccess().getActionMoveParserRuleCall_0());
		}
		this_ActionMove_0=ruleActionMove
		{
			$current = $this_ActionMove_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getMessageMoveParserRuleCall_1());
		}
		this_MessageMove_1=ruleMessageMove
		{
			$current = $this_MessageMove_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getExtensionMoveParserRuleCall_2());
		}
		this_ExtensionMove_2=ruleExtensionMove
		{
			$current = $this_ExtensionMove_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getBasicMoveParserRuleCall_3());
		}
		this_BasicMove_3=ruleBasicMove
		{
			$current = $this_BasicMove_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getPlanMoveParserRuleCall_4());
		}
		this_PlanMove_4=rulePlanMove
		{
			$current = $this_PlanMove_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getGuardMoveParserRuleCall_5());
		}
		this_GuardMove_5=ruleGuardMove
		{
			$current = $this_GuardMove_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getBasicRobotMoveParserRuleCall_6());
		}
		this_BasicRobotMove_6=ruleBasicRobotMove
		{
			$current = $this_BasicRobotMove_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActionMove
entryRuleActionMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionMoveRule()); }
	iv_ruleActionMove=ruleActionMove
	{ $current=$iv_ruleActionMove.current; }
	EOF;

// Rule ActionMove
ruleActionMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionMoveAccess().getExecuteActionParserRuleCall_0());
		}
		this_ExecuteAction_0=ruleExecuteAction
		{
			$current = $this_ExecuteAction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionMoveAccess().getSolveGoalParserRuleCall_1());
		}
		this_SolveGoal_1=ruleSolveGoal
		{
			$current = $this_SolveGoal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionMoveAccess().getDemoParserRuleCall_2());
		}
		this_Demo_2=ruleDemo
		{
			$current = $this_Demo_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionMoveAccess().getActorOpParserRuleCall_3());
		}
		this_ActorOp_3=ruleActorOp
		{
			$current = $this_ActorOp_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExecuteAction
entryRuleExecuteAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecuteActionRule()); }
	iv_ruleExecuteAction=ruleExecuteAction
	{ $current=$iv_ruleExecuteAction.current; }
	EOF;

// Rule ExecuteAction
ruleExecuteAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecuteActionAccess().getExecuteActionAction_0_0(),
						$current);
				}
			)
			otherlv_1='execute'
			{
				newLeafNode(otherlv_1, grammarAccess.getExecuteActionAccess().getExecuteKeyword_0_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExecuteActionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getExecuteActionAccess().getActionActionCrossReference_0_2_0());
					}
				)
			)
			(
				otherlv_3='with'
				{
					newLeafNode(otherlv_3, grammarAccess.getExecuteActionAccess().getWithKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExecuteActionAccess().getArgPHeadParserRuleCall_0_3_1_0());
						}
						lv_arg_4_0=rulePHead
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExecuteActionRule());
							}
							set(
								$current,
								"arg",
								lv_arg_4_0,
								"xtext.qactor.QADocker.PHead");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_5='dosentence'
			{
				newLeafNode(otherlv_5, grammarAccess.getExecuteActionAccess().getDosentenceKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExecuteActionAccess().getSentencePHeadParserRuleCall_1_1_0());
					}
					lv_sentence_6_0=rulePHead
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExecuteActionRule());
						}
						set(
							$current,
							"sentence",
							lv_sentence_6_0,
							"xtext.qactor.QADocker.PHead");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSolveGoal
entryRuleSolveGoal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSolveGoalRule()); }
	iv_ruleSolveGoal=ruleSolveGoal
	{ $current=$iv_ruleSolveGoal.current; }
	EOF;

// Rule SolveGoal
ruleSolveGoal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSolveGoalAccess().getSolveGoalAction_0(),
					$current);
			}
		)
		otherlv_1='solve'
		{
			newLeafNode(otherlv_1, grammarAccess.getSolveGoalAccess().getSolveKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSolveGoalAccess().getGoalPHeadParserRuleCall_2_0());
				}
				lv_goal_2_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolveGoalRule());
					}
					set(
						$current,
						"goal",
						lv_goal_2_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSolveGoalAccess().getDurationTimeLimitParserRuleCall_3_0());
				}
				lv_duration_3_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolveGoalRule());
					}
					set(
						$current,
						"duration",
						lv_duration_3_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='onFailSwitchTo'
			{
				newLeafNode(otherlv_4, grammarAccess.getSolveGoalAccess().getOnFailSwitchToKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSolveGoalRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSolveGoalAccess().getPlanPlanCrossReference_4_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDemo
entryRuleDemo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDemoRule()); }
	iv_ruleDemo=ruleDemo
	{ $current=$iv_ruleDemo.current; }
	EOF;

// Rule Demo
ruleDemo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDemoAccess().getDemoAction_0(),
					$current);
			}
		)
		otherlv_1='demo'
		{
			newLeafNode(otherlv_1, grammarAccess.getDemoAccess().getDemoKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDemoAccess().getGoalPHeadParserRuleCall_2_0());
				}
				lv_goal_2_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDemoRule());
					}
					set(
						$current,
						"goal",
						lv_goal_2_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='onFailSwitchTo'
			{
				newLeafNode(otherlv_3, grammarAccess.getDemoAccess().getOnFailSwitchToKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDemoRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getDemoAccess().getPlanPlanCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleActorOp
entryRuleActorOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorOpRule()); }
	iv_ruleActorOp=ruleActorOp
	{ $current=$iv_ruleActorOp.current; }
	EOF;

// Rule ActorOp
ruleActorOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActorOpAccess().getActorOpAction_0(),
					$current);
			}
		)
		otherlv_1='actorOp'
		{
			newLeafNode(otherlv_1, grammarAccess.getActorOpAccess().getActorOpKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActorOpAccess().getGoalPHeadParserRuleCall_2_0());
				}
				lv_goal_2_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorOpRule());
					}
					set(
						$current,
						"goal",
						lv_goal_2_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='onFailSwitchTo'
			{
				newLeafNode(otherlv_3, grammarAccess.getActorOpAccess().getOnFailSwitchToKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorOpRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getActorOpAccess().getPlanPlanCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBasicRobotMove
entryRuleBasicRobotMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicRobotMoveRule()); }
	iv_ruleBasicRobotMove=ruleBasicRobotMove
	{ $current=$iv_ruleBasicRobotMove.current; }
	EOF;

// Rule BasicRobotMove
ruleBasicRobotMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBasicRobotMoveAccess().getBasicRobotMoveAction_0(),
					$current);
			}
		)
		otherlv_1='dummyRobotMove'
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicRobotMoveAccess().getDummyRobotMoveKeyword_1());
		}
	)
;

// Entry rule entryRuleBasicMove
entryRuleBasicMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicMoveRule()); }
	iv_ruleBasicMove=ruleBasicMove
	{ $current=$iv_ruleBasicMove.current; }
	EOF;

// Rule BasicMove
ruleBasicMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBasicMoveAccess().getPrintParserRuleCall_0());
		}
		this_Print_0=rulePrint
		{
			$current = $this_Print_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicMoveAccess().getPrintCurrentEventParserRuleCall_1());
		}
		this_PrintCurrentEvent_1=rulePrintCurrentEvent
		{
			$current = $this_PrintCurrentEvent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicMoveAccess().getPrintCurrentMessageParserRuleCall_2());
		}
		this_PrintCurrentMessage_2=rulePrintCurrentMessage
		{
			$current = $this_PrintCurrentMessage_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicMoveAccess().getMemoCurrentEventParserRuleCall_3());
		}
		this_MemoCurrentEvent_3=ruleMemoCurrentEvent
		{
			$current = $this_MemoCurrentEvent_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasicMoveAccess().getMemoCurrentMessageParserRuleCall_4());
		}
		this_MemoCurrentMessage_4=ruleMemoCurrentMessage
		{
			$current = $this_MemoCurrentMessage_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintAccess().getPrintAction_0(),
					$current);
			}
		)
		otherlv_1='println'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getPrintlnKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getArgsPHeadParserRuleCall_3_0());
				}
				lv_args_3_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"args",
						lv_args_3_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPrintAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePrintCurrentEvent
entryRulePrintCurrentEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintCurrentEventRule()); }
	iv_rulePrintCurrentEvent=rulePrintCurrentEvent
	{ $current=$iv_rulePrintCurrentEvent.current; }
	EOF;

// Rule PrintCurrentEvent
rulePrintCurrentEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintCurrentEventAccess().getPrintCurrentEventAction_0(),
					$current);
			}
		)
		otherlv_1='printCurrentEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintCurrentEventAccess().getPrintCurrentEventKeyword_1());
		}
		(
			(
				lv_memo_2_0='-memo'
				{
					newLeafNode(lv_memo_2_0, grammarAccess.getPrintCurrentEventAccess().getMemoMemoKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintCurrentEventRule());
					}
					setWithLastConsumed($current, "memo", true, "-memo");
				}
			)
		)?
	)
;

// Entry rule entryRulePrintCurrentMessage
entryRulePrintCurrentMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintCurrentMessageRule()); }
	iv_rulePrintCurrentMessage=rulePrintCurrentMessage
	{ $current=$iv_rulePrintCurrentMessage.current; }
	EOF;

// Rule PrintCurrentMessage
rulePrintCurrentMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintCurrentMessageAccess().getPrintCurrentMessageAction_0(),
					$current);
			}
		)
		otherlv_1='printCurrentMessage'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintCurrentMessageAccess().getPrintCurrentMessageKeyword_1());
		}
		(
			(
				lv_memo_2_0='-memo'
				{
					newLeafNode(lv_memo_2_0, grammarAccess.getPrintCurrentMessageAccess().getMemoMemoKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintCurrentMessageRule());
					}
					setWithLastConsumed($current, "memo", true, "-memo");
				}
			)
		)?
	)
;

// Entry rule entryRuleMemoCurrentEvent
entryRuleMemoCurrentEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoCurrentEventRule()); }
	iv_ruleMemoCurrentEvent=ruleMemoCurrentEvent
	{ $current=$iv_ruleMemoCurrentEvent.current; }
	EOF;

// Rule MemoCurrentEvent
ruleMemoCurrentEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMemoCurrentEventAccess().getMemoCurrentEventAction_0(),
					$current);
			}
		)
		otherlv_1='memoCurrentEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getMemoCurrentEventAccess().getMemoCurrentEventKeyword_1());
		}
		(
			(
				lv_lastonly_2_0='-lastonly'
				{
					newLeafNode(lv_lastonly_2_0, grammarAccess.getMemoCurrentEventAccess().getLastonlyLastonlyKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemoCurrentEventRule());
					}
					setWithLastConsumed($current, "lastonly", true, "-lastonly");
				}
			)
		)?
	)
;

// Entry rule entryRuleMemoCurrentMessage
entryRuleMemoCurrentMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoCurrentMessageRule()); }
	iv_ruleMemoCurrentMessage=ruleMemoCurrentMessage
	{ $current=$iv_ruleMemoCurrentMessage.current; }
	EOF;

// Rule MemoCurrentMessage
ruleMemoCurrentMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMemoCurrentMessageAccess().getMemoCurrentMessageAction_0(),
					$current);
			}
		)
		otherlv_1='memoCurrentMessage'
		{
			newLeafNode(otherlv_1, grammarAccess.getMemoCurrentMessageAccess().getMemoCurrentMessageKeyword_1());
		}
		(
			(
				lv_lastonly_2_0='-lastonly'
				{
					newLeafNode(lv_lastonly_2_0, grammarAccess.getMemoCurrentMessageAccess().getLastonlyLastonlyKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemoCurrentMessageRule());
					}
					setWithLastConsumed($current, "lastonly", true, "-lastonly");
				}
			)
		)?
	)
;

// Entry rule entryRulePlanMove
entryRulePlanMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlanMoveRule()); }
	iv_rulePlanMove=rulePlanMove
	{ $current=$iv_rulePlanMove.current; }
	EOF;

// Rule PlanMove
rulePlanMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getGetActivationEventParserRuleCall_0());
		}
		this_GetActivationEvent_0=ruleGetActivationEvent
		{
			$current = $this_GetActivationEvent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getGetSensedEventParserRuleCall_1());
		}
		this_GetSensedEvent_1=ruleGetSensedEvent
		{
			$current = $this_GetSensedEvent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getLoadPlanParserRuleCall_2());
		}
		this_LoadPlan_2=ruleLoadPlan
		{
			$current = $this_LoadPlan_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getRunPlanParserRuleCall_3());
		}
		this_RunPlan_3=ruleRunPlan
		{
			$current = $this_RunPlan_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getResumePlanParserRuleCall_4());
		}
		this_ResumePlan_4=ruleResumePlan
		{
			$current = $this_ResumePlan_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getRepeatPlanParserRuleCall_5());
		}
		this_RepeatPlan_5=ruleRepeatPlan
		{
			$current = $this_RepeatPlan_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getSwitchPlanParserRuleCall_6());
		}
		this_SwitchPlan_6=ruleSwitchPlan
		{
			$current = $this_SwitchPlan_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getSuspendPlanParserRuleCall_7());
		}
		this_SuspendPlan_7=ruleSuspendPlan
		{
			$current = $this_SuspendPlan_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getEndPlanParserRuleCall_8());
		}
		this_EndPlan_8=ruleEndPlan
		{
			$current = $this_EndPlan_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlanMoveAccess().getEndActorParserRuleCall_9());
		}
		this_EndActor_9=ruleEndActor
		{
			$current = $this_EndActor_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGetActivationEvent
entryRuleGetActivationEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetActivationEventRule()); }
	iv_ruleGetActivationEvent=ruleGetActivationEvent
	{ $current=$iv_ruleGetActivationEvent.current; }
	EOF;

// Rule GetActivationEvent
ruleGetActivationEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGetActivationEventAccess().getGetActivationEventAction_0(),
					$current);
			}
		)
		otherlv_1='getActivationEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getGetActivationEventAccess().getGetActivationEventKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetActivationEventAccess().getVarVariableParserRuleCall_2_0());
				}
				lv_var_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetActivationEventRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGetSensedEvent
entryRuleGetSensedEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetSensedEventRule()); }
	iv_ruleGetSensedEvent=ruleGetSensedEvent
	{ $current=$iv_ruleGetSensedEvent.current; }
	EOF;

// Rule GetSensedEvent
ruleGetSensedEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGetSensedEventAccess().getGetSensedEventAction_0(),
					$current);
			}
		)
		otherlv_1='getSensedEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getGetSensedEventAccess().getGetSensedEventKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetSensedEventAccess().getVarVariableParserRuleCall_2_0());
				}
				lv_var_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetSensedEventRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLoadPlan
entryRuleLoadPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadPlanRule()); }
	iv_ruleLoadPlan=ruleLoadPlan
	{ $current=$iv_ruleLoadPlan.current; }
	EOF;

// Rule LoadPlan
ruleLoadPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLoadPlanAccess().getLoadPlanAction_0(),
					$current);
			}
		)
		otherlv_1='loadPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getLoadPlanAccess().getLoadPlanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoadPlanAccess().getFnameVarOrStringParserRuleCall_2_0());
				}
				lv_fname_2_0=ruleVarOrString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoadPlanRule());
					}
					set(
						$current,
						"fname",
						lv_fname_2_0,
						"xtext.qactor.QADocker.VarOrString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRunPlan
entryRuleRunPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunPlanRule()); }
	iv_ruleRunPlan=ruleRunPlan
	{ $current=$iv_ruleRunPlan.current; }
	EOF;

// Rule RunPlan
ruleRunPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRunPlanAccess().getRunPlanAction_0(),
					$current);
			}
		)
		otherlv_1='runPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getRunPlanAccess().getRunPlanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRunPlanAccess().getPlainidVarOrAtomicParserRuleCall_2_0());
				}
				lv_plainid_2_0=ruleVarOrAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunPlanRule());
					}
					set(
						$current,
						"plainid",
						lv_plainid_2_0,
						"xtext.qactor.QADocker.VarOrAtomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRunPlanAccess().getDurationTimeLimitParserRuleCall_3_0());
				}
				lv_duration_3_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunPlanRule());
					}
					set(
						$current,
						"duration",
						lv_duration_3_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleResumePlan
entryRuleResumePlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResumePlanRule()); }
	iv_ruleResumePlan=ruleResumePlan
	{ $current=$iv_ruleResumePlan.current; }
	EOF;

// Rule ResumePlan
ruleResumePlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getResumePlanAccess().getResumePlanAction_0(),
					$current);
			}
		)
		otherlv_1='resumeLastPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getResumePlanAccess().getResumeLastPlanKeyword_1());
		}
	)
;

// Entry rule entryRuleSuspendPlan
entryRuleSuspendPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuspendPlanRule()); }
	iv_ruleSuspendPlan=ruleSuspendPlan
	{ $current=$iv_ruleSuspendPlan.current; }
	EOF;

// Rule SuspendPlan
ruleSuspendPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSuspendPlanAccess().getSuspendPlanAction_0(),
					$current);
			}
		)
		otherlv_1='suspendLastPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getSuspendPlanAccess().getSuspendLastPlanKeyword_1());
		}
	)
;

// Entry rule entryRuleRepeatPlan
entryRuleRepeatPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatPlanRule()); }
	iv_ruleRepeatPlan=ruleRepeatPlan
	{ $current=$iv_ruleRepeatPlan.current; }
	EOF;

// Rule RepeatPlan
ruleRepeatPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepeatPlanAccess().getRepeatPlanAction_0(),
					$current);
			}
		)
		otherlv_1='repeatPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getRepeatPlanAccess().getRepeatPlanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatPlanAccess().getNiterVarOrIntParserRuleCall_2_0());
				}
				lv_niter_2_0=ruleVarOrInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatPlanRule());
					}
					set(
						$current,
						"niter",
						lv_niter_2_0,
						"xtext.qactor.QADocker.VarOrInt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSwitchPlan
entryRuleSwitchPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchPlanRule()); }
	iv_ruleSwitchPlan=ruleSwitchPlan
	{ $current=$iv_ruleSwitchPlan.current; }
	EOF;

// Rule SwitchPlan
ruleSwitchPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSwitchPlanAccess().getSwitchPlanAction_0(),
					$current);
			}
		)
		otherlv_1='switchToPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchPlanAccess().getSwitchToPlanKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSwitchPlanRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSwitchPlanAccess().getPlanPlanCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEndPlan
entryRuleEndPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndPlanRule()); }
	iv_ruleEndPlan=ruleEndPlan
	{ $current=$iv_ruleEndPlan.current; }
	EOF;

// Rule EndPlan
ruleEndPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndPlanAccess().getEndPlanAction_0(),
					$current);
			}
		)
		otherlv_1='endPlan'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndPlanAccess().getEndPlanKeyword_1());
		}
		(
			(
				lv_msg_2_0=RULE_STRING
				{
					newLeafNode(lv_msg_2_0, grammarAccess.getEndPlanAccess().getMsgSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndPlanRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEndActor
entryRuleEndActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndActorRule()); }
	iv_ruleEndActor=ruleEndActor
	{ $current=$iv_ruleEndActor.current; }
	EOF;

// Rule EndActor
ruleEndActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndActorAccess().getEndActorAction_0(),
					$current);
			}
		)
		otherlv_1='endQActor'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndActorAccess().getEndQActorKeyword_1());
		}
		(
			(
				lv_msg_2_0=RULE_STRING
				{
					newLeafNode(lv_msg_2_0, grammarAccess.getEndActorAccess().getMsgSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndActorRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleGuardMove
entryRuleGuardMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardMoveRule()); }
	iv_ruleGuardMove=ruleGuardMove
	{ $current=$iv_ruleGuardMove.current; }
	EOF;

// Rule GuardMove
ruleGuardMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGuardMoveAccess().getAddRuleParserRuleCall_0());
		}
		this_AddRule_0=ruleAddRule
		{
			$current = $this_AddRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuardMoveAccess().getRemoveRuleParserRuleCall_1());
		}
		this_RemoveRule_1=ruleRemoveRule
		{
			$current = $this_RemoveRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAddRule
entryRuleAddRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRuleRule()); }
	iv_ruleAddRule=ruleAddRule
	{ $current=$iv_ruleAddRule.current; }
	EOF;

// Rule AddRule
ruleAddRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAddRuleAccess().getAddRuleAction_0(),
					$current);
			}
		)
		otherlv_1='addRule'
		{
			newLeafNode(otherlv_1, grammarAccess.getAddRuleAccess().getAddRuleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddRuleAccess().getRulePHeadParserRuleCall_2_0());
				}
				lv_rule_2_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_2_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRemoveRule
entryRuleRemoveRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveRuleRule()); }
	iv_ruleRemoveRule=ruleRemoveRule
	{ $current=$iv_ruleRemoveRule.current; }
	EOF;

// Rule RemoveRule
ruleRemoveRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRemoveRuleAccess().getRemoveRuleAction_0(),
					$current);
			}
		)
		otherlv_1='removeRule'
		{
			newLeafNode(otherlv_1, grammarAccess.getRemoveRuleAccess().getRemoveRuleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveRuleAccess().getRulePHeadParserRuleCall_2_0());
				}
				lv_rule_2_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_2_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMessageMove
entryRuleMessageMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageMoveRule()); }
	iv_ruleMessageMove=ruleMessageMove
	{ $current=$iv_ruleMessageMove.current; }
	EOF;

// Rule MessageMove
ruleMessageMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getSendDispatchParserRuleCall_0());
		}
		this_SendDispatch_0=ruleSendDispatch
		{
			$current = $this_SendDispatch_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getSendRequestParserRuleCall_1());
		}
		this_SendRequest_1=ruleSendRequest
		{
			$current = $this_SendRequest_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getReplyToCallerParserRuleCall_2());
		}
		this_ReplyToCaller_2=ruleReplyToCaller
		{
			$current = $this_ReplyToCaller_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getReceiveMsgParserRuleCall_3());
		}
		this_ReceiveMsg_3=ruleReceiveMsg
		{
			$current = $this_ReceiveMsg_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getOnReceiveMsgParserRuleCall_4());
		}
		this_OnReceiveMsg_4=ruleOnReceiveMsg
		{
			$current = $this_OnReceiveMsg_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getMsgSelectParserRuleCall_5());
		}
		this_MsgSelect_5=ruleMsgSelect
		{
			$current = $this_MsgSelect_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getRaiseEventParserRuleCall_6());
		}
		this_RaiseEvent_6=ruleRaiseEvent
		{
			$current = $this_RaiseEvent_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getSenseEventParserRuleCall_7());
		}
		this_SenseEvent_7=ruleSenseEvent
		{
			$current = $this_SenseEvent_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getMsgSwitchParserRuleCall_8());
		}
		this_MsgSwitch_8=ruleMsgSwitch
		{
			$current = $this_MsgSwitch_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageMoveAccess().getEventSwitchParserRuleCall_9());
		}
		this_EventSwitch_9=ruleEventSwitch
		{
			$current = $this_EventSwitch_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSendDispatch
entryRuleSendDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendDispatchRule()); }
	iv_ruleSendDispatch=ruleSendDispatch
	{ $current=$iv_ruleSendDispatch.current; }
	EOF;

// Rule SendDispatch
ruleSendDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSendDispatchAccess().getSendDispatchAction_0(),
					$current);
			}
		)
		otherlv_1='forward'
		{
			newLeafNode(otherlv_1, grammarAccess.getSendDispatchAccess().getForwardKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendDispatchAccess().getDestVarOrQactorParserRuleCall_2_0());
				}
				lv_dest_2_0=ruleVarOrQactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendDispatchRule());
					}
					set(
						$current,
						"dest",
						lv_dest_2_0,
						"xtext.qactor.QADocker.VarOrQactor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='-m'
		{
			newLeafNode(otherlv_3, grammarAccess.getSendDispatchAccess().getMKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendDispatchRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getSendDispatchAccess().getMsgrefMessageCrossReference_4_0());
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSendDispatchAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendDispatchAccess().getValPHeadParserRuleCall_6_0());
				}
				lv_val_6_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendDispatchRule());
					}
					set(
						$current,
						"val",
						lv_val_6_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSendRequest
entryRuleSendRequest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendRequestRule()); }
	iv_ruleSendRequest=ruleSendRequest
	{ $current=$iv_ruleSendRequest.current; }
	EOF;

// Rule SendRequest
ruleSendRequest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSendRequestAccess().getSendRequestAction_0(),
					$current);
			}
		)
		otherlv_1='demand'
		{
			newLeafNode(otherlv_1, grammarAccess.getSendRequestAccess().getDemandKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendRequestAccess().getDestVarOrQactorParserRuleCall_2_0());
				}
				lv_dest_2_0=ruleVarOrQactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendRequestRule());
					}
					set(
						$current,
						"dest",
						lv_dest_2_0,
						"xtext.qactor.QADocker.VarOrQactor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='-m'
		{
			newLeafNode(otherlv_3, grammarAccess.getSendRequestAccess().getMKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendRequestRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getSendRequestAccess().getMsgrefMessageCrossReference_4_0());
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSendRequestAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendRequestAccess().getValPHeadParserRuleCall_6_0());
				}
				lv_val_6_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendRequestRule());
					}
					set(
						$current,
						"val",
						lv_val_6_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='answHandle'
			{
				newLeafNode(otherlv_7, grammarAccess.getSendRequestAccess().getAnswHandleKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleReplyToCaller
entryRuleReplyToCaller returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplyToCallerRule()); }
	iv_ruleReplyToCaller=ruleReplyToCaller
	{ $current=$iv_ruleReplyToCaller.current; }
	EOF;

// Rule ReplyToCaller
ruleReplyToCaller returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReplyToCallerAccess().getReplyToCallerAction_0(),
					$current);
			}
		)
		otherlv_1='replyToCaller'
		{
			newLeafNode(otherlv_1, grammarAccess.getReplyToCallerAccess().getReplyToCallerKeyword_1());
		}
		otherlv_2='-m'
		{
			newLeafNode(otherlv_2, grammarAccess.getReplyToCallerAccess().getMKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReplyToCallerRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getReplyToCallerAccess().getMsgrefMessageCrossReference_3_0());
				}
			)
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getReplyToCallerAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReplyToCallerAccess().getValPHeadParserRuleCall_5_0());
				}
				lv_val_5_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReplyToCallerRule());
					}
					set(
						$current,
						"val",
						lv_val_5_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReceiveMsg
entryRuleReceiveMsg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiveMsgRule()); }
	iv_ruleReceiveMsg=ruleReceiveMsg
	{ $current=$iv_ruleReceiveMsg.current; }
	EOF;

// Rule ReceiveMsg
ruleReceiveMsg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReceiveMsgAccess().getReceiveMsgAction_0(),
					$current);
			}
		)
		otherlv_1='receiveMsg'
		{
			newLeafNode(otherlv_1, grammarAccess.getReceiveMsgAccess().getReceiveMsgKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReceiveMsgAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReceiveMsgRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReceiveMsgAccess().getSpecMsgSpecParserRuleCall_3_0());
				}
				lv_spec_3_0=ruleMsgSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReceiveMsgRule());
					}
					set(
						$current,
						"spec",
						lv_spec_3_0,
						"xtext.qactor.QADocker.MsgSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMsgSpec
entryRuleMsgSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMsgSpecRule()); }
	iv_ruleMsgSpec=ruleMsgSpec
	{ $current=$iv_ruleMsgSpec.current; }
	EOF;

// Rule MsgSpec
ruleMsgSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-m'
		{
			newLeafNode(otherlv_0, grammarAccess.getMsgSpecAccess().getMKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMsgSpecRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMsgSpecAccess().getMsgMessageCrossReference_1_0());
				}
			)
		)
		otherlv_2='sender'
		{
			newLeafNode(otherlv_2, grammarAccess.getMsgSpecAccess().getSenderKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMsgSpecAccess().getSenderVarOrAtomicParserRuleCall_3_0());
				}
				lv_sender_3_0=ruleVarOrAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMsgSpecRule());
					}
					set(
						$current,
						"sender",
						lv_sender_3_0,
						"xtext.qactor.QADocker.VarOrAtomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='content'
		{
			newLeafNode(otherlv_4, grammarAccess.getMsgSpecAccess().getContentKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMsgSpecAccess().getContentPHeadParserRuleCall_5_0());
				}
				lv_content_5_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMsgSpecRule());
					}
					set(
						$current,
						"content",
						lv_content_5_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOnReceiveMsg
entryRuleOnReceiveMsg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOnReceiveMsgRule()); }
	iv_ruleOnReceiveMsg=ruleOnReceiveMsg
	{ $current=$iv_ruleOnReceiveMsg.current; }
	EOF;

// Rule OnReceiveMsg
ruleOnReceiveMsg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOnReceiveMsgAccess().getOnReceiveMsgAction_0(),
					$current);
			}
		)
		otherlv_1='receiveTheMsg'
		{
			newLeafNode(otherlv_1, grammarAccess.getOnReceiveMsgAccess().getReceiveTheMsgKeyword_1());
		}
		otherlv_2='m'
		{
			newLeafNode(otherlv_2, grammarAccess.getOnReceiveMsgAccess().getMKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getOnReceiveMsgAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgidPHeadParserRuleCall_4_0());
				}
				lv_msgid_4_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgid",
						lv_msgid_4_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getOnReceiveMsgAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgtypePHeadParserRuleCall_6_0());
				}
				lv_msgtype_6_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgtype",
						lv_msgtype_6_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getOnReceiveMsgAccess().getCommaKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgsenderPHeadParserRuleCall_8_0());
				}
				lv_msgsender_8_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgsender",
						lv_msgsender_8_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=','
		{
			newLeafNode(otherlv_9, grammarAccess.getOnReceiveMsgAccess().getCommaKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgreceiverPHeadParserRuleCall_10_0());
				}
				lv_msgreceiver_10_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgreceiver",
						lv_msgreceiver_10_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=','
		{
			newLeafNode(otherlv_11, grammarAccess.getOnReceiveMsgAccess().getCommaKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgcontentPHeadParserRuleCall_12_0());
				}
				lv_msgcontent_12_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgcontent",
						lv_msgcontent_12_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13=','
		{
			newLeafNode(otherlv_13, grammarAccess.getOnReceiveMsgAccess().getCommaKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getMsgseqnumPHeadParserRuleCall_14_0());
				}
				lv_msgseqnum_14_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"msgseqnum",
						lv_msgseqnum_14_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_15=')'
		{
			newLeafNode(otherlv_15, grammarAccess.getOnReceiveMsgAccess().getRightParenthesisKeyword_15());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnReceiveMsgAccess().getDurationTimeLimitParserRuleCall_16_0());
				}
				lv_duration_16_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnReceiveMsgRule());
					}
					set(
						$current,
						"duration",
						lv_duration_16_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMsgSelect
entryRuleMsgSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMsgSelectRule()); }
	iv_ruleMsgSelect=ruleMsgSelect
	{ $current=$iv_ruleMsgSelect.current; }
	EOF;

// Rule MsgSelect
ruleMsgSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMsgSelectAccess().getMsgSelectAction_0(),
					$current);
			}
		)
		otherlv_1='receiveAndSwitch'
		{
			newLeafNode(otherlv_1, grammarAccess.getMsgSelectAccess().getReceiveAndSwitchKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMsgSelectAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMsgSelectRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMsgSelectRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getMsgSelectAccess().getMessagesMessageCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getMsgSelectAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMsgSelectRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getMsgSelectAccess().getMessagesMessageCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6='->'
		{
			newLeafNode(otherlv_6, grammarAccess.getMsgSelectAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMsgSelectRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getMsgSelectAccess().getPlansPlanCrossReference_6_0());
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getMsgSelectAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMsgSelectRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getMsgSelectAccess().getPlansPlanCrossReference_7_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRaiseEvent
entryRuleRaiseEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRaiseEventRule()); }
	iv_ruleRaiseEvent=ruleRaiseEvent
	{ $current=$iv_ruleRaiseEvent.current; }
	EOF;

// Rule RaiseEvent
ruleRaiseEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRaiseEventAccess().getRaiseEventAction_0(),
					$current);
			}
		)
		otherlv_1='emit'
		{
			newLeafNode(otherlv_1, grammarAccess.getRaiseEventAccess().getEmitKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRaiseEventRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRaiseEventAccess().getEvEventCrossReference_2_0());
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRaiseEventAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRaiseEventAccess().getContentPHeadParserRuleCall_4_0());
				}
				lv_content_4_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRaiseEventRule());
					}
					set(
						$current,
						"content",
						lv_content_4_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSenseEvent
entryRuleSenseEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSenseEventRule()); }
	iv_ruleSenseEvent=ruleSenseEvent
	{ $current=$iv_ruleSenseEvent.current; }
	EOF;

// Rule SenseEvent
ruleSenseEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSenseEventAccess().getSenseEventAction_0(),
					$current);
			}
		)
		otherlv_1='sense'
		{
			newLeafNode(otherlv_1, grammarAccess.getSenseEventAccess().getSenseKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSenseEventAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSenseEventRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSenseEventRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSenseEventAccess().getEventsEventCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSenseEventAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSenseEventRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSenseEventAccess().getEventsEventCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6='->'
		{
			newLeafNode(otherlv_6, grammarAccess.getSenseEventAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSenseEventAccess().getPlansContinuationParserRuleCall_6_0());
				}
				lv_plans_7_0=ruleContinuation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSenseEventRule());
					}
					add(
						$current,
						"plans",
						lv_plans_7_0,
						"xtext.qactor.QADocker.Continuation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getSenseEventAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSenseEventAccess().getPlansContinuationParserRuleCall_7_1_0());
					}
					lv_plans_9_0=ruleContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSenseEventRule());
						}
						add(
							$current,
							"plans",
							lv_plans_9_0,
							"xtext.qactor.QADocker.Continuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMsgSwitch
entryRuleMsgSwitch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMsgSwitchRule()); }
	iv_ruleMsgSwitch=ruleMsgSwitch
	{ $current=$iv_ruleMsgSwitch.current; }
	EOF;

// Rule MsgSwitch
ruleMsgSwitch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMsgSwitchAccess().getMsgSwitchAction_0(),
					$current);
			}
		)
		otherlv_1='onMsg'
		{
			newLeafNode(otherlv_1, grammarAccess.getMsgSwitchAccess().getOnMsgKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMsgSwitchRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getMsgSwitchAccess().getMessageMessageCrossReference_2_0());
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getMsgSwitchAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMsgSwitchAccess().getMsgPHeadParserRuleCall_4_0());
				}
				lv_msg_4_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMsgSwitchRule());
					}
					set(
						$current,
						"msg",
						lv_msg_4_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='->'
		{
			newLeafNode(otherlv_5, grammarAccess.getMsgSwitchAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMsgSwitchAccess().getMoveMoveParserRuleCall_6_0());
				}
				lv_move_6_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMsgSwitchRule());
					}
					set(
						$current,
						"move",
						lv_move_6_0,
						"xtext.qactor.QADocker.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEventSwitch
entryRuleEventSwitch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventSwitchRule()); }
	iv_ruleEventSwitch=ruleEventSwitch
	{ $current=$iv_ruleEventSwitch.current; }
	EOF;

// Rule EventSwitch
ruleEventSwitch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventSwitchAccess().getEventSwitchAction_0(),
					$current);
			}
		)
		otherlv_1='onEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getEventSwitchAccess().getOnEventKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventSwitchRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEventSwitchAccess().getEventEventCrossReference_2_0());
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getEventSwitchAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventSwitchAccess().getMsgPHeadParserRuleCall_4_0());
				}
				lv_msg_4_0=rulePHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventSwitchRule());
					}
					set(
						$current,
						"msg",
						lv_msg_4_0,
						"xtext.qactor.QADocker.PHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='->'
		{
			newLeafNode(otherlv_5, grammarAccess.getEventSwitchAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventSwitchAccess().getMoveMoveParserRuleCall_6_0());
				}
				lv_move_6_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventSwitchRule());
					}
					set(
						$current,
						"move",
						lv_move_6_0,
						"xtext.qactor.QADocker.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContinuation
entryRuleContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContinuationRule()); }
	iv_ruleContinuation=ruleContinuation
	{ $current=$iv_ruleContinuation.current; }
	EOF;

// Rule Continuation
ruleContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContinuationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getContinuationAccess().getPlanPlanCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				lv_nane_1_0='continue'
				{
					newLeafNode(lv_nane_1_0, grammarAccess.getContinuationAccess().getNaneContinueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContinuationRule());
					}
					setWithLastConsumed($current, "nane", lv_nane_1_0, "continue");
				}
			)
		)
	)
;

// Entry rule entryRuleExtensionMove
entryRuleExtensionMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionMoveRule()); }
	iv_ruleExtensionMove=ruleExtensionMove
	{ $current=$iv_ruleExtensionMove.current; }
	EOF;

// Rule ExtensionMove
ruleExtensionMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExtensionMoveAccess().getPhotoParserRuleCall_0());
		}
		this_Photo_0=rulePhoto
		{
			$current = $this_Photo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExtensionMoveAccess().getSoundParserRuleCall_1());
		}
		this_Sound_1=ruleSound
		{
			$current = $this_Sound_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExtensionMoveAccess().getVideoParserRuleCall_2());
		}
		this_Video_2=ruleVideo
		{
			$current = $this_Video_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExtensionMoveAccess().getDelayParserRuleCall_3());
		}
		this_Delay_3=ruleDelay
		{
			$current = $this_Delay_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePhoto
entryRulePhoto returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPhotoRule()); }
	iv_rulePhoto=rulePhoto
	{ $current=$iv_rulePhoto.current; }
	EOF;

// Rule Photo
rulePhoto returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPhotoAccess().getPhotoAction_0(),
					$current);
			}
		)
		otherlv_1='photo'
		{
			newLeafNode(otherlv_1, grammarAccess.getPhotoAccess().getPhotoKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPhotoAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhotoRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPhotoAccess().getDestfileMoveFileParserRuleCall_3_0());
				}
				lv_destfile_3_0=ruleMoveFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhotoRule());
					}
					set(
						$current,
						"destfile",
						lv_destfile_3_0,
						"xtext.qactor.QADocker.MoveFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPhotoAccess().getAnswerEventAnswerEventParserRuleCall_4_0());
				}
				lv_answerEvent_4_0=ruleAnswerEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhotoRule());
					}
					set(
						$current,
						"answerEvent",
						lv_answerEvent_4_0,
						"xtext.qactor.QADocker.AnswerEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSound
entryRuleSound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoundRule()); }
	iv_ruleSound=ruleSound
	{ $current=$iv_ruleSound.current; }
	EOF;

// Rule Sound
ruleSound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoundAccess().getSoundAction_0(),
					$current);
			}
		)
		otherlv_1='sound'
		{
			newLeafNode(otherlv_1, grammarAccess.getSoundAccess().getSoundKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSoundAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoundRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoundAccess().getSrcfileMoveFileParserRuleCall_3_0());
				}
				lv_srcfile_3_0=ruleMoveFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoundRule());
					}
					set(
						$current,
						"srcfile",
						lv_srcfile_3_0,
						"xtext.qactor.QADocker.MoveFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoundAccess().getAnswerEventAnswerEventParserRuleCall_4_0());
				}
				lv_answerEvent_4_0=ruleAnswerEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoundRule());
					}
					set(
						$current,
						"answerEvent",
						lv_answerEvent_4_0,
						"xtext.qactor.QADocker.AnswerEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleVideo
entryRuleVideo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVideoRule()); }
	iv_ruleVideo=ruleVideo
	{ $current=$iv_ruleVideo.current; }
	EOF;

// Rule Video
ruleVideo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVideoAccess().getVideoAction_0(),
					$current);
			}
		)
		otherlv_1='video'
		{
			newLeafNode(otherlv_1, grammarAccess.getVideoAccess().getVideoKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVideoAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVideoRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVideoAccess().getDestfileMoveFileParserRuleCall_3_0());
				}
				lv_destfile_3_0=ruleMoveFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVideoRule());
					}
					set(
						$current,
						"destfile",
						lv_destfile_3_0,
						"xtext.qactor.QADocker.MoveFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVideoAccess().getAnswerEventAnswerEventParserRuleCall_4_0());
				}
				lv_answerEvent_4_0=ruleAnswerEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVideoRule());
					}
					set(
						$current,
						"answerEvent",
						lv_answerEvent_4_0,
						"xtext.qactor.QADocker.AnswerEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDelay
entryRuleDelay returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelayRule()); }
	iv_ruleDelay=ruleDelay
	{ $current=$iv_ruleDelay.current; }
	EOF;

// Rule Delay
ruleDelay returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDelayAccess().getDelayAction_0(),
					$current);
			}
		)
		otherlv_1='delay'
		{
			newLeafNode(otherlv_1, grammarAccess.getDelayAccess().getDelayKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDelayAccess().getDurationTimeLimitParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleTimeLimit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDelayRule());
					}
					set(
						$current,
						"duration",
						lv_duration_2_0,
						"xtext.qactor.QADocker.TimeLimit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnswerEvent
entryRuleAnswerEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnswerEventRule()); }
	iv_ruleAnswerEvent=ruleAnswerEvent
	{ $current=$iv_ruleAnswerEvent.current; }
	EOF;

// Rule AnswerEvent
ruleAnswerEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='answerEv'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnswerEventAccess().getAnswerEvKeyword_0());
		}
		(
			(
				lv_evName_1_0=RULE_ID
				{
					newLeafNode(lv_evName_1_0, grammarAccess.getAnswerEventAccess().getEvNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnswerEventRule());
					}
					setWithLastConsumed(
						$current,
						"evName",
						lv_evName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEventHandler
entryRuleEventHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventHandlerRule()); }
	iv_ruleEventHandler=ruleEventHandler
	{ $current=$iv_ruleEventHandler.current; }
	EOF;

// Rule EventHandler
ruleEventHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EventHandler'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventHandlerAccess().getEventHandlerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventHandlerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventHandlerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='for'
			{
				newLeafNode(otherlv_2, grammarAccess.getEventHandlerAccess().getForKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventHandlerRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getEventHandlerAccess().getEventsEventCrossReference_2_1_0());
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getEventHandlerAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEventHandlerRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getEventHandlerAccess().getEventsEventCrossReference_2_2_1_0());
						}
					)
				)
			)*
		)?
		(
			(
				lv_print_6_0='-print'
				{
					newLeafNode(lv_print_6_0, grammarAccess.getEventHandlerAccess().getPrintPrintKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventHandlerRule());
					}
					setWithLastConsumed($current, "print", true, "-print");
				}
			)
		)?
		(
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getEventHandlerAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventHandlerAccess().getBodyEventHandlerBodyParserRuleCall_4_1_0());
					}
					lv_body_8_0=ruleEventHandlerBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
						}
						set(
							$current,
							"body",
							lv_body_8_0,
							"xtext.qactor.QADocker.EventHandlerBody");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getEventHandlerAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
		otherlv_10=';'
		{
			newLeafNode(otherlv_10, grammarAccess.getEventHandlerAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleEventHandlerBody
entryRuleEventHandlerBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventHandlerBodyRule()); }
	iv_ruleEventHandlerBody=ruleEventHandlerBody
	{ $current=$iv_ruleEventHandlerBody.current; }
	EOF;

// Rule EventHandlerBody
ruleEventHandlerBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEventHandlerBodyAccess().getOpEventHandlerOperationParserRuleCall_0_0());
				}
				lv_op_0_0=ruleEventHandlerOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventHandlerBodyRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"xtext.qactor.QADocker.EventHandlerOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getEventHandlerBodyAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventHandlerBodyAccess().getOpEventHandlerOperationParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleEventHandlerOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventHandlerBodyRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"xtext.qactor.QADocker.EventHandlerOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEventHandlerOperation
entryRuleEventHandlerOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventHandlerOperationRule()); }
	iv_ruleEventHandlerOperation=ruleEventHandlerOperation
	{ $current=$iv_ruleEventHandlerOperation.current; }
	EOF;

// Rule EventHandlerOperation
ruleEventHandlerOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEventHandlerOperationAccess().getMemoOperationParserRuleCall_0());
		}
		this_MemoOperation_0=ruleMemoOperation
		{
			$current = $this_MemoOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventHandlerOperationAccess().getSolveOperationParserRuleCall_1());
		}
		this_SolveOperation_1=ruleSolveOperation
		{
			$current = $this_SolveOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventHandlerOperationAccess().getRaiseEventParserRuleCall_2());
		}
		this_RaiseEvent_2=ruleRaiseEvent
		{
			$current = $this_RaiseEvent_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventHandlerOperationAccess().getSendEventAsDispatchParserRuleCall_3());
		}
		this_SendEventAsDispatch_3=ruleSendEventAsDispatch
		{
			$current = $this_SendEventAsDispatch_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMemoOperation
entryRuleMemoOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoOperationRule()); }
	iv_ruleMemoOperation=ruleMemoOperation
	{ $current=$iv_ruleMemoOperation.current; }
	EOF;

// Rule MemoOperation
ruleMemoOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='memo'
			{
				newLeafNode(otherlv_0, grammarAccess.getMemoOperationAccess().getMemoKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMemoOperationAccess().getRuleMemoRuleParserRuleCall_0_1_0());
					}
					lv_rule_1_0=ruleMemoRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMemoOperationRule());
						}
						set(
							$current,
							"rule",
							lv_rule_1_0,
							"xtext.qactor.QADocker.MemoRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='for'
			{
				newLeafNode(otherlv_2, grammarAccess.getMemoOperationAccess().getForKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMemoOperationRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getMemoOperationAccess().getActorQActorCrossReference_0_3_0());
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMemoOperationAccess().getDoMemoMemoCurrentEventParserRuleCall_1_0_0());
					}
					lv_doMemo_4_0=ruleMemoCurrentEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMemoOperationRule());
						}
						set(
							$current,
							"doMemo",
							lv_doMemo_4_0,
							"xtext.qactor.QADocker.MemoCurrentEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='for'
			{
				newLeafNode(otherlv_5, grammarAccess.getMemoOperationAccess().getForKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMemoOperationRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getMemoOperationAccess().getActorQActorCrossReference_1_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSolveOperation
entryRuleSolveOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSolveOperationRule()); }
	iv_ruleSolveOperation=ruleSolveOperation
	{ $current=$iv_ruleSolveOperation.current; }
	EOF;

// Rule SolveOperation
ruleSolveOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='solve'
		{
			newLeafNode(otherlv_0, grammarAccess.getSolveOperationAccess().getSolveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSolveOperationAccess().getGoalPTermParserRuleCall_1_0());
				}
				lv_goal_1_0=rulePTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolveOperationRule());
					}
					set(
						$current,
						"goal",
						lv_goal_1_0,
						"xtext.qactor.QADocker.PTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getSolveOperationAccess().getForKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSolveOperationRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSolveOperationAccess().getActorQActorCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSendEventAsDispatch
entryRuleSendEventAsDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendEventAsDispatchRule()); }
	iv_ruleSendEventAsDispatch=ruleSendEventAsDispatch
	{ $current=$iv_ruleSendEventAsDispatch.current; }
	EOF;

// Rule SendEventAsDispatch
ruleSendEventAsDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forwardEvent'
		{
			newLeafNode(otherlv_0, grammarAccess.getSendEventAsDispatchAccess().getForwardEventKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendEventAsDispatchRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSendEventAsDispatchAccess().getActorQActorCrossReference_1_0());
				}
			)
		)
		otherlv_2='-m'
		{
			newLeafNode(otherlv_2, grammarAccess.getSendEventAsDispatchAccess().getMKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendEventAsDispatchRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSendEventAsDispatchAccess().getMsgrefMessageCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMemoRule
entryRuleMemoRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoRuleRule()); }
	iv_ruleMemoRule=ruleMemoRule
	{ $current=$iv_ruleMemoRule.current; }
	EOF;

// Rule MemoRule
ruleMemoRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMemoRuleAccess().getMemoEventParserRuleCall());
	}
	this_MemoEvent_0=ruleMemoEvent
	{
		$current = $this_MemoEvent_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMemoEvent
entryRuleMemoEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoEventRule()); }
	iv_ruleMemoEvent=ruleMemoEvent
	{ $current=$iv_ruleMemoEvent.current; }
	EOF;

// Rule MemoEvent
ruleMemoEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMemoEventAccess().getMemoEventAction_0(),
					$current);
			}
		)
		otherlv_1='currentEvent'
		{
			newLeafNode(otherlv_1, grammarAccess.getMemoEventAccess().getCurrentEventKeyword_1());
		}
	)
;

// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	iv_ruleReaction=ruleReaction
	{ $current=$iv_ruleReaction.current; }
	EOF;

// Rule Reaction
ruleReaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReactionAccess().getReactionAction_0(),
					$current);
			}
		)
		otherlv_1='react'
		{
			newLeafNode(otherlv_1, grammarAccess.getReactionAccess().getReactKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getAlarmsAlarmEventParserRuleCall_2_0());
				}
				lv_alarms_2_0=ruleAlarmEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					add(
						$current,
						"alarms",
						lv_alarms_2_0,
						"xtext.qactor.QADocker.AlarmEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='or'
			{
				newLeafNode(otherlv_3, grammarAccess.getReactionAccess().getOrKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactionAccess().getAlarmsAlarmEventParserRuleCall_3_1_0());
					}
					lv_alarms_4_0=ruleAlarmEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactionRule());
						}
						add(
							$current,
							"alarms",
							lv_alarms_4_0,
							"xtext.qactor.QADocker.AlarmEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAlarmEvent
entryRuleAlarmEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlarmEventRule()); }
	iv_ruleAlarmEvent=ruleAlarmEvent
	{ $current=$iv_ruleAlarmEvent.current; }
	EOF;

// Rule AlarmEvent
ruleAlarmEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAlarmEventAccess().getNormalEventParserRuleCall_0());
		}
		this_NormalEvent_0=ruleNormalEvent
		{
			$current = $this_NormalEvent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlarmEventAccess().getContinueEventParserRuleCall_1());
		}
		this_ContinueEvent_1=ruleContinueEvent
		{
			$current = $this_ContinueEvent_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNormalEvent
entryRuleNormalEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalEventRule()); }
	iv_ruleNormalEvent=ruleNormalEvent
	{ $current=$iv_ruleNormalEvent.current; }
	EOF;

// Rule NormalEvent
ruleNormalEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNormalEventAccess().getNormalEventAction_0(),
					$current);
			}
		)
		otherlv_1='event'
		{
			newLeafNode(otherlv_1, grammarAccess.getNormalEventAccess().getEventKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNormalEventRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getNormalEventAccess().getEvEventCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getNormalEventAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNormalEventRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getNormalEventAccess().getPlanRefPlanCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleContinueEvent
entryRuleContinueEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContinueEventRule()); }
	iv_ruleContinueEvent=ruleContinueEvent
	{ $current=$iv_ruleContinueEvent.current; }
	EOF;

// Rule ContinueEvent
ruleContinueEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContinueEventAccess().getContinueEventAction_0(),
					$current);
			}
		)
		otherlv_1='when'
		{
			newLeafNode(otherlv_1, grammarAccess.getContinueEventAccess().getWhenKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContinueEventRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getContinueEventAccess().getEvOccurEventCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleVarOrQactor
entryRuleVarOrQactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOrQactorRule()); }
	iv_ruleVarOrQactor=ruleVarOrQactor
	{ $current=$iv_ruleVarOrQactor.current; }
	EOF;

// Rule VarOrQactor
ruleVarOrQactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOrQactorAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOrQactorRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarOrQactorRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVarOrQactorAccess().getDestQActorCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleVarOrInt
entryRuleVarOrInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOrIntRule()); }
	iv_ruleVarOrInt=ruleVarOrInt
	{ $current=$iv_ruleVarOrInt.current; }
	EOF;

// Rule VarOrInt
ruleVarOrInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOrIntAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOrIntRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_const_1_0=RULE_INT
				{
					newLeafNode(lv_const_1_0, grammarAccess.getVarOrIntAccess().getConstINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarOrIntRule());
					}
					setWithLastConsumed(
						$current,
						"const",
						lv_const_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleVarOrAtomic
entryRuleVarOrAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOrAtomicRule()); }
	iv_ruleVarOrAtomic=ruleVarOrAtomic
	{ $current=$iv_ruleVarOrAtomic.current; }
	EOF;

// Rule VarOrAtomic
ruleVarOrAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOrAtomicAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOrAtomicRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOrAtomicAccess().getConstPAtomicParserRuleCall_1_0());
				}
				lv_const_1_0=rulePAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOrAtomicRule());
					}
					set(
						$current,
						"const",
						lv_const_1_0,
						"xtext.qactor.QADocker.PAtomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarOrString
entryRuleVarOrString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOrStringRule()); }
	iv_ruleVarOrString=ruleVarOrString
	{ $current=$iv_ruleVarOrString.current; }
	EOF;

// Rule VarOrString
ruleVarOrString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOrStringAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOrStringRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"xtext.qactor.QADocker.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_const_1_0=RULE_STRING
				{
					newLeafNode(lv_const_1_0, grammarAccess.getVarOrStringAccess().getConstSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarOrStringRule());
					}
					setWithLastConsumed(
						$current,
						"const",
						lv_const_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_varName_1_0=RULE_VARID
				{
					newLeafNode(lv_varName_1_0, grammarAccess.getVariableAccess().getVarNameVARIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_1_0,
						"xtext.qactor.QADocker.VARID");
				}
			)
		)
	)
;

// Entry rule entryRuleTimeLimit
entryRuleTimeLimit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeLimitRule()); }
	iv_ruleTimeLimit=ruleTimeLimit
	{ $current=$iv_ruleTimeLimit.current; }
	EOF;

// Rule TimeLimit
ruleTimeLimit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTimeLimitAccess().getTimeLimitAction_0(),
					$current);
			}
		)
		otherlv_1='time'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeLimitAccess().getTimeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeLimitAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					lv_msec_3_0=RULE_INT
					{
						newLeafNode(lv_msec_3_0, grammarAccess.getTimeLimitAccess().getMsecINTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeLimitRule());
						}
						setWithLastConsumed(
							$current,
							"msec",
							lv_msec_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTimeLimitAccess().getVarVariableParserRuleCall_3_1_0());
					}
					lv_var_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimeLimitRule());
						}
						set(
							$current,
							"var",
							lv_var_4_0,
							"xtext.qactor.QADocker.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeLimitAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleComponentIP
entryRuleComponentIP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentIPRule()); }
	iv_ruleComponentIP=ruleComponentIP
	{ $current=$iv_ruleComponentIP.current; }
	EOF;

// Rule ComponentIP
ruleComponentIP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComponentIPAccess().getComponentIPAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getComponentIPAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2='host='
		{
			newLeafNode(otherlv_2, grammarAccess.getComponentIPAccess().getHostKeyword_2());
		}
		(
			(
				lv_host_3_0=RULE_STRING
				{
					newLeafNode(lv_host_3_0, grammarAccess.getComponentIPAccess().getHostSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentIPRule());
					}
					setWithLastConsumed(
						$current,
						"host",
						lv_host_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='port='
		{
			newLeafNode(otherlv_4, grammarAccess.getComponentIPAccess().getPortKeyword_4());
		}
		(
			(
				lv_port_5_0=RULE_INT
				{
					newLeafNode(lv_port_5_0, grammarAccess.getComponentIPAccess().getPortINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentIPRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getComponentIPAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMoveFile
entryRuleMoveFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveFileRule()); }
	iv_ruleMoveFile=ruleMoveFile
	{ $current=$iv_ruleMoveFile.current; }
	EOF;

// Rule MoveFile
ruleMoveFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMoveFileAccess().getMoveFileAction_0(),
					$current);
			}
		)
		otherlv_1='file'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveFileAccess().getFileKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMoveFileAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveFileAccess().getFnameVarOrStringParserRuleCall_3_0());
				}
				lv_fname_3_0=ruleVarOrString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveFileRule());
					}
					set(
						$current,
						"fname",
						lv_fname_3_0,
						"xtext.qactor.QADocker.VarOrString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMoveFileAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Rule WindowColor
ruleWindowColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='white'
			{
				$current = grammarAccess.getWindowColorAccess().getWhiteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWindowColorAccess().getWhiteEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='gray'
			{
				$current = grammarAccess.getWindowColorAccess().getGrayEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWindowColorAccess().getGrayEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='blue'
			{
				$current = grammarAccess.getWindowColorAccess().getBlueEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWindowColorAccess().getBlueEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='green'
			{
				$current = grammarAccess.getWindowColorAccess().getGreenEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getWindowColorAccess().getGreenEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='yellow'
			{
				$current = grammarAccess.getWindowColorAccess().getYellowEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getWindowColorAccess().getYellowEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='cyan'
			{
				$current = grammarAccess.getWindowColorAccess().getCyanEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getWindowColorAccess().getCyanEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_VARID : ('A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
