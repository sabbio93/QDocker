/*
 * generated by Xtext 2.10.0
 */
package xtext.qactor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QADockerGrammarAccess extends AbstractGrammarElementFinder {
	
	public class QActorSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.QActorSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecQActorSystemSpecParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		
		//QActorSystem:
		//	"System" spec=QActorSystemSpec;
		@Override public ParserRule getRule() { return rule; }
		
		//"System" spec=QActorSystemSpec
		public Group getGroup() { return cGroup; }
		
		//"System"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//spec=QActorSystemSpec
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }
		
		//QActorSystemSpec
		public RuleCall getSpecQActorSystemSpecParserRuleCall_1_0() { return cSpecQActorSystemSpecParserRuleCall_1_0; }
	}
	public class QActorSystemSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.QActorSystemSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTestingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTestingTestingKeyword_1_0 = (Keyword)cTestingAssignment_1.eContents().get(0);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextContextParserRuleCall_3_0 = (RuleCall)cContextAssignment_3.eContents().get(0);
		private final Assignment cActorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorQActorParserRuleCall_4_0 = (RuleCall)cActorAssignment_4.eContents().get(0);
		private final Assignment cRobotAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRobotRobotParserRuleCall_5_0 = (RuleCall)cRobotAssignment_5.eContents().get(0);
		
		//QActorSystemSpec:
		//	name=ID testing?="-testing"?
		//	message+=Message*
		//	context+=Context*
		//	actor+=QActor*
		//	robot=Robot? //Specialized actor see it.unibo.xtext.qactor.robot
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID testing?="-testing"? message+=Message* context+=Context* actor+=QActor* robot=Robot?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//testing?="-testing"?
		public Assignment getTestingAssignment_1() { return cTestingAssignment_1; }
		
		//"-testing"
		public Keyword getTestingTestingKeyword_1_0() { return cTestingTestingKeyword_1_0; }
		
		//message+=Message*
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_2_0() { return cMessageMessageParserRuleCall_2_0; }
		
		//context+=Context*
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_3_0() { return cContextContextParserRuleCall_3_0; }
		
		//actor+=QActor*
		public Assignment getActorAssignment_4() { return cActorAssignment_4; }
		
		//QActor
		public RuleCall getActorQActorParserRuleCall_4_0() { return cActorQActorParserRuleCall_4_0; }
		
		//robot=Robot?
		public Assignment getRobotAssignment_5() { return cRobotAssignment_5; }
		
		//Robot
		public RuleCall getRobotRobotParserRuleCall_5_0() { return cRobotRobotParserRuleCall_5_0; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorQActorParserRuleCall_1_0 = (RuleCall)cActorAssignment_1.eContents().get(0);
		private final Keyword cTDDOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * -------------------------------------------------
		// * TODO: 
		// * ( actor     += QGenericActor   )*
		// * QGenericActor : QActor | Robot ...
		// * -------------------------------------------------
		// * / //Compoment : QActor | Robot ; 
		//Robot:
		//	name=ID actor=QActor "TDDO";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID actor=QActor "TDDO"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//actor=QActor
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//QActor
		public RuleCall getActorQActorParserRuleCall_1_0() { return cActorQActorParserRuleCall_1_0; }
		
		//"TDDO"
		public Keyword getTDDOKeyword_2() { return cTDDOKeyword_2; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutOnlyMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutInMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * ------------------------------------------
		// * MESSAGE
		// * ------------------------------------------
		// * / Message:
		//	OutOnlyMessage | OutInMessage;
		@Override public ParserRule getRule() { return rule; }
		
		//OutOnlyMessage | OutInMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OutOnlyMessage
		public RuleCall getOutOnlyMessageParserRuleCall_0() { return cOutOnlyMessageParserRuleCall_0; }
		
		//OutInMessage
		public RuleCall getOutInMessageParserRuleCall_1() { return cOutInMessageParserRuleCall_1; }
	}
	public class OutOnlyMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.OutOnlyMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDispatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTokenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OutOnlyMessage:
		//	Dispatch | Event | Signal | Token;
		@Override public ParserRule getRule() { return rule; }
		
		//Dispatch | Event | Signal | Token
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dispatch
		public RuleCall getDispatchParserRuleCall_0() { return cDispatchParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
		
		//Signal
		public RuleCall getSignalParserRuleCall_2() { return cSignalParserRuleCall_2; }
		
		//Token
		public RuleCall getTokenParserRuleCall_3() { return cTokenParserRuleCall_3; }
	}
	public class OutInMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.OutInMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvitationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutInMessage:
		//	Request | Invitation;
		@Override public ParserRule getRule() { return rule; }
		
		//Request | Invitation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Request
		public RuleCall getRequestParserRuleCall_0() { return cRequestParserRuleCall_0; }
		
		//Invitation
		public RuleCall getInvitationParserRuleCall_1() { return cInvitationParserRuleCall_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Event:
		//	"Event" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Event" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Signal:
		//	"Signal" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Signal" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Token:
		//	"Token" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Token" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Token"
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class DispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Dispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDispatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Dispatch:
		//	"Dispatch" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Dispatch" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Dispatch"
		public Keyword getDispatchKeyword_0() { return cDispatchKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Request:
		//	"Request" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Request" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class InvitationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Invitation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvitationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Invitation:
		//	"Invitation" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Invitation" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Invitation"
		public Keyword getInvitationKeyword_0() { return cInvitationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpComponentIPParserRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEnvAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cEnvGKeyword_4_0_0 = (Keyword)cEnvAssignment_4_0.eContents().get(0);
		private final Assignment cColorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColorWindowColorEnumRuleCall_4_1_0 = (RuleCall)cColorAssignment_4_1.eContents().get(0);
		private final Assignment cStandaloneAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cStandaloneStandaloneKeyword_5_0 = (Keyword)cStandaloneAssignment_5.eContents().get(0);
		private final Assignment cHttpserverAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cHttpserverHttpserverKeyword_6_0 = (Keyword)cHttpserverAssignment_6.eContents().get(0);
		private final Assignment cHandlerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHandlerEventHandlerParserRuleCall_7_0 = (RuleCall)cHandlerAssignment_7.eContents().get(0);
		
		/// * 
		// * Context
		// * / Context:
		//	"Context" name=ID "ip" ip=ComponentIP (env?="-g" color=WindowColor)?
		//	standalone?="-standalone"?
		//	httpserver?="-httpserver"?
		//	handler+=EventHandler*;
		@Override public ParserRule getRule() { return rule; }
		
		//"Context" name=ID "ip" ip=ComponentIP (env?="-g" color=WindowColor)? standalone?="-standalone"?
		//httpserver?="-httpserver"? handler+=EventHandler*
		public Group getGroup() { return cGroup; }
		
		//"Context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"ip"
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//ip=ComponentIP
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//ComponentIP
		public RuleCall getIpComponentIPParserRuleCall_3_0() { return cIpComponentIPParserRuleCall_3_0; }
		
		//(env?="-g" color=WindowColor)?
		public Group getGroup_4() { return cGroup_4; }
		
		//env?="-g"
		public Assignment getEnvAssignment_4_0() { return cEnvAssignment_4_0; }
		
		//"-g"
		public Keyword getEnvGKeyword_4_0_0() { return cEnvGKeyword_4_0_0; }
		
		//color=WindowColor
		public Assignment getColorAssignment_4_1() { return cColorAssignment_4_1; }
		
		//WindowColor
		public RuleCall getColorWindowColorEnumRuleCall_4_1_0() { return cColorWindowColorEnumRuleCall_4_1_0; }
		
		//standalone?="-standalone"?
		public Assignment getStandaloneAssignment_5() { return cStandaloneAssignment_5; }
		
		//"-standalone"
		public Keyword getStandaloneStandaloneKeyword_5_0() { return cStandaloneStandaloneKeyword_5_0; }
		
		//httpserver?="-httpserver"?
		public Assignment getHttpserverAssignment_6() { return cHttpserverAssignment_6; }
		
		//"-httpserver"
		public Keyword getHttpserverHttpserverKeyword_6_0() { return cHttpserverHttpserverKeyword_6_0; }
		
		//handler+=EventHandler*
		public Assignment getHandlerAssignment_7() { return cHandlerAssignment_7; }
		
		//EventHandler
		public RuleCall getHandlerEventHandlerParserRuleCall_7_0() { return cHandlerEventHandlerParserRuleCall_7_0; }
	}
	public class QActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.QActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextContextCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContextContextCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEnvAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cEnvGKeyword_4_0_0 = (Keyword)cEnvAssignment_4_0.eContents().get(0);
		private final Assignment cColorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColorWindowColorEnumRuleCall_4_1_0 = (RuleCall)cColorAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRulesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRulesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_6_2_0 = (RuleCall)cRulesAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cDataAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataDataParserRuleCall_7_0 = (RuleCall)cDataAssignment_7.eContents().get(0);
		private final Assignment cActionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionActionParserRuleCall_8_0 = (RuleCall)cActionAssignment_8.eContents().get(0);
		private final Assignment cPlansAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPlansPlanParserRuleCall_9_0 = (RuleCall)cPlansAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		/// * 
		// * ===========================================
		// * QACTOR
		// * ===========================================
		// * / QActor:
		//	"QActor" name=ID "context" context=[Context] (env?="-g" color=WindowColor)?
		//	"{" ("Rules" "{" rules+=Rule* "}")?
		//	data+=Data*
		//	action+=Action*
		//	plans+=Plan*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"QActor" name=ID "context" context=[Context] (env?="-g" color=WindowColor)? "{" ("Rules" "{" rules+=Rule* "}")?
		//data+=Data* action+=Action* plans+=Plan* "}"
		public Group getGroup() { return cGroup; }
		
		//"QActor"
		public Keyword getQActorKeyword_0() { return cQActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//context=[Context]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[Context]
		public CrossReference getContextContextCrossReference_3_0() { return cContextContextCrossReference_3_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_3_0_1() { return cContextContextIDTerminalRuleCall_3_0_1; }
		
		//(env?="-g" color=WindowColor)?
		public Group getGroup_4() { return cGroup_4; }
		
		//env?="-g"
		public Assignment getEnvAssignment_4_0() { return cEnvAssignment_4_0; }
		
		//"-g"
		public Keyword getEnvGKeyword_4_0_0() { return cEnvGKeyword_4_0_0; }
		
		//color=WindowColor
		public Assignment getColorAssignment_4_1() { return cColorAssignment_4_1; }
		
		//WindowColor
		public RuleCall getColorWindowColorEnumRuleCall_4_1_0() { return cColorWindowColorEnumRuleCall_4_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//("Rules" "{" rules+=Rule* "}")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"Rules"
		public Keyword getRulesKeyword_6_0() { return cRulesKeyword_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_6_2() { return cRulesAssignment_6_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_2_0() { return cRulesRuleParserRuleCall_6_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//data+=Data*
		public Assignment getDataAssignment_7() { return cDataAssignment_7; }
		
		//Data
		public RuleCall getDataDataParserRuleCall_7_0() { return cDataDataParserRuleCall_7_0; }
		
		//action+=Action*
		public Assignment getActionAssignment_8() { return cActionAssignment_8; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_8_0() { return cActionActionParserRuleCall_8_0; }
		
		//plans+=Plan*
		public Assignment getPlansAssignment_9() { return cPlansAssignment_9; }
		
		//Plan
		public RuleCall getPlansPlanParserRuleCall_9_0() { return cPlansPlanParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadPHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBodyPTermParserRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cBodyAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cBodyPTermParserRuleCall_1_2_1_0 = (RuleCall)cBodyAssignment_1_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		//  * Rule (Aguzzi revised)
		//  * / Rule:
		//	head=PHead (":-" body+=PTerm (',' body+=PTerm)*)? ".";
		@Override public ParserRule getRule() { return rule; }
		
		//head=PHead (":-" body+=PTerm (',' body+=PTerm)*)? "."
		public Group getGroup() { return cGroup; }
		
		//head=PHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }
		
		//PHead
		public RuleCall getHeadPHeadParserRuleCall_0_0() { return cHeadPHeadParserRuleCall_0_0; }
		
		//(":-" body+=PTerm (',' body+=PTerm)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//":-"
		public Keyword getColonHyphenMinusKeyword_1_0() { return cColonHyphenMinusKeyword_1_0; }
		
		//body+=PTerm
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }
		
		//PTerm
		public RuleCall getBodyPTermParserRuleCall_1_1_0() { return cBodyPTermParserRuleCall_1_1_0; }
		
		//(',' body+=PTerm)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//body+=PTerm
		public Assignment getBodyAssignment_1_2_1() { return cBodyAssignment_1_2_1; }
		
		//PTerm
		public RuleCall getBodyPTermParserRuleCall_1_2_1_0() { return cBodyPTermParserRuleCall_1_2_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class PHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PHead:
		//	PAtom | PStruct;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtom | PStruct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtom
		public RuleCall getPAtomParserRuleCall_0() { return cPAtomParserRuleCall_0; }
		
		//PStruct
		public RuleCall getPStructParserRuleCall_1() { return cPStructParserRuleCall_1; }
	}
	public class PTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPPredefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPActorCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PTerm:
		//	PAtom | PStruct | PPredef | PActorCall;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtom | PStruct | PPredef | PActorCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtom
		public RuleCall getPAtomParserRuleCall_0() { return cPAtomParserRuleCall_0; }
		
		//PStruct
		public RuleCall getPStructParserRuleCall_1() { return cPStructParserRuleCall_1; }
		
		//PPredef
		public RuleCall getPPredefParserRuleCall_2() { return cPPredefParserRuleCall_2; }
		
		//PActorCall
		public RuleCall getPActorCallParserRuleCall_3() { return cPActorCallParserRuleCall_3; }
	}
	public class PAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPAtomNumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PAtom:
		//	PAtomString | Variable | PAtomNum | PAtomic //| Data
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtomString | Variable | PAtomNum | PAtomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtomString
		public RuleCall getPAtomStringParserRuleCall_0() { return cPAtomStringParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//PAtomNum
		public RuleCall getPAtomNumParserRuleCall_2() { return cPAtomNumParserRuleCall_2; }
		
		//PAtomic
		public RuleCall getPAtomicParserRuleCall_3() { return cPAtomicParserRuleCall_3; }
	}
	public class PAtomStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PAtomString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class PAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PAtomic");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomic:
		//	val=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//val=ID
		public Assignment getValAssignment() { return cValAssignment; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_0() { return cValIDTerminalRuleCall_0; }
	}
	public class PAtomNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PAtomNum");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomNum:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class PStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorIDTerminalRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgArgPTermParserRuleCall_2_0 = (RuleCall)cMsgArgAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMsgArgAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMsgArgPTermParserRuleCall_3_1_0 = (RuleCall)cMsgArgAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PStruct:
		//	functor=ID "(" msgArg+=PTerm? ("," msgArg+=PTerm)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//functor=ID "(" msgArg+=PTerm? ("," msgArg+=PTerm)* ")"
		public Group getGroup() { return cGroup; }
		
		//functor=ID
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//ID
		public RuleCall getFunctorIDTerminalRuleCall_0_0() { return cFunctorIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//msgArg+=PTerm?
		public Assignment getMsgArgAssignment_2() { return cMsgArgAssignment_2; }
		
		//PTerm
		public RuleCall getMsgArgPTermParserRuleCall_2_0() { return cMsgArgPTermParserRuleCall_2_0; }
		
		//("," msgArg+=PTerm)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//msgArg+=PTerm
		public Assignment getMsgArgAssignment_3_1() { return cMsgArgAssignment_3_1; }
		
		//PTerm
		public RuleCall getMsgArgPTermParserRuleCall_3_1_0() { return cMsgArgPTermParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PActorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PActorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyPStructParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//PActorCall:
		//	"Actor" "<-" body=PStruct;
		@Override public ParserRule getRule() { return rule; }
		
		//"Actor" "<-" body=PStruct
		public Group getGroup() { return cGroup; }
		
		//"Actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//body=PStruct
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//PStruct
		public RuleCall getBodyPStructParserRuleCall_2_0() { return cBodyPStructParserRuleCall_2_0; }
	}
	public class PPredefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PPredef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomCutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPIsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Added by Aguzzi
		// * / //PPredicate :
		////	PStruct | PPredef
		////;
		//PPredef:
		//	PAtomCut | PIs;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtomCut | PIs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtomCut
		public RuleCall getPAtomCutParserRuleCall_0() { return cPAtomCutParserRuleCall_0; }
		
		//PIs
		public RuleCall getPIsParserRuleCall_1() { return cPIsParserRuleCall_1; }
	}
	public class PIsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PIs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVaroutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVaroutVariableParserRuleCall_0_0 = (RuleCall)cVaroutAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarinVariableParserRuleCall_2_0 = (RuleCall)cVarinAssignment_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumPAtomNumParserRuleCall_4_0 = (RuleCall)cNumAssignment_4.eContents().get(0);
		
		//PIs:
		//	varout=Variable "is" varin=Variable "+" num=PAtomNum;
		@Override public ParserRule getRule() { return rule; }
		
		//varout=Variable "is" varin=Variable "+" num=PAtomNum
		public Group getGroup() { return cGroup; }
		
		//varout=Variable
		public Assignment getVaroutAssignment_0() { return cVaroutAssignment_0; }
		
		//Variable
		public RuleCall getVaroutVariableParserRuleCall_0_0() { return cVaroutVariableParserRuleCall_0_0; }
		
		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//varin=Variable
		public Assignment getVarinAssignment_2() { return cVarinAssignment_2; }
		
		//Variable
		public RuleCall getVarinVariableParserRuleCall_2_0() { return cVarinVariableParserRuleCall_2_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_3() { return cPlusSignKeyword_3; }
		
		//num=PAtomNum
		public Assignment getNumAssignment_4() { return cNumAssignment_4; }
		
		//PAtomNum
		public RuleCall getNumPAtomNumParserRuleCall_4_0() { return cNumPAtomNumParserRuleCall_4_0; }
	}
	public class PAtomCutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PAtomCut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPAtomCutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PAtomCut:
		//	{PAtomCut} "!";
		@Override public ParserRule getRule() { return rule; }
		
		//{PAtomCut} "!"
		public Group getGroup() { return cGroup; }
		
		//{PAtomCut}
		public Action getPAtomCutAction_0() { return cPAtomCutAction_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * End Aguzzi
		// * / / *
		// * Data 
		// * / Data:
		//	IntegerData | StringData;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerData | StringData
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerData
		public RuleCall getIntegerDataParserRuleCall_0() { return cIntegerDataParserRuleCall_0; }
		
		//StringData
		public RuleCall getStringDataParserRuleCall_1() { return cStringDataParserRuleCall_1; }
	}
	public class IntegerDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.IntegerData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueINTTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//IntegerData:
		//	{IntegerData} "int" name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerData} "int" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerData}
		public Action getIntegerDataAction_0() { return cIntegerDataAction_0; }
		
		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=INT
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_0() { return cValueINTTerminalRuleCall_4_0; }
	}
	public class StringDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.StringData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//StringData:
		//	{StringData} "String" name=ID "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringData} "String" name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringData}
		public Action getStringDataAction_0() { return cStringDataAction_0; }
		
		//"String"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUndoableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cUndoableUndoableKeyword_2_0 = (Keyword)cUndoableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxtimeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMsecAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMsecINTTerminalRuleCall_3_2_0 = (RuleCall)cMsecAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cArgKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgPStructParserRuleCall_4_1_0 = (RuleCall)cArgAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * Action 
		// * / Action:
		//	"Action" name=ID undoable?="undoable"? ("maxtime" "(" msec=INT ")") ("arg" arg=PStruct)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"Action" name=ID undoable?="undoable"? ("maxtime" "(" msec=INT ")") ("arg" arg=PStruct)? ";"
		public Group getGroup() { return cGroup; }
		
		//"Action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//undoable?="undoable"?
		public Assignment getUndoableAssignment_2() { return cUndoableAssignment_2; }
		
		//"undoable"
		public Keyword getUndoableUndoableKeyword_2_0() { return cUndoableUndoableKeyword_2_0; }
		
		//("maxtime" "(" msec=INT ")")
		public Group getGroup_3() { return cGroup_3; }
		
		//"maxtime"
		public Keyword getMaxtimeKeyword_3_0() { return cMaxtimeKeyword_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//msec=INT
		public Assignment getMsecAssignment_3_2() { return cMsecAssignment_3_2; }
		
		//INT
		public RuleCall getMsecINTTerminalRuleCall_3_2_0() { return cMsecINTTerminalRuleCall_3_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//("arg" arg=PStruct)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"arg"
		public Keyword getArgKeyword_4_0() { return cArgKeyword_4_0; }
		
		//arg=PStruct
		public Assignment getArgAssignment_4_1() { return cArgAssignment_4_1; }
		
		//PStruct
		public RuleCall getArgPStructParserRuleCall_4_1_0() { return cArgPStructParserRuleCall_4_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNormalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNormalNormalKeyword_2_0 = (Keyword)cNormalAssignment_2.eContents().get(0);
		private final Assignment cResumeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cResumeResumeLastPlanKeyword_3_0 = (Keyword)cResumeAssignment_3.eContents().get(0);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionPlanActionParserRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionPlanActionParserRuleCall_5_1_0 = (RuleCall)cActionAssignment_5_1.eContents().get(0);
		
		/// *
		// * PLAN
		// * / Plan:
		//	"Plan" name=ID normal?="normal"? resume?="resumeLastPlan"?
		//	action+=PlanAction (";" action+=PlanAction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"Plan" name=ID normal?="normal"? resume?="resumeLastPlan"? action+=PlanAction (";" action+=PlanAction)*
		public Group getGroup() { return cGroup; }
		
		//"Plan"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//normal?="normal"?
		public Assignment getNormalAssignment_2() { return cNormalAssignment_2; }
		
		//"normal"
		public Keyword getNormalNormalKeyword_2_0() { return cNormalNormalKeyword_2_0; }
		
		//resume?="resumeLastPlan"?
		public Assignment getResumeAssignment_3() { return cResumeAssignment_3; }
		
		//"resumeLastPlan"
		public Keyword getResumeResumeLastPlanKeyword_3_0() { return cResumeResumeLastPlanKeyword_3_0; }
		
		//action+=PlanAction
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//PlanAction
		public RuleCall getActionPlanActionParserRuleCall_4_0() { return cActionPlanActionParserRuleCall_4_0; }
		
		//(";" action+=PlanAction)*
		public Group getGroup_5() { return cGroup_5; }
		
		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//action+=PlanAction
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//PlanAction
		public RuleCall getActionPlanActionParserRuleCall_5_1_0() { return cActionPlanActionParserRuleCall_5_1_0; }
	}
	public class PlanActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PlanAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGuardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGuardGuardParserRuleCall_0_0 = (RuleCall)cGuardAssignment_0.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMoveMoveParserRuleCall_1_0 = (RuleCall)cMoveAssignment_1.eContents().get(0);
		private final Assignment cReactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactReactionParserRuleCall_2_0 = (RuleCall)cReactAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElsemoveAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElsemoveMoveParserRuleCall_3_1_0 = (RuleCall)cElsemoveAssignment_3_1.eContents().get(0);
		private final Assignment cElsereactAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElsereactReactionParserRuleCall_3_2_0 = (RuleCall)cElsereactAssignment_3_2.eContents().get(0);
		
		//PlanAction:
		//	guard=Guard? move=Move react=Reaction? ("else" elsemove=Move elsereact=Reaction?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//guard=Guard? move=Move react=Reaction? ("else" elsemove=Move elsereact=Reaction?)?
		public Group getGroup() { return cGroup; }
		
		//guard=Guard?
		public Assignment getGuardAssignment_0() { return cGuardAssignment_0; }
		
		//Guard
		public RuleCall getGuardGuardParserRuleCall_0_0() { return cGuardGuardParserRuleCall_0_0; }
		
		//move=Move
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_1_0() { return cMoveMoveParserRuleCall_1_0; }
		
		//react=Reaction?
		public Assignment getReactAssignment_2() { return cReactAssignment_2; }
		
		//Reaction
		public RuleCall getReactReactionParserRuleCall_2_0() { return cReactReactionParserRuleCall_2_0; }
		
		//("else" elsemove=Move elsereact=Reaction?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//elsemove=Move
		public Assignment getElsemoveAssignment_3_1() { return cElsemoveAssignment_3_1; }
		
		//Move
		public RuleCall getElsemoveMoveParserRuleCall_3_1_0() { return cElsemoveMoveParserRuleCall_3_1_0; }
		
		//elsereact=Reaction?
		public Assignment getElsereactAssignment_3_2() { return cElsereactAssignment_3_2; }
		
		//Reaction
		public RuleCall getElsereactReactionParserRuleCall_3_2_0() { return cElsereactReactionParserRuleCall_3_2_0; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNotKeyword_2_0 = (Keyword)cNotAssignment_2.eContents().get(0);
		private final Assignment cGuardspecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardspecGuardPredicateParserRuleCall_3_0 = (RuleCall)cGuardspecAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Guard   
		// * / Guard:
		//	{Guard} "[" not?="not"? guardspec=GuardPredicate "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{Guard} "[" not?="not"? guardspec=GuardPredicate "]"
		public Group getGroup() { return cGroup; }
		
		//{Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//not?="not"?
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//"not"
		public Keyword getNotNotKeyword_2_0() { return cNotNotKeyword_2_0; }
		
		//guardspec=GuardPredicate
		public Assignment getGuardspecAssignment_3() { return cGuardspecAssignment_3; }
		
		//GuardPredicate
		public RuleCall getGuardspecGuardPredicateParserRuleCall_3_0() { return cGuardspecGuardPredicateParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class GuardPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GuardPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGuardPredicateStableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGuardPredicateRemovableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////GuardSpec:
		//// 	GuardQuery //| GuardWait
		////;
		////GuardWait:
		////	name="!!" evId=[Event] ( "and" (not?="not")? guard = GuardQuery )?
		////;
		////GuardQuery :
		////	GuardPredicate //GuardAtom | 
		////;
		////GuardAtom :
		////	atom=ID //(stay?="!")? 
		////;
		//GuardPredicate:
		//	GuardPredicateStable | GuardPredicateRemovable;
		@Override public ParserRule getRule() { return rule; }
		
		//GuardPredicateStable | GuardPredicateRemovable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GuardPredicateStable
		public RuleCall getGuardPredicateStableParserRuleCall_0() { return cGuardPredicateStableParserRuleCall_0; }
		
		//GuardPredicateRemovable
		public RuleCall getGuardPredicateRemovableParserRuleCall_1() { return cGuardPredicateRemovableParserRuleCall_1; }
	}
	public class GuardPredicateRemovableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GuardPredicateRemovable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardPredicateRemovableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredPTermParserRuleCall_2_0 = (RuleCall)cPredAssignment_2.eContents().get(0);
		
		//GuardPredicateRemovable:
		//	{GuardPredicateRemovable} "??" pred=PTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//{GuardPredicateRemovable} "??" pred=PTerm
		public Group getGroup() { return cGroup; }
		
		//{GuardPredicateRemovable}
		public Action getGuardPredicateRemovableAction_0() { return cGuardPredicateRemovableAction_0; }
		
		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_1() { return cQuestionMarkQuestionMarkKeyword_1; }
		
		//pred=PTerm
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }
		
		//PTerm
		public RuleCall getPredPTermParserRuleCall_2_0() { return cPredPTermParserRuleCall_2_0; }
	}
	public class GuardPredicateStableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GuardPredicateStable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardPredicateStableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredPTermParserRuleCall_2_0 = (RuleCall)cPredAssignment_2.eContents().get(0);
		
		//GuardPredicateStable:
		//	{GuardPredicateStable} "!?" pred=PTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//{GuardPredicateStable} "!?" pred=PTerm
		public Group getGroup() { return cGroup; }
		
		//{GuardPredicateStable}
		public Action getGuardPredicateStableAction_0() { return cGuardPredicateStableAction_0; }
		
		//"!?"
		public Keyword getExclamationMarkQuestionMarkKeyword_1() { return cExclamationMarkQuestionMarkKeyword_1; }
		
		//pred=PTerm
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }
		
		//PTerm
		public RuleCall getPredPTermParserRuleCall_2_0() { return cPredPTermParserRuleCall_2_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Move");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtensionMoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBasicMoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPlanMoveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGuardMoveParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBasicRobotMoveParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// * /
		//Predicate:
		//	functor=ID "(" args+=GuardArg ( "," args+=GuardArg )* ")"
		//;
		//GuardArg :
		// 	 VarArg	 | AtomArg | StringArg
		//;
		//VarArg:
		//	atom=ID	//UPCASE
		//;
		//AtomArg:
		//	IntAtonArg //| SymbolAtomArg
		//;
		//IntAtonArg:	atom=INT ;
		////SymbolAtomArg:	atom=ATOM ;
		////terminal ATOM :  ('a'..'z' ) ('a'..'z')* ;
		//StringArg: atom=STRING ; 
		// * / / *
		// * -----------------------------------
		// * MOVE
		// * -----------------------------------
		// * / Move:
		//	ActionMove | MessageMove | ExtensionMove | BasicMove | PlanMove | GuardMove | BasicRobotMove;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionMove | MessageMove | ExtensionMove | BasicMove | PlanMove | GuardMove | BasicRobotMove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionMove
		public RuleCall getActionMoveParserRuleCall_0() { return cActionMoveParserRuleCall_0; }
		
		//MessageMove
		public RuleCall getMessageMoveParserRuleCall_1() { return cMessageMoveParserRuleCall_1; }
		
		//ExtensionMove
		public RuleCall getExtensionMoveParserRuleCall_2() { return cExtensionMoveParserRuleCall_2; }
		
		//BasicMove
		public RuleCall getBasicMoveParserRuleCall_3() { return cBasicMoveParserRuleCall_3; }
		
		//PlanMove
		public RuleCall getPlanMoveParserRuleCall_4() { return cPlanMoveParserRuleCall_4; }
		
		//GuardMove
		public RuleCall getGuardMoveParserRuleCall_5() { return cGuardMoveParserRuleCall_5; }
		
		//BasicRobotMove
		public RuleCall getBasicRobotMoveParserRuleCall_6() { return cBasicRobotMoveParserRuleCall_6; }
	}
	public class ActionMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ActionMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExecuteActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSolveGoalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDemoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActorOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ActionMove:
		//	ExecuteAction | SolveGoal | Demo | ActorOp;
		@Override public ParserRule getRule() { return rule; }
		
		//ExecuteAction | SolveGoal | Demo | ActorOp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExecuteAction
		public RuleCall getExecuteActionParserRuleCall_0() { return cExecuteActionParserRuleCall_0; }
		
		//SolveGoal
		public RuleCall getSolveGoalParserRuleCall_1() { return cSolveGoalParserRuleCall_1; }
		
		//Demo
		public RuleCall getDemoParserRuleCall_2() { return cDemoParserRuleCall_2; }
		
		//ActorOp
		public RuleCall getActorOpParserRuleCall_3() { return cActorOpParserRuleCall_3; }
	}
	public class ExecuteActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ExecuteAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExecuteActionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExecuteKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cActionActionCrossReference_0_2_0 = (CrossReference)cActionAssignment_0_2.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cActionActionCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cWithKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cArgAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cArgPHeadParserRuleCall_0_3_1_0 = (RuleCall)cArgAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDosentenceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSentenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSentencePHeadParserRuleCall_1_1_0 = (RuleCall)cSentenceAssignment_1_1.eContents().get(0);
		
		//ExecuteAction:
		//	{ExecuteAction} "execute" action=[Action] ("with" arg=PHead)? | "dosentence" sentence=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecuteAction} "execute" action=[Action] ("with" arg=PHead)? | "dosentence" sentence=PHead
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExecuteAction} "execute" action=[Action] ("with" arg=PHead)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExecuteAction}
		public Action getExecuteActionAction_0_0() { return cExecuteActionAction_0_0; }
		
		//"execute"
		public Keyword getExecuteKeyword_0_1() { return cExecuteKeyword_0_1; }
		
		//action=[Action]
		public Assignment getActionAssignment_0_2() { return cActionAssignment_0_2; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_0_2_0() { return cActionActionCrossReference_0_2_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_0_2_0_1() { return cActionActionIDTerminalRuleCall_0_2_0_1; }
		
		//("with" arg=PHead)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//"with"
		public Keyword getWithKeyword_0_3_0() { return cWithKeyword_0_3_0; }
		
		//arg=PHead
		public Assignment getArgAssignment_0_3_1() { return cArgAssignment_0_3_1; }
		
		//PHead
		public RuleCall getArgPHeadParserRuleCall_0_3_1_0() { return cArgPHeadParserRuleCall_0_3_1_0; }
		
		//"dosentence" sentence=PHead
		public Group getGroup_1() { return cGroup_1; }
		
		//"dosentence"
		public Keyword getDosentenceKeyword_1_0() { return cDosentenceKeyword_1_0; }
		
		//sentence=PHead
		public Assignment getSentenceAssignment_1_1() { return cSentenceAssignment_1_1; }
		
		//PHead
		public RuleCall getSentencePHeadParserRuleCall_1_1_0() { return cSentencePHeadParserRuleCall_1_1_0; }
	}
	public class SolveGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SolveGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSolveGoalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGoalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGoalPHeadParserRuleCall_2_0 = (RuleCall)cGoalAssignment_2.eContents().get(0);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationTimeLimitParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOnFailSwitchToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPlanAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cPlanPlanCrossReference_4_1_0 = (CrossReference)cPlanAssignment_4_1.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_4_1_0_1 = (RuleCall)cPlanPlanCrossReference_4_1_0.eContents().get(1);
		
		//SolveGoal:
		//	{SolveGoal} "solve" goal=PHead duration=TimeLimit ("onFailSwitchTo" plan=[Plan])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SolveGoal} "solve" goal=PHead duration=TimeLimit ("onFailSwitchTo" plan=[Plan])?
		public Group getGroup() { return cGroup; }
		
		//{SolveGoal}
		public Action getSolveGoalAction_0() { return cSolveGoalAction_0; }
		
		//"solve"
		public Keyword getSolveKeyword_1() { return cSolveKeyword_1; }
		
		//goal=PHead
		public Assignment getGoalAssignment_2() { return cGoalAssignment_2; }
		
		//PHead
		public RuleCall getGoalPHeadParserRuleCall_2_0() { return cGoalPHeadParserRuleCall_2_0; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_3_0() { return cDurationTimeLimitParserRuleCall_3_0; }
		
		//("onFailSwitchTo" plan=[Plan])?
		public Group getGroup_4() { return cGroup_4; }
		
		//"onFailSwitchTo"
		public Keyword getOnFailSwitchToKeyword_4_0() { return cOnFailSwitchToKeyword_4_0; }
		
		//plan=[Plan]
		public Assignment getPlanAssignment_4_1() { return cPlanAssignment_4_1; }
		
		//[Plan]
		public CrossReference getPlanPlanCrossReference_4_1_0() { return cPlanPlanCrossReference_4_1_0; }
		
		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_4_1_0_1() { return cPlanPlanIDTerminalRuleCall_4_1_0_1; }
	}
	public class DemoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Demo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDemoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDemoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGoalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGoalPHeadParserRuleCall_2_0 = (RuleCall)cGoalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnFailSwitchToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPlanAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPlanPlanCrossReference_3_1_0 = (CrossReference)cPlanAssignment_3_1.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_3_1_0_1 = (RuleCall)cPlanPlanCrossReference_3_1_0.eContents().get(1);
		
		//Demo:
		//	{Demo} "demo" goal=PHead ("onFailSwitchTo" plan=[Plan])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Demo} "demo" goal=PHead ("onFailSwitchTo" plan=[Plan])?
		public Group getGroup() { return cGroup; }
		
		//{Demo}
		public Action getDemoAction_0() { return cDemoAction_0; }
		
		//"demo"
		public Keyword getDemoKeyword_1() { return cDemoKeyword_1; }
		
		//goal=PHead
		public Assignment getGoalAssignment_2() { return cGoalAssignment_2; }
		
		//PHead
		public RuleCall getGoalPHeadParserRuleCall_2_0() { return cGoalPHeadParserRuleCall_2_0; }
		
		//("onFailSwitchTo" plan=[Plan])?
		public Group getGroup_3() { return cGroup_3; }
		
		//"onFailSwitchTo"
		public Keyword getOnFailSwitchToKeyword_3_0() { return cOnFailSwitchToKeyword_3_0; }
		
		//plan=[Plan]
		public Assignment getPlanAssignment_3_1() { return cPlanAssignment_3_1; }
		
		//[Plan]
		public CrossReference getPlanPlanCrossReference_3_1_0() { return cPlanPlanCrossReference_3_1_0; }
		
		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_3_1_0_1() { return cPlanPlanIDTerminalRuleCall_3_1_0_1; }
	}
	public class ActorOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ActorOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActorOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActorOpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGoalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGoalPHeadParserRuleCall_2_0 = (RuleCall)cGoalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnFailSwitchToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPlanAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPlanPlanCrossReference_3_1_0 = (CrossReference)cPlanAssignment_3_1.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_3_1_0_1 = (RuleCall)cPlanPlanCrossReference_3_1_0.eContents().get(1);
		
		//ActorOp:
		//	{ActorOp} "actorOp" goal=PHead ("onFailSwitchTo" plan=[Plan])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActorOp} "actorOp" goal=PHead ("onFailSwitchTo" plan=[Plan])?
		public Group getGroup() { return cGroup; }
		
		//{ActorOp}
		public Action getActorOpAction_0() { return cActorOpAction_0; }
		
		//"actorOp"
		public Keyword getActorOpKeyword_1() { return cActorOpKeyword_1; }
		
		//goal=PHead
		public Assignment getGoalAssignment_2() { return cGoalAssignment_2; }
		
		//PHead
		public RuleCall getGoalPHeadParserRuleCall_2_0() { return cGoalPHeadParserRuleCall_2_0; }
		
		//("onFailSwitchTo" plan=[Plan])?
		public Group getGroup_3() { return cGroup_3; }
		
		//"onFailSwitchTo"
		public Keyword getOnFailSwitchToKeyword_3_0() { return cOnFailSwitchToKeyword_3_0; }
		
		//plan=[Plan]
		public Assignment getPlanAssignment_3_1() { return cPlanAssignment_3_1; }
		
		//[Plan]
		public CrossReference getPlanPlanCrossReference_3_1_0() { return cPlanPlanCrossReference_3_1_0; }
		
		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_3_1_0_1() { return cPlanPlanIDTerminalRuleCall_3_1_0_1; }
	}
	public class BasicRobotMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.BasicRobotMove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicRobotMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDummyRobotMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BasicRobotMove:
		//	{BasicRobotMove} "dummyRobotMove" //(re)defined in it.unibo.qactor.robot
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BasicRobotMove} "dummyRobotMove"
		public Group getGroup() { return cGroup; }
		
		//{BasicRobotMove}
		public Action getBasicRobotMoveAction_0() { return cBasicRobotMoveAction_0; }
		
		//"dummyRobotMove"
		public Keyword getDummyRobotMoveKeyword_1() { return cDummyRobotMoveKeyword_1; }
	}
	public class BasicMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.BasicMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrintCurrentEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintCurrentMessageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMemoCurrentEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMemoCurrentMessageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BasicMove:
		//	Print | PrintCurrentEvent | PrintCurrentMessage | MemoCurrentEvent | MemoCurrentMessage;
		@Override public ParserRule getRule() { return rule; }
		
		//Print | PrintCurrentEvent | PrintCurrentMessage | MemoCurrentEvent | MemoCurrentMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }
		
		//PrintCurrentEvent
		public RuleCall getPrintCurrentEventParserRuleCall_1() { return cPrintCurrentEventParserRuleCall_1; }
		
		//PrintCurrentMessage
		public RuleCall getPrintCurrentMessageParserRuleCall_2() { return cPrintCurrentMessageParserRuleCall_2; }
		
		//MemoCurrentEvent
		public RuleCall getMemoCurrentEventParserRuleCall_3() { return cMemoCurrentEventParserRuleCall_3; }
		
		//MemoCurrentMessage
		public RuleCall getMemoCurrentMessageParserRuleCall_4() { return cMemoCurrentMessageParserRuleCall_4; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsPHeadParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print:
		//	{Print} "println" "(" args=PHead ")" //MoveArgs  
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} "println" "(" args=PHead ")"
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//"println"
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args=PHead
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_3_0() { return cArgsPHeadParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PrintCurrentEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PrintCurrentEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCurrentEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintCurrentEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMemoMemoKeyword_2_0 = (Keyword)cMemoAssignment_2.eContents().get(0);
		
		//PrintCurrentEvent:
		//	{PrintCurrentEvent} "printCurrentEvent" memo?="-memo"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCurrentEvent} "printCurrentEvent" memo?="-memo"?
		public Group getGroup() { return cGroup; }
		
		//{PrintCurrentEvent}
		public Action getPrintCurrentEventAction_0() { return cPrintCurrentEventAction_0; }
		
		//"printCurrentEvent"
		public Keyword getPrintCurrentEventKeyword_1() { return cPrintCurrentEventKeyword_1; }
		
		//memo?="-memo"?
		public Assignment getMemoAssignment_2() { return cMemoAssignment_2; }
		
		//"-memo"
		public Keyword getMemoMemoKeyword_2_0() { return cMemoMemoKeyword_2_0; }
	}
	public class PrintCurrentMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PrintCurrentMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCurrentMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintCurrentMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMemoMemoKeyword_2_0 = (Keyword)cMemoAssignment_2.eContents().get(0);
		
		//PrintCurrentMessage:
		//	{PrintCurrentMessage} "printCurrentMessage" memo?="-memo"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCurrentMessage} "printCurrentMessage" memo?="-memo"?
		public Group getGroup() { return cGroup; }
		
		//{PrintCurrentMessage}
		public Action getPrintCurrentMessageAction_0() { return cPrintCurrentMessageAction_0; }
		
		//"printCurrentMessage"
		public Keyword getPrintCurrentMessageKeyword_1() { return cPrintCurrentMessageKeyword_1; }
		
		//memo?="-memo"?
		public Assignment getMemoAssignment_2() { return cMemoAssignment_2; }
		
		//"-memo"
		public Keyword getMemoMemoKeyword_2_0() { return cMemoMemoKeyword_2_0; }
	}
	public class MemoCurrentEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MemoCurrentEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoCurrentEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMemoCurrentEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLastonlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLastonlyLastonlyKeyword_2_0 = (Keyword)cLastonlyAssignment_2.eContents().get(0);
		
		//MemoCurrentEvent:
		//	{MemoCurrentEvent} "memoCurrentEvent" lastonly?="-lastonly"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoCurrentEvent} "memoCurrentEvent" lastonly?="-lastonly"?
		public Group getGroup() { return cGroup; }
		
		//{MemoCurrentEvent}
		public Action getMemoCurrentEventAction_0() { return cMemoCurrentEventAction_0; }
		
		//"memoCurrentEvent"
		public Keyword getMemoCurrentEventKeyword_1() { return cMemoCurrentEventKeyword_1; }
		
		//lastonly?="-lastonly"?
		public Assignment getLastonlyAssignment_2() { return cLastonlyAssignment_2; }
		
		//"-lastonly"
		public Keyword getLastonlyLastonlyKeyword_2_0() { return cLastonlyLastonlyKeyword_2_0; }
	}
	public class MemoCurrentMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MemoCurrentMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoCurrentMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMemoCurrentMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLastonlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLastonlyLastonlyKeyword_2_0 = (Keyword)cLastonlyAssignment_2.eContents().get(0);
		
		//MemoCurrentMessage:
		//	{MemoCurrentMessage} "memoCurrentMessage" lastonly?="-lastonly"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoCurrentMessage} "memoCurrentMessage" lastonly?="-lastonly"?
		public Group getGroup() { return cGroup; }
		
		//{MemoCurrentMessage}
		public Action getMemoCurrentMessageAction_0() { return cMemoCurrentMessageAction_0; }
		
		//"memoCurrentMessage"
		public Keyword getMemoCurrentMessageKeyword_1() { return cMemoCurrentMessageKeyword_1; }
		
		//lastonly?="-lastonly"?
		public Assignment getLastonlyAssignment_2() { return cLastonlyAssignment_2; }
		
		//"-lastonly"
		public Keyword getLastonlyLastonlyKeyword_2_0() { return cLastonlyLastonlyKeyword_2_0; }
	}
	public class PlanMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.PlanMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGetActivationEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetSensedEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoadPlanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRunPlanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cResumePlanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRepeatPlanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSwitchPlanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSuspendPlanParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEndPlanParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEndActorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		// * -----------------------------------
		// * PlanMove
		// * -----------------------------------
		// * / PlanMove:
		//	GetActivationEvent | GetSensedEvent | LoadPlan | RunPlan | ResumePlan | RepeatPlan | SwitchPlan | SuspendPlan |
		//	EndPlan | EndActor;
		@Override public ParserRule getRule() { return rule; }
		
		//GetActivationEvent | GetSensedEvent | LoadPlan | RunPlan | ResumePlan | RepeatPlan | SwitchPlan | SuspendPlan | EndPlan
		//| EndActor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GetActivationEvent
		public RuleCall getGetActivationEventParserRuleCall_0() { return cGetActivationEventParserRuleCall_0; }
		
		//GetSensedEvent
		public RuleCall getGetSensedEventParserRuleCall_1() { return cGetSensedEventParserRuleCall_1; }
		
		//LoadPlan
		public RuleCall getLoadPlanParserRuleCall_2() { return cLoadPlanParserRuleCall_2; }
		
		//RunPlan
		public RuleCall getRunPlanParserRuleCall_3() { return cRunPlanParserRuleCall_3; }
		
		//ResumePlan
		public RuleCall getResumePlanParserRuleCall_4() { return cResumePlanParserRuleCall_4; }
		
		//RepeatPlan
		public RuleCall getRepeatPlanParserRuleCall_5() { return cRepeatPlanParserRuleCall_5; }
		
		//SwitchPlan
		public RuleCall getSwitchPlanParserRuleCall_6() { return cSwitchPlanParserRuleCall_6; }
		
		//SuspendPlan
		public RuleCall getSuspendPlanParserRuleCall_7() { return cSuspendPlanParserRuleCall_7; }
		
		//EndPlan
		public RuleCall getEndPlanParserRuleCall_8() { return cEndPlanParserRuleCall_8; }
		
		//EndActor
		public RuleCall getEndActorParserRuleCall_9() { return cEndActorParserRuleCall_9; }
	}
	public class GetActivationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GetActivationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetActivationEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetActivationEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//GetActivationEvent:
		//	{GetActivationEvent} "getActivationEvent" var=Variable //used in a plan to know the event that triggers it
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GetActivationEvent} "getActivationEvent" var=Variable
		public Group getGroup() { return cGroup; }
		
		//{GetActivationEvent}
		public Action getGetActivationEventAction_0() { return cGetActivationEventAction_0; }
		
		//"getActivationEvent"
		public Keyword getGetActivationEventKeyword_1() { return cGetActivationEventKeyword_1; }
		
		//var=Variable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_2_0() { return cVarVariableParserRuleCall_2_0; }
	}
	public class GetSensedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GetSensedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetSensedEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetSensedEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//GetSensedEvent:
		//	{GetSensedEvent} "getSensedEvent" var=Variable //used in a actor to know the event that resumes the actor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GetSensedEvent} "getSensedEvent" var=Variable
		public Group getGroup() { return cGroup; }
		
		//{GetSensedEvent}
		public Action getGetSensedEventAction_0() { return cGetSensedEventAction_0; }
		
		//"getSensedEvent"
		public Keyword getGetSensedEventKeyword_1() { return cGetSensedEventKeyword_1; }
		
		//var=Variable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_2_0() { return cVarVariableParserRuleCall_2_0; }
	}
	public class LoadPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.LoadPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoadPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoadPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFnameVarOrStringParserRuleCall_2_0 = (RuleCall)cFnameAssignment_2.eContents().get(0);
		
		//LoadPlan:
		//	{LoadPlan} "loadPlan" fname=VarOrString;
		@Override public ParserRule getRule() { return rule; }
		
		//{LoadPlan} "loadPlan" fname=VarOrString
		public Group getGroup() { return cGroup; }
		
		//{LoadPlan}
		public Action getLoadPlanAction_0() { return cLoadPlanAction_0; }
		
		//"loadPlan"
		public Keyword getLoadPlanKeyword_1() { return cLoadPlanKeyword_1; }
		
		//fname=VarOrString
		public Assignment getFnameAssignment_2() { return cFnameAssignment_2; }
		
		//VarOrString
		public RuleCall getFnameVarOrStringParserRuleCall_2_0() { return cFnameVarOrStringParserRuleCall_2_0; }
	}
	public class RunPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.RunPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRunPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRunPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlainidAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlainidVarOrAtomicParserRuleCall_2_0 = (RuleCall)cPlainidAssignment_2.eContents().get(0);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationTimeLimitParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		
		//RunPlan:
		//	{RunPlan} "runPlan" plainid=VarOrAtomic duration=TimeLimit;
		@Override public ParserRule getRule() { return rule; }
		
		//{RunPlan} "runPlan" plainid=VarOrAtomic duration=TimeLimit
		public Group getGroup() { return cGroup; }
		
		//{RunPlan}
		public Action getRunPlanAction_0() { return cRunPlanAction_0; }
		
		//"runPlan"
		public Keyword getRunPlanKeyword_1() { return cRunPlanKeyword_1; }
		
		//plainid=VarOrAtomic
		public Assignment getPlainidAssignment_2() { return cPlainidAssignment_2; }
		
		//VarOrAtomic
		public RuleCall getPlainidVarOrAtomicParserRuleCall_2_0() { return cPlainidVarOrAtomicParserRuleCall_2_0; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_3_0() { return cDurationTimeLimitParserRuleCall_3_0; }
	}
	public class ResumePlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ResumePlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResumePlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResumeLastPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ResumePlan:
		//	{ResumePlan} "resumeLastPlan";
		@Override public ParserRule getRule() { return rule; }
		
		//{ResumePlan} "resumeLastPlan"
		public Group getGroup() { return cGroup; }
		
		//{ResumePlan}
		public Action getResumePlanAction_0() { return cResumePlanAction_0; }
		
		//"resumeLastPlan"
		public Keyword getResumeLastPlanKeyword_1() { return cResumeLastPlanKeyword_1; }
	}
	public class SuspendPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SuspendPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuspendPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuspendLastPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SuspendPlan:
		//	{SuspendPlan} "suspendLastPlan";
		@Override public ParserRule getRule() { return rule; }
		
		//{SuspendPlan} "suspendLastPlan"
		public Group getGroup() { return cGroup; }
		
		//{SuspendPlan}
		public Action getSuspendPlanAction_0() { return cSuspendPlanAction_0; }
		
		//"suspendLastPlan"
		public Keyword getSuspendLastPlanKeyword_1() { return cSuspendLastPlanKeyword_1; }
	}
	public class RepeatPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.RepeatPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepeatPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepeatPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNiterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNiterVarOrIntParserRuleCall_2_0 = (RuleCall)cNiterAssignment_2.eContents().get(0);
		
		//RepeatPlan:
		//	{RepeatPlan} "repeatPlan" niter=VarOrInt?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RepeatPlan} "repeatPlan" niter=VarOrInt?
		public Group getGroup() { return cGroup; }
		
		//{RepeatPlan}
		public Action getRepeatPlanAction_0() { return cRepeatPlanAction_0; }
		
		//"repeatPlan"
		public Keyword getRepeatPlanKeyword_1() { return cRepeatPlanKeyword_1; }
		
		//niter=VarOrInt?
		public Assignment getNiterAssignment_2() { return cNiterAssignment_2; }
		
		//VarOrInt
		public RuleCall getNiterVarOrIntParserRuleCall_2_0() { return cNiterVarOrIntParserRuleCall_2_0; }
	}
	public class SwitchPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SwitchPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchToPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlanAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPlanPlanCrossReference_2_0 = (CrossReference)cPlanAssignment_2.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_2_0_1 = (RuleCall)cPlanPlanCrossReference_2_0.eContents().get(1);
		
		//SwitchPlan:
		//	{SwitchPlan} "switchToPlan" plan=[Plan];
		@Override public ParserRule getRule() { return rule; }
		
		//{SwitchPlan} "switchToPlan" plan=[Plan]
		public Group getGroup() { return cGroup; }
		
		//{SwitchPlan}
		public Action getSwitchPlanAction_0() { return cSwitchPlanAction_0; }
		
		//"switchToPlan"
		public Keyword getSwitchToPlanKeyword_1() { return cSwitchToPlanKeyword_1; }
		
		//plan=[Plan]
		public Assignment getPlanAssignment_2() { return cPlanAssignment_2; }
		
		//[Plan]
		public CrossReference getPlanPlanCrossReference_2_0() { return cPlanPlanCrossReference_2_0; }
		
		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_2_0_1() { return cPlanPlanIDTerminalRuleCall_2_0_1; }
	}
	public class EndPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EndPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndPlanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgSTRINGTerminalRuleCall_2_0 = (RuleCall)cMsgAssignment_2.eContents().get(0);
		
		//EndPlan:
		//	{EndPlan} "endPlan" msg=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{EndPlan} "endPlan" msg=STRING
		public Group getGroup() { return cGroup; }
		
		//{EndPlan}
		public Action getEndPlanAction_0() { return cEndPlanAction_0; }
		
		//"endPlan"
		public Keyword getEndPlanKeyword_1() { return cEndPlanKeyword_1; }
		
		//msg=STRING
		public Assignment getMsgAssignment_2() { return cMsgAssignment_2; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_2_0() { return cMsgSTRINGTerminalRuleCall_2_0; }
	}
	public class EndActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EndActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndQActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgSTRINGTerminalRuleCall_2_0 = (RuleCall)cMsgAssignment_2.eContents().get(0);
		
		//EndActor:
		//	{EndActor} "endQActor" msg=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{EndActor} "endQActor" msg=STRING
		public Group getGroup() { return cGroup; }
		
		//{EndActor}
		public Action getEndActorAction_0() { return cEndActorAction_0; }
		
		//"endQActor"
		public Keyword getEndQActorKeyword_1() { return cEndQActorKeyword_1; }
		
		//msg=STRING
		public Assignment getMsgAssignment_2() { return cMsgAssignment_2; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_2_0() { return cMsgSTRINGTerminalRuleCall_2_0; }
	}
	public class GuardMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.GuardMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * -----------------------------------
		// * GuardMove 
		// * -----------------------------------
		// * / GuardMove:
		//	AddRule | RemoveRule;
		@Override public ParserRule getRule() { return rule; }
		
		//AddRule | RemoveRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddRule
		public RuleCall getAddRuleParserRuleCall_0() { return cAddRuleParserRuleCall_0; }
		
		//RemoveRule
		public RuleCall getRemoveRuleParserRuleCall_1() { return cRemoveRuleParserRuleCall_1; }
	}
	public class AddRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.AddRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAddRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAddRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulePHeadParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//AddRule:
		//	{AddRule} "addRule" rule=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{AddRule} "addRule" rule=PHead
		public Group getGroup() { return cGroup; }
		
		//{AddRule}
		public Action getAddRuleAction_0() { return cAddRuleAction_0; }
		
		//"addRule"
		public Keyword getAddRuleKeyword_1() { return cAddRuleKeyword_1; }
		
		//rule=PHead
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//PHead
		public RuleCall getRulePHeadParserRuleCall_2_0() { return cRulePHeadParserRuleCall_2_0; }
	}
	public class RemoveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.RemoveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulePHeadParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//RemoveRule:
		//	{RemoveRule} "removeRule" rule=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{RemoveRule} "removeRule" rule=PHead
		public Group getGroup() { return cGroup; }
		
		//{RemoveRule}
		public Action getRemoveRuleAction_0() { return cRemoveRuleAction_0; }
		
		//"removeRule"
		public Keyword getRemoveRuleKeyword_1() { return cRemoveRuleKeyword_1; }
		
		//rule=PHead
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//PHead
		public RuleCall getRulePHeadParserRuleCall_2_0() { return cRulePHeadParserRuleCall_2_0; }
	}
	public class MessageMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MessageMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSendDispatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSendRequestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReplyToCallerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReceiveMsgParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOnReceiveMsgParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMsgSelectParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRaiseEventParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSenseEventParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMsgSwitchParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEventSwitchParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		// * -----------------------------------
		// * MessageMove
		// * -----------------------------------
		// * / MessageMove:
		//	SendDispatch | SendRequest | ReplyToCaller | ReceiveMsg | OnReceiveMsg | MsgSelect | RaiseEvent | SenseEvent |
		//	MsgSwitch | EventSwitch;
		@Override public ParserRule getRule() { return rule; }
		
		//SendDispatch | SendRequest | ReplyToCaller | ReceiveMsg | OnReceiveMsg | MsgSelect | RaiseEvent | SenseEvent | MsgSwitch
		//| EventSwitch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SendDispatch
		public RuleCall getSendDispatchParserRuleCall_0() { return cSendDispatchParserRuleCall_0; }
		
		//SendRequest
		public RuleCall getSendRequestParserRuleCall_1() { return cSendRequestParserRuleCall_1; }
		
		//ReplyToCaller
		public RuleCall getReplyToCallerParserRuleCall_2() { return cReplyToCallerParserRuleCall_2; }
		
		//ReceiveMsg
		public RuleCall getReceiveMsgParserRuleCall_3() { return cReceiveMsgParserRuleCall_3; }
		
		//OnReceiveMsg
		public RuleCall getOnReceiveMsgParserRuleCall_4() { return cOnReceiveMsgParserRuleCall_4; }
		
		//MsgSelect
		public RuleCall getMsgSelectParserRuleCall_5() { return cMsgSelectParserRuleCall_5; }
		
		////NO MORE IMPLEMENTED IN AKKA
		//RaiseEvent
		public RuleCall getRaiseEventParserRuleCall_6() { return cRaiseEventParserRuleCall_6; }
		
		//SenseEvent
		public RuleCall getSenseEventParserRuleCall_7() { return cSenseEventParserRuleCall_7; }
		
		//MsgSwitch
		public RuleCall getMsgSwitchParserRuleCall_8() { return cMsgSwitchParserRuleCall_8; }
		
		//EventSwitch
		public RuleCall getEventSwitchParserRuleCall_9() { return cEventSwitchParserRuleCall_9; }
	}
	public class SendDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SendDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendDispatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestVarOrQactorParserRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		private final Keyword cMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgrefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMsgrefMessageCrossReference_4_0 = (CrossReference)cMsgrefAssignment_4.eContents().get(0);
		private final RuleCall cMsgrefMessageIDTerminalRuleCall_4_0_1 = (RuleCall)cMsgrefMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValPHeadParserRuleCall_6_0 = (RuleCall)cValAssignment_6.eContents().get(0);
		
		//SendDispatch:
		//	{SendDispatch} "forward" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{SendDispatch} "forward" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//{SendDispatch}
		public Action getSendDispatchAction_0() { return cSendDispatchAction_0; }
		
		//"forward"
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
		
		//dest=VarOrQactor
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//VarOrQactor
		public RuleCall getDestVarOrQactorParserRuleCall_2_0() { return cDestVarOrQactorParserRuleCall_2_0; }
		
		//"-m"
		public Keyword getMKeyword_3() { return cMKeyword_3; }
		
		//msgref=[Message]
		public Assignment getMsgrefAssignment_4() { return cMsgrefAssignment_4; }
		
		//[Message]
		public CrossReference getMsgrefMessageCrossReference_4_0() { return cMsgrefMessageCrossReference_4_0; }
		
		//ID
		public RuleCall getMsgrefMessageIDTerminalRuleCall_4_0_1() { return cMsgrefMessageIDTerminalRuleCall_4_0_1; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//val=PHead
		public Assignment getValAssignment_6() { return cValAssignment_6; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_6_0() { return cValPHeadParserRuleCall_6_0; }
	}
	public class SendRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SendRequest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendRequestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDemandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestVarOrQactorParserRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		private final Keyword cMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgrefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMsgrefMessageCrossReference_4_0 = (CrossReference)cMsgrefAssignment_4.eContents().get(0);
		private final RuleCall cMsgrefMessageIDTerminalRuleCall_4_0_1 = (RuleCall)cMsgrefMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValPHeadParserRuleCall_6_0 = (RuleCall)cValAssignment_6.eContents().get(0);
		private final Keyword cAnswHandleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SendRequest:
		//	{SendRequest} "demand" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead "answHandle"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SendRequest} "demand" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead "answHandle"?
		public Group getGroup() { return cGroup; }
		
		//{SendRequest}
		public Action getSendRequestAction_0() { return cSendRequestAction_0; }
		
		//"demand"
		public Keyword getDemandKeyword_1() { return cDemandKeyword_1; }
		
		//dest=VarOrQactor
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//VarOrQactor
		public RuleCall getDestVarOrQactorParserRuleCall_2_0() { return cDestVarOrQactorParserRuleCall_2_0; }
		
		//"-m"
		public Keyword getMKeyword_3() { return cMKeyword_3; }
		
		//msgref=[Message]
		public Assignment getMsgrefAssignment_4() { return cMsgrefAssignment_4; }
		
		//[Message]
		public CrossReference getMsgrefMessageCrossReference_4_0() { return cMsgrefMessageCrossReference_4_0; }
		
		//ID
		public RuleCall getMsgrefMessageIDTerminalRuleCall_4_0_1() { return cMsgrefMessageIDTerminalRuleCall_4_0_1; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//val=PHead
		public Assignment getValAssignment_6() { return cValAssignment_6; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_6_0() { return cValPHeadParserRuleCall_6_0; }
		
		//"answHandle"?
		public Keyword getAnswHandleKeyword_7() { return cAnswHandleKeyword_7; }
	}
	public class ReplyToCallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ReplyToCaller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReplyToCallerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReplyToCallerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefMessageCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		////  SendAnswer :
		////  	{} "answerTo" dest=ID "-m" id=[Message] "seqnum" seqnum=VarOrString 
		////  	(":" val = VarOrPStruct )?
		////   ;
		//ReplyToCaller:
		//	{ReplyToCaller} "replyToCaller" "-m" msgref=[Message] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReplyToCaller} "replyToCaller" "-m" msgref=[Message] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//{ReplyToCaller}
		public Action getReplyToCallerAction_0() { return cReplyToCallerAction_0; }
		
		//"replyToCaller"
		public Keyword getReplyToCallerKeyword_1() { return cReplyToCallerKeyword_1; }
		
		//"-m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//msgref=[Message]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Message]
		public CrossReference getMsgrefMessageCrossReference_3_0() { return cMsgrefMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefMessageIDTerminalRuleCall_3_0_1() { return cMsgrefMessageIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class ReceiveMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ReceiveMsg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReceiveMsgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReceiveMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cSpecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecMsgSpecParserRuleCall_3_0 = (RuleCall)cSpecAssignment_3.eContents().get(0);
		
		//ReceiveMsg:
		//	{ReceiveMsg} "receiveMsg" duration=TimeLimit spec=MsgSpec?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReceiveMsg} "receiveMsg" duration=TimeLimit spec=MsgSpec?
		public Group getGroup() { return cGroup; }
		
		//{ReceiveMsg}
		public Action getReceiveMsgAction_0() { return cReceiveMsgAction_0; }
		
		//"receiveMsg"
		public Keyword getReceiveMsgKeyword_1() { return cReceiveMsgKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//spec=MsgSpec?
		public Assignment getSpecAssignment_3() { return cSpecAssignment_3; }
		
		//MsgSpec
		public RuleCall getSpecMsgSpecParserRuleCall_3_0() { return cSpecMsgSpecParserRuleCall_3_0; }
	}
	public class MsgSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MsgSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMsgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMsgMessageCrossReference_1_0 = (CrossReference)cMsgAssignment_1.eContents().get(0);
		private final RuleCall cMsgMessageIDTerminalRuleCall_1_0_1 = (RuleCall)cMsgMessageCrossReference_1_0.eContents().get(1);
		private final Keyword cSenderKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSenderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSenderVarOrAtomicParserRuleCall_3_0 = (RuleCall)cSenderAssignment_3.eContents().get(0);
		private final Keyword cContentKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContentPHeadParserRuleCall_5_0 = (RuleCall)cContentAssignment_5.eContents().get(0);
		
		////AKKA
		//// OnReceive :
		//// 	"onReceive" duration=TimeLimit (spec=MsgSpec)? "->" move = SwitchPlan 
		//// ;
		//MsgSpec:
		//	"-m" msg=[Message] "sender" sender=VarOrAtomic "content" content=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"-m" msg=[Message] "sender" sender=VarOrAtomic "content" content=PHead
		public Group getGroup() { return cGroup; }
		
		//"-m"
		public Keyword getMKeyword_0() { return cMKeyword_0; }
		
		//msg=[Message]
		public Assignment getMsgAssignment_1() { return cMsgAssignment_1; }
		
		//[Message]
		public CrossReference getMsgMessageCrossReference_1_0() { return cMsgMessageCrossReference_1_0; }
		
		//ID
		public RuleCall getMsgMessageIDTerminalRuleCall_1_0_1() { return cMsgMessageIDTerminalRuleCall_1_0_1; }
		
		//"sender"
		public Keyword getSenderKeyword_2() { return cSenderKeyword_2; }
		
		//sender=VarOrAtomic
		public Assignment getSenderAssignment_3() { return cSenderAssignment_3; }
		
		//VarOrAtomic
		public RuleCall getSenderVarOrAtomicParserRuleCall_3_0() { return cSenderVarOrAtomicParserRuleCall_3_0; }
		
		//"content"
		public Keyword getContentKeyword_4() { return cContentKeyword_4; }
		
		//content=PHead
		public Assignment getContentAssignment_5() { return cContentAssignment_5; }
		
		//PHead
		public RuleCall getContentPHeadParserRuleCall_5_0() { return cContentPHeadParserRuleCall_5_0; }
	}
	public class OnReceiveMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.OnReceiveMsg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOnReceiveMsgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReceiveTheMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgidPHeadParserRuleCall_4_0 = (RuleCall)cMsgidAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMsgtypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMsgtypePHeadParserRuleCall_6_0 = (RuleCall)cMsgtypeAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMsgsenderAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMsgsenderPHeadParserRuleCall_8_0 = (RuleCall)cMsgsenderAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMsgreceiverAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMsgreceiverPHeadParserRuleCall_10_0 = (RuleCall)cMsgreceiverAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMsgcontentAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMsgcontentPHeadParserRuleCall_12_0 = (RuleCall)cMsgcontentAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cMsgseqnumAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cMsgseqnumPHeadParserRuleCall_14_0 = (RuleCall)cMsgseqnumAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cDurationAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cDurationTimeLimitParserRuleCall_16_0 = (RuleCall)cDurationAssignment_16.eContents().get(0);
		
		////MSGID:MSGTYPE:SENDER:RECEIVER:CONTENT:SEQNUM
		//OnReceiveMsg:
		//	{OnReceiveMsg} "receiveTheMsg" "m" "(" msgid=PHead "," msgtype=PHead ","
		//	msgsender=PHead "," msgreceiver=PHead "," msgcontent=PHead "," msgseqnum=PHead ")"
		//	duration=TimeLimit;
		@Override public ParserRule getRule() { return rule; }
		
		//{OnReceiveMsg} "receiveTheMsg" "m" "(" msgid=PHead "," msgtype=PHead "," msgsender=PHead "," msgreceiver=PHead ","
		//msgcontent=PHead "," msgseqnum=PHead ")" duration=TimeLimit
		public Group getGroup() { return cGroup; }
		
		//{OnReceiveMsg}
		public Action getOnReceiveMsgAction_0() { return cOnReceiveMsgAction_0; }
		
		//"receiveTheMsg"
		public Keyword getReceiveTheMsgKeyword_1() { return cReceiveTheMsgKeyword_1; }
		
		//"m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//msgid=PHead
		public Assignment getMsgidAssignment_4() { return cMsgidAssignment_4; }
		
		//PHead
		public RuleCall getMsgidPHeadParserRuleCall_4_0() { return cMsgidPHeadParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//msgtype=PHead
		public Assignment getMsgtypeAssignment_6() { return cMsgtypeAssignment_6; }
		
		//PHead
		public RuleCall getMsgtypePHeadParserRuleCall_6_0() { return cMsgtypePHeadParserRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//msgsender=PHead
		public Assignment getMsgsenderAssignment_8() { return cMsgsenderAssignment_8; }
		
		//PHead
		public RuleCall getMsgsenderPHeadParserRuleCall_8_0() { return cMsgsenderPHeadParserRuleCall_8_0; }
		
		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//msgreceiver=PHead
		public Assignment getMsgreceiverAssignment_10() { return cMsgreceiverAssignment_10; }
		
		//PHead
		public RuleCall getMsgreceiverPHeadParserRuleCall_10_0() { return cMsgreceiverPHeadParserRuleCall_10_0; }
		
		//","
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//msgcontent=PHead
		public Assignment getMsgcontentAssignment_12() { return cMsgcontentAssignment_12; }
		
		//PHead
		public RuleCall getMsgcontentPHeadParserRuleCall_12_0() { return cMsgcontentPHeadParserRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//msgseqnum=PHead
		public Assignment getMsgseqnumAssignment_14() { return cMsgseqnumAssignment_14; }
		
		//PHead
		public RuleCall getMsgseqnumPHeadParserRuleCall_14_0() { return cMsgseqnumPHeadParserRuleCall_14_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_16() { return cDurationAssignment_16; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_16_0() { return cDurationTimeLimitParserRuleCall_16_0; }
	}
	public class MsgSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MsgSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMsgSelectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReceiveAndSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cMessagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMessagesMessageCrossReference_3_0 = (CrossReference)cMessagesAssignment_3.eContents().get(0);
		private final RuleCall cMessagesMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMessagesMessageCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMessagesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMessagesMessageCrossReference_4_1_0 = (CrossReference)cMessagesAssignment_4_1.eContents().get(0);
		private final RuleCall cMessagesMessageIDTerminalRuleCall_4_1_0_1 = (RuleCall)cMessagesMessageCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPlansAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cPlansPlanCrossReference_6_0 = (CrossReference)cPlansAssignment_6.eContents().get(0);
		private final RuleCall cPlansPlanIDTerminalRuleCall_6_0_1 = (RuleCall)cPlansPlanCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPlansAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cPlansPlanCrossReference_7_1_0 = (CrossReference)cPlansAssignment_7_1.eContents().get(0);
		private final RuleCall cPlansPlanIDTerminalRuleCall_7_1_0_1 = (RuleCall)cPlansPlanCrossReference_7_1_0.eContents().get(1);
		
		//MsgSelect:
		//	{MsgSelect} "receiveAndSwitch" duration=TimeLimit messages+=[Message] ("," messages+=[Message])*
		//	"->"
		//	plans+=[Plan] ("," plans+=[Plan])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MsgSelect} "receiveAndSwitch" duration=TimeLimit messages+=[Message] ("," messages+=[Message])* "->" plans+=[Plan] (","
		//plans+=[Plan])*
		public Group getGroup() { return cGroup; }
		
		//{MsgSelect}
		public Action getMsgSelectAction_0() { return cMsgSelectAction_0; }
		
		//"receiveAndSwitch"
		public Keyword getReceiveAndSwitchKeyword_1() { return cReceiveAndSwitchKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//messages+=[Message]
		public Assignment getMessagesAssignment_3() { return cMessagesAssignment_3; }
		
		//[Message]
		public CrossReference getMessagesMessageCrossReference_3_0() { return cMessagesMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMessagesMessageIDTerminalRuleCall_3_0_1() { return cMessagesMessageIDTerminalRuleCall_3_0_1; }
		
		//("," messages+=[Message])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//messages+=[Message]
		public Assignment getMessagesAssignment_4_1() { return cMessagesAssignment_4_1; }
		
		//[Message]
		public CrossReference getMessagesMessageCrossReference_4_1_0() { return cMessagesMessageCrossReference_4_1_0; }
		
		//ID
		public RuleCall getMessagesMessageIDTerminalRuleCall_4_1_0_1() { return cMessagesMessageIDTerminalRuleCall_4_1_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//plans+=[Plan]
		public Assignment getPlansAssignment_6() { return cPlansAssignment_6; }
		
		//[Plan]
		public CrossReference getPlansPlanCrossReference_6_0() { return cPlansPlanCrossReference_6_0; }
		
		//ID
		public RuleCall getPlansPlanIDTerminalRuleCall_6_0_1() { return cPlansPlanIDTerminalRuleCall_6_0_1; }
		
		//("," plans+=[Plan])*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//plans+=[Plan]
		public Assignment getPlansAssignment_7_1() { return cPlansAssignment_7_1; }
		
		//[Plan]
		public CrossReference getPlansPlanCrossReference_7_1_0() { return cPlansPlanCrossReference_7_1_0; }
		
		//ID
		public RuleCall getPlansPlanIDTerminalRuleCall_7_1_0_1() { return cPlansPlanIDTerminalRuleCall_7_1_0_1; }
	}
	public class RaiseEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.RaiseEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRaiseEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEmitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEvEventCrossReference_2_0 = (CrossReference)cEvAssignment_2.eContents().get(0);
		private final RuleCall cEvEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEvEventCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentPHeadParserRuleCall_4_0 = (RuleCall)cContentAssignment_4.eContents().get(0);
		
		//RaiseEvent:
		//	{RaiseEvent} "emit" ev=[Event] ":" content=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//{RaiseEvent} "emit" ev=[Event] ":" content=PHead
		public Group getGroup() { return cGroup; }
		
		//{RaiseEvent}
		public Action getRaiseEventAction_0() { return cRaiseEventAction_0; }
		
		//"emit"
		public Keyword getEmitKeyword_1() { return cEmitKeyword_1; }
		
		//ev=[Event]
		public Assignment getEvAssignment_2() { return cEvAssignment_2; }
		
		//[Event]
		public CrossReference getEvEventCrossReference_2_0() { return cEvEventCrossReference_2_0; }
		
		//ID
		public RuleCall getEvEventIDTerminalRuleCall_2_0_1() { return cEvEventIDTerminalRuleCall_2_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//content=PHead
		public Assignment getContentAssignment_4() { return cContentAssignment_4; }
		
		//PHead
		public RuleCall getContentPHeadParserRuleCall_4_0() { return cContentPHeadParserRuleCall_4_0; }
	}
	public class SenseEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SenseEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSenseEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSenseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEventsEventCrossReference_3_0 = (CrossReference)cEventsAssignment_3.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_3_0_1 = (RuleCall)cEventsEventCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_4_1_0 = (CrossReference)cEventsAssignment_4_1.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEventsEventCrossReference_4_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPlansAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlansContinuationParserRuleCall_6_0 = (RuleCall)cPlansAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPlansAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPlansContinuationParserRuleCall_7_1_0 = (RuleCall)cPlansAssignment_7_1.eContents().get(0);
		
		//SenseEvent:
		//	{SenseEvent} "sense" duration=TimeLimit
		//	events+=[Event] ("," events+=[Event])* "->" plans+=Continuation ("," plans+=Continuation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SenseEvent} "sense" duration=TimeLimit events+=[Event] ("," events+=[Event])* "->" plans+=Continuation (","
		//plans+=Continuation)*
		public Group getGroup() { return cGroup; }
		
		//{SenseEvent}
		public Action getSenseEventAction_0() { return cSenseEventAction_0; }
		
		//"sense"
		public Keyword getSenseKeyword_1() { return cSenseKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//events+=[Event]
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_3_0() { return cEventsEventCrossReference_3_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_3_0_1() { return cEventsEventIDTerminalRuleCall_3_0_1; }
		
		//("," events+=[Event])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//events+=[Event]
		public Assignment getEventsAssignment_4_1() { return cEventsAssignment_4_1; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_4_1_0() { return cEventsEventCrossReference_4_1_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_4_1_0_1() { return cEventsEventIDTerminalRuleCall_4_1_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//plans+=Continuation
		public Assignment getPlansAssignment_6() { return cPlansAssignment_6; }
		
		//Continuation
		public RuleCall getPlansContinuationParserRuleCall_6_0() { return cPlansContinuationParserRuleCall_6_0; }
		
		//("," plans+=Continuation)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//plans+=Continuation
		public Assignment getPlansAssignment_7_1() { return cPlansAssignment_7_1; }
		
		//Continuation
		public RuleCall getPlansContinuationParserRuleCall_7_1_0() { return cPlansContinuationParserRuleCall_7_1_0; }
	}
	public class MsgSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MsgSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMsgSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMessageMessageCrossReference_2_0 = (CrossReference)cMessageAssignment_2.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_2_0_1 = (RuleCall)cMessageMessageCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgPHeadParserRuleCall_4_0 = (RuleCall)cMsgAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMoveAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMoveMoveParserRuleCall_6_0 = (RuleCall)cMoveAssignment_6.eContents().get(0);
		
		//MsgSwitch:
		//	{MsgSwitch} "onMsg" message=[Message] ":" msg=PHead "->" move=Move;
		@Override public ParserRule getRule() { return rule; }
		
		//{MsgSwitch} "onMsg" message=[Message] ":" msg=PHead "->" move=Move
		public Group getGroup() { return cGroup; }
		
		//{MsgSwitch}
		public Action getMsgSwitchAction_0() { return cMsgSwitchAction_0; }
		
		//"onMsg"
		public Keyword getOnMsgKeyword_1() { return cOnMsgKeyword_1; }
		
		//message=[Message]
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_2_0() { return cMessageMessageCrossReference_2_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_2_0_1() { return cMessageMessageIDTerminalRuleCall_2_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//msg=PHead
		public Assignment getMsgAssignment_4() { return cMsgAssignment_4; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_4_0() { return cMsgPHeadParserRuleCall_4_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//move=Move
		public Assignment getMoveAssignment_6() { return cMoveAssignment_6; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_6_0() { return cMoveMoveParserRuleCall_6_0; }
	}
	public class EventSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EventSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgPHeadParserRuleCall_4_0 = (RuleCall)cMsgAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMoveAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMoveMoveParserRuleCall_6_0 = (RuleCall)cMoveAssignment_6.eContents().get(0);
		
		//EventSwitch:
		//	{EventSwitch} "onEvent" event=[Event] ":" msg=PHead "->" move=Move;
		@Override public ParserRule getRule() { return rule; }
		
		//{EventSwitch} "onEvent" event=[Event] ":" msg=PHead "->" move=Move
		public Group getGroup() { return cGroup; }
		
		//{EventSwitch}
		public Action getEventSwitchAction_0() { return cEventSwitchAction_0; }
		
		//"onEvent"
		public Keyword getOnEventKeyword_1() { return cOnEventKeyword_1; }
		
		//event=[Event]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_2_0() { return cEventEventCrossReference_2_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_2_0_1() { return cEventEventIDTerminalRuleCall_2_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//msg=PHead
		public Assignment getMsgAssignment_4() { return cMsgAssignment_4; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_4_0() { return cMsgPHeadParserRuleCall_4_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//move=Move
		public Assignment getMoveAssignment_6() { return cMoveAssignment_6; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_6_0() { return cMoveMoveParserRuleCall_6_0; }
	}
	public class ContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Continuation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPlanAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cPlanPlanCrossReference_0_0 = (CrossReference)cPlanAssignment_0.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_0_0_1 = (RuleCall)cPlanPlanCrossReference_0_0.eContents().get(1);
		private final Assignment cNaneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNaneContinueKeyword_1_0 = (Keyword)cNaneAssignment_1.eContents().get(0);
		
		//Continuation:
		//	plan=[Plan] | nane="continue";
		@Override public ParserRule getRule() { return rule; }
		
		//plan=[Plan] | nane="continue"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//plan=[Plan]
		public Assignment getPlanAssignment_0() { return cPlanAssignment_0; }
		
		//[Plan]
		public CrossReference getPlanPlanCrossReference_0_0() { return cPlanPlanCrossReference_0_0; }
		
		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_0_0_1() { return cPlanPlanIDTerminalRuleCall_0_0_1; }
		
		//nane="continue"
		public Assignment getNaneAssignment_1() { return cNaneAssignment_1; }
		
		//"continue"
		public Keyword getNaneContinueKeyword_1_0() { return cNaneContinueKeyword_1_0; }
	}
	public class ExtensionMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ExtensionMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPhotoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVideoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDelayParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * -----------------------------------
		// * ExtensionMove
		// * -----------------------------------
		// * / ExtensionMove:
		//	Photo | Sound | Video | Delay;
		@Override public ParserRule getRule() { return rule; }
		
		//Photo | Sound | Video | Delay
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Photo
		public RuleCall getPhotoParserRuleCall_0() { return cPhotoParserRuleCall_0; }
		
		//Sound
		public RuleCall getSoundParserRuleCall_1() { return cSoundParserRuleCall_1; }
		
		//Video
		public RuleCall getVideoParserRuleCall_2() { return cVideoParserRuleCall_2; }
		
		//Delay
		public RuleCall getDelayParserRuleCall_3() { return cDelayParserRuleCall_3; }
	}
	public class PhotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Photo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPhotoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPhotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cDestfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestfileMoveFileParserRuleCall_3_0 = (RuleCall)cDestfileAssignment_3.eContents().get(0);
		private final Assignment cAnswerEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerEventAnswerEventParserRuleCall_4_0 = (RuleCall)cAnswerEventAssignment_4.eContents().get(0);
		
		/// *
		// * AnswerEvent is defined so to handle the termination of a asynch action
		// * that cannot be reactive 
		// * / Photo:
		//	{Photo} "photo" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Photo} "photo" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?
		public Group getGroup() { return cGroup; }
		
		//{Photo}
		public Action getPhotoAction_0() { return cPhotoAction_0; }
		
		//"photo"
		public Keyword getPhotoKeyword_1() { return cPhotoKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//destfile=MoveFile
		public Assignment getDestfileAssignment_3() { return cDestfileAssignment_3; }
		
		//MoveFile
		public RuleCall getDestfileMoveFileParserRuleCall_3_0() { return cDestfileMoveFileParserRuleCall_3_0; }
		
		//answerEvent=AnswerEvent?
		public Assignment getAnswerEventAssignment_4() { return cAnswerEventAssignment_4; }
		
		//AnswerEvent
		public RuleCall getAnswerEventAnswerEventParserRuleCall_4_0() { return cAnswerEventAnswerEventParserRuleCall_4_0; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoundAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cSrcfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcfileMoveFileParserRuleCall_3_0 = (RuleCall)cSrcfileAssignment_3.eContents().get(0);
		private final Assignment cAnswerEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerEventAnswerEventParserRuleCall_4_0 = (RuleCall)cAnswerEventAssignment_4.eContents().get(0);
		
		//Sound:
		//	{Sound} "sound" duration=TimeLimit srcfile=MoveFile answerEvent=AnswerEvent?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sound} "sound" duration=TimeLimit srcfile=MoveFile answerEvent=AnswerEvent?
		public Group getGroup() { return cGroup; }
		
		//{Sound}
		public Action getSoundAction_0() { return cSoundAction_0; }
		
		//"sound"
		public Keyword getSoundKeyword_1() { return cSoundKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//srcfile=MoveFile
		public Assignment getSrcfileAssignment_3() { return cSrcfileAssignment_3; }
		
		//MoveFile
		public RuleCall getSrcfileMoveFileParserRuleCall_3_0() { return cSrcfileMoveFileParserRuleCall_3_0; }
		
		//answerEvent=AnswerEvent?
		public Assignment getAnswerEventAssignment_4() { return cAnswerEventAssignment_4; }
		
		//AnswerEvent
		public RuleCall getAnswerEventAnswerEventParserRuleCall_4_0() { return cAnswerEventAnswerEventParserRuleCall_4_0; }
	}
	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Video");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVideoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cDestfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestfileMoveFileParserRuleCall_3_0 = (RuleCall)cDestfileAssignment_3.eContents().get(0);
		private final Assignment cAnswerEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerEventAnswerEventParserRuleCall_4_0 = (RuleCall)cAnswerEventAssignment_4.eContents().get(0);
		
		//Video:
		//	{Video} "video" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Video} "video" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?
		public Group getGroup() { return cGroup; }
		
		//{Video}
		public Action getVideoAction_0() { return cVideoAction_0; }
		
		//"video"
		public Keyword getVideoKeyword_1() { return cVideoKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
		
		//destfile=MoveFile
		public Assignment getDestfileAssignment_3() { return cDestfileAssignment_3; }
		
		//MoveFile
		public RuleCall getDestfileMoveFileParserRuleCall_3_0() { return cDestfileMoveFileParserRuleCall_3_0; }
		
		//answerEvent=AnswerEvent?
		public Assignment getAnswerEventAssignment_4() { return cAnswerEventAssignment_4; }
		
		//AnswerEvent
		public RuleCall getAnswerEventAnswerEventParserRuleCall_4_0() { return cAnswerEventAnswerEventParserRuleCall_4_0; }
	}
	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Delay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDelayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDelayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeLimitParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		
		//Delay:
		//	{Delay} "delay" duration=TimeLimit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Delay} "delay" duration=TimeLimit
		public Group getGroup() { return cGroup; }
		
		//{Delay}
		public Action getDelayAction_0() { return cDelayAction_0; }
		
		//"delay"
		public Keyword getDelayKeyword_1() { return cDelayKeyword_1; }
		
		//duration=TimeLimit
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//TimeLimit
		public RuleCall getDurationTimeLimitParserRuleCall_2_0() { return cDurationTimeLimitParserRuleCall_2_0; }
	}
	public class AnswerEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.AnswerEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerEvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEvNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvNameIDTerminalRuleCall_1_0 = (RuleCall)cEvNameAssignment_1.eContents().get(0);
		
		/// * 
		// * EVENTS
		// * / AnswerEvent:
		//	"answerEv" evName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"answerEv" evName=ID
		public Group getGroup() { return cGroup; }
		
		//"answerEv"
		public Keyword getAnswerEvKeyword_0() { return cAnswerEvKeyword_0; }
		
		//evName=ID
		public Assignment getEvNameAssignment_1() { return cEvNameAssignment_1; }
		
		//ID
		public RuleCall getEvNameIDTerminalRuleCall_1_0() { return cEvNameIDTerminalRuleCall_1_0; }
	}
	public class EventHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EventHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_2_1_0 = (CrossReference)cEventsAssignment_2_1.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEventsEventCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEventsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_2_2_1_0 = (CrossReference)cEventsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cEventsEventCrossReference_2_2_1_0.eContents().get(1);
		private final Assignment cPrintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cPrintPrintKeyword_3_0 = (Keyword)cPrintAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBodyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBodyEventHandlerBodyParserRuleCall_4_1_0 = (RuleCall)cBodyAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * ===============================================
		// * Event-driven
		// * ===============================================
		// * / EventHandler:
		//	"EventHandler" name=ID ("for" events+=[Event] ("," events+=[Event])*)? print?="-print"? ("{" body=EventHandlerBody
		//	"}")? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"EventHandler" name=ID ("for" events+=[Event] ("," events+=[Event])*)? print?="-print"? ("{" body=EventHandlerBody "}")?
		//";"
		public Group getGroup() { return cGroup; }
		
		//"EventHandler"
		public Keyword getEventHandlerKeyword_0() { return cEventHandlerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("for" events+=[Event] ("," events+=[Event])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//events+=[Event]
		public Assignment getEventsAssignment_2_1() { return cEventsAssignment_2_1; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_2_1_0() { return cEventsEventCrossReference_2_1_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_2_1_0_1() { return cEventsEventIDTerminalRuleCall_2_1_0_1; }
		
		//("," events+=[Event])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//events+=[Event]
		public Assignment getEventsAssignment_2_2_1() { return cEventsAssignment_2_2_1; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_2_2_1_0() { return cEventsEventCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_2_2_1_0_1() { return cEventsEventIDTerminalRuleCall_2_2_1_0_1; }
		
		//print?="-print"?
		public Assignment getPrintAssignment_3() { return cPrintAssignment_3; }
		
		//"-print"
		public Keyword getPrintPrintKeyword_3_0() { return cPrintPrintKeyword_3_0; }
		
		//("{" body=EventHandlerBody "}")?
		public Group getGroup_4() { return cGroup_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//body=EventHandlerBody
		public Assignment getBodyAssignment_4_1() { return cBodyAssignment_4_1; }
		
		//EventHandlerBody
		public RuleCall getBodyEventHandlerBodyParserRuleCall_4_1_0() { return cBodyEventHandlerBodyParserRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class EventHandlerBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EventHandlerBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEventHandlerOperationParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEventHandlerOperationParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//EventHandlerBody:
		//	op+=EventHandlerOperation (";" op+=EventHandlerOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=EventHandlerOperation (";" op+=EventHandlerOperation)*
		public Group getGroup() { return cGroup; }
		
		//op+=EventHandlerOperation
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//EventHandlerOperation
		public RuleCall getOpEventHandlerOperationParserRuleCall_0_0() { return cOpEventHandlerOperationParserRuleCall_0_0; }
		
		//(";" op+=EventHandlerOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//op+=EventHandlerOperation
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//EventHandlerOperation
		public RuleCall getOpEventHandlerOperationParserRuleCall_1_1_0() { return cOpEventHandlerOperationParserRuleCall_1_1_0; }
	}
	public class EventHandlerOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.EventHandlerOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemoOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSolveOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRaiseEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSendEventAsDispatchParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EventHandlerOperation:
		//	MemoOperation | SolveOperation | RaiseEvent | SendEventAsDispatch;
		@Override public ParserRule getRule() { return rule; }
		
		//MemoOperation | SolveOperation | RaiseEvent | SendEventAsDispatch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MemoOperation
		public RuleCall getMemoOperationParserRuleCall_0() { return cMemoOperationParserRuleCall_0; }
		
		//SolveOperation
		public RuleCall getSolveOperationParserRuleCall_1() { return cSolveOperationParserRuleCall_1; }
		
		//RaiseEvent
		public RuleCall getRaiseEventParserRuleCall_2() { return cRaiseEventParserRuleCall_2; }
		
		//SendEventAsDispatch
		public RuleCall getSendEventAsDispatchParserRuleCall_3() { return cSendEventAsDispatchParserRuleCall_3; }
	}
	public class MemoOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MemoOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMemoKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRuleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRuleMemoRuleParserRuleCall_0_1_0 = (RuleCall)cRuleAssignment_0_1.eContents().get(0);
		private final Keyword cForKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cActorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cActorQActorCrossReference_0_3_0 = (CrossReference)cActorAssignment_0_3.eContents().get(0);
		private final RuleCall cActorQActorIDTerminalRuleCall_0_3_0_1 = (RuleCall)cActorQActorCrossReference_0_3_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDoMemoAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDoMemoMemoCurrentEventParserRuleCall_1_0_0 = (RuleCall)cDoMemoAssignment_1_0.eContents().get(0);
		private final Keyword cForKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cActorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cActorQActorCrossReference_1_2_0 = (CrossReference)cActorAssignment_1_2.eContents().get(0);
		private final RuleCall cActorQActorIDTerminalRuleCall_1_2_0_1 = (RuleCall)cActorQActorCrossReference_1_2_0.eContents().get(1);
		
		//MemoOperation:
		//	"memo" rule=MemoRule "for" actor=[QActor] | doMemo=MemoCurrentEvent "for" actor=[QActor];
		@Override public ParserRule getRule() { return rule; }
		
		//"memo" rule=MemoRule "for" actor=[QActor] | doMemo=MemoCurrentEvent "for" actor=[QActor]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"memo" rule=MemoRule "for" actor=[QActor]
		public Group getGroup_0() { return cGroup_0; }
		
		//"memo"
		public Keyword getMemoKeyword_0_0() { return cMemoKeyword_0_0; }
		
		//rule=MemoRule
		public Assignment getRuleAssignment_0_1() { return cRuleAssignment_0_1; }
		
		//MemoRule
		public RuleCall getRuleMemoRuleParserRuleCall_0_1_0() { return cRuleMemoRuleParserRuleCall_0_1_0; }
		
		//"for"
		public Keyword getForKeyword_0_2() { return cForKeyword_0_2; }
		
		//actor=[QActor]
		public Assignment getActorAssignment_0_3() { return cActorAssignment_0_3; }
		
		//[QActor]
		public CrossReference getActorQActorCrossReference_0_3_0() { return cActorQActorCrossReference_0_3_0; }
		
		//ID
		public RuleCall getActorQActorIDTerminalRuleCall_0_3_0_1() { return cActorQActorIDTerminalRuleCall_0_3_0_1; }
		
		//doMemo=MemoCurrentEvent "for" actor=[QActor]
		public Group getGroup_1() { return cGroup_1; }
		
		//doMemo=MemoCurrentEvent
		public Assignment getDoMemoAssignment_1_0() { return cDoMemoAssignment_1_0; }
		
		//MemoCurrentEvent
		public RuleCall getDoMemoMemoCurrentEventParserRuleCall_1_0_0() { return cDoMemoMemoCurrentEventParserRuleCall_1_0_0; }
		
		//"for"
		public Keyword getForKeyword_1_1() { return cForKeyword_1_1; }
		
		//actor=[QActor]
		public Assignment getActorAssignment_1_2() { return cActorAssignment_1_2; }
		
		//[QActor]
		public CrossReference getActorQActorCrossReference_1_2_0() { return cActorQActorCrossReference_1_2_0; }
		
		//ID
		public RuleCall getActorQActorIDTerminalRuleCall_1_2_0_1() { return cActorQActorIDTerminalRuleCall_1_2_0_1; }
	}
	public class SolveOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SolveOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGoalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGoalPTermParserRuleCall_1_0 = (RuleCall)cGoalAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActorQActorCrossReference_3_0 = (CrossReference)cActorAssignment_3.eContents().get(0);
		private final RuleCall cActorQActorIDTerminalRuleCall_3_0_1 = (RuleCall)cActorQActorCrossReference_3_0.eContents().get(1);
		
		//SolveOperation:
		//	"solve" goal=PTerm "for" actor=[QActor];
		@Override public ParserRule getRule() { return rule; }
		
		//"solve" goal=PTerm "for" actor=[QActor]
		public Group getGroup() { return cGroup; }
		
		//"solve"
		public Keyword getSolveKeyword_0() { return cSolveKeyword_0; }
		
		//goal=PTerm
		public Assignment getGoalAssignment_1() { return cGoalAssignment_1; }
		
		//PTerm
		public RuleCall getGoalPTermParserRuleCall_1_0() { return cGoalPTermParserRuleCall_1_0; }
		
		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//actor=[QActor]
		public Assignment getActorAssignment_3() { return cActorAssignment_3; }
		
		//[QActor]
		public CrossReference getActorQActorCrossReference_3_0() { return cActorQActorCrossReference_3_0; }
		
		//ID
		public RuleCall getActorQActorIDTerminalRuleCall_3_0_1() { return cActorQActorIDTerminalRuleCall_3_0_1; }
	}
	public class SendEventAsDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.SendEventAsDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActorQActorCrossReference_1_0 = (CrossReference)cActorAssignment_1.eContents().get(0);
		private final RuleCall cActorQActorIDTerminalRuleCall_1_0_1 = (RuleCall)cActorQActorCrossReference_1_0.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefMessageCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefMessageCrossReference_3_0.eContents().get(1);
		
		/// *
		// * Guards for event handler operations should be executed by whom?
		// * / SendEventAsDispatch:
		//	"forwardEvent" actor=[QActor] "-m" msgref=[Message];
		@Override public ParserRule getRule() { return rule; }
		
		//"forwardEvent" actor=[QActor] "-m" msgref=[Message]
		public Group getGroup() { return cGroup; }
		
		//"forwardEvent"
		public Keyword getForwardEventKeyword_0() { return cForwardEventKeyword_0; }
		
		//actor=[QActor]
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//[QActor]
		public CrossReference getActorQActorCrossReference_1_0() { return cActorQActorCrossReference_1_0; }
		
		//ID
		public RuleCall getActorQActorIDTerminalRuleCall_1_0_1() { return cActorQActorIDTerminalRuleCall_1_0_1; }
		
		//"-m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//msgref=[Message]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Message]
		public CrossReference getMsgrefMessageCrossReference_3_0() { return cMsgrefMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefMessageIDTerminalRuleCall_3_0_1() { return cMsgrefMessageIDTerminalRuleCall_3_0_1; }
	}
	public class MemoRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MemoRule");
		private final RuleCall cMemoEventParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MemoRule:
		//	MemoEvent //  | Others memo rules
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MemoEvent
		public RuleCall getMemoEventParserRuleCall() { return cMemoEventParserRuleCall; }
	}
	public class MemoEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MemoEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurrentEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MemoEvent:
		//	{MemoEvent} "currentEvent";
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoEvent} "currentEvent"
		public Group getGroup() { return cGroup; }
		
		//{MemoEvent}
		public Action getMemoEventAction_0() { return cMemoEventAction_0; }
		
		//"currentEvent"
		public Keyword getCurrentEventKeyword_1() { return cCurrentEventKeyword_1; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlarmsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlarmsAlarmEventParserRuleCall_2_0 = (RuleCall)cAlarmsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAlarmsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAlarmsAlarmEventParserRuleCall_3_1_0 = (RuleCall)cAlarmsAssignment_3_1.eContents().get(0);
		
		////Task :
		////	"Task" name=ID  "for" events += [Event] ( "," events += [Event] )* ";"
		////;
		/// *
		// * ===============================================
		// * Reaction - Alarm event
		// * ===============================================
		// * / Reaction:
		//	{Reaction} "react" alarms+=AlarmEvent ("or" alarms+=AlarmEvent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Reaction} "react" alarms+=AlarmEvent ("or" alarms+=AlarmEvent)*
		public Group getGroup() { return cGroup; }
		
		//{Reaction}
		public Action getReactionAction_0() { return cReactionAction_0; }
		
		//"react"
		public Keyword getReactKeyword_1() { return cReactKeyword_1; }
		
		//alarms+=AlarmEvent
		public Assignment getAlarmsAssignment_2() { return cAlarmsAssignment_2; }
		
		//AlarmEvent
		public RuleCall getAlarmsAlarmEventParserRuleCall_2_0() { return cAlarmsAlarmEventParserRuleCall_2_0; }
		
		//("or" alarms+=AlarmEvent)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"or"
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//alarms+=AlarmEvent
		public Assignment getAlarmsAssignment_3_1() { return cAlarmsAssignment_3_1; }
		
		//AlarmEvent
		public RuleCall getAlarmsAlarmEventParserRuleCall_3_1_0() { return cAlarmsAlarmEventParserRuleCall_3_1_0; }
	}
	public class AlarmEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.AlarmEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContinueEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AlarmEvent:
		//	NormalEvent | ContinueEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//NormalEvent | ContinueEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NormalEvent
		public RuleCall getNormalEventParserRuleCall_0() { return cNormalEventParserRuleCall_0; }
		
		//ContinueEvent
		public RuleCall getContinueEventParserRuleCall_1() { return cContinueEventParserRuleCall_1; }
	}
	public class NormalEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.NormalEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNormalEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEvEventCrossReference_2_0 = (CrossReference)cEvAssignment_2.eContents().get(0);
		private final RuleCall cEvEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEvEventCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPlanRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPlanRefPlanCrossReference_4_0 = (CrossReference)cPlanRefAssignment_4.eContents().get(0);
		private final RuleCall cPlanRefPlanIDTerminalRuleCall_4_0_1 = (RuleCall)cPlanRefPlanCrossReference_4_0.eContents().get(1);
		
		//NormalEvent:
		//	{NormalEvent} "event" ev=[Event] "->" planRef=[Plan];
		@Override public ParserRule getRule() { return rule; }
		
		//{NormalEvent} "event" ev=[Event] "->" planRef=[Plan]
		public Group getGroup() { return cGroup; }
		
		//{NormalEvent}
		public Action getNormalEventAction_0() { return cNormalEventAction_0; }
		
		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//ev=[Event]
		public Assignment getEvAssignment_2() { return cEvAssignment_2; }
		
		//[Event]
		public CrossReference getEvEventCrossReference_2_0() { return cEvEventCrossReference_2_0; }
		
		//ID
		public RuleCall getEvEventIDTerminalRuleCall_2_0_1() { return cEvEventIDTerminalRuleCall_2_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//planRef=[Plan]
		public Assignment getPlanRefAssignment_4() { return cPlanRefAssignment_4; }
		
		//[Plan]
		public CrossReference getPlanRefPlanCrossReference_4_0() { return cPlanRefPlanCrossReference_4_0; }
		
		//ID
		public RuleCall getPlanRefPlanIDTerminalRuleCall_4_0_1() { return cPlanRefPlanIDTerminalRuleCall_4_0_1; }
	}
	public class ContinueEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ContinueEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEvOccurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEvOccurEventCrossReference_2_0 = (CrossReference)cEvOccurAssignment_2.eContents().get(0);
		private final RuleCall cEvOccurEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEvOccurEventCrossReference_2_0.eContents().get(1);
		
		//ContinueEvent:
		//	{ContinueEvent} "when" evOccur=[Event];
		@Override public ParserRule getRule() { return rule; }
		
		//{ContinueEvent} "when" evOccur=[Event]
		public Group getGroup() { return cGroup; }
		
		//{ContinueEvent}
		public Action getContinueEventAction_0() { return cContinueEventAction_0; }
		
		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//evOccur=[Event]
		public Assignment getEvOccurAssignment_2() { return cEvOccurAssignment_2; }
		
		//[Event]
		public CrossReference getEvOccurEventCrossReference_2_0() { return cEvOccurEventCrossReference_2_0; }
		
		//ID
		public RuleCall getEvOccurEventIDTerminalRuleCall_2_0_1() { return cEvOccurEventIDTerminalRuleCall_2_0_1; }
	}
	public class VarOrQactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrQactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDestQActorCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestQActorIDTerminalRuleCall_1_0_1 = (RuleCall)cDestQActorCrossReference_1_0.eContents().get(1);
		
		/// *
		// * BASIC
		// * / VarOrQactor:
		//	var=Variable | dest=[QActor];
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | dest=[QActor]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//dest=[QActor]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//[QActor]
		public CrossReference getDestQActorCrossReference_1_0() { return cDestQActorCrossReference_1_0; }
		
		//ID
		public RuleCall getDestQActorIDTerminalRuleCall_1_0_1() { return cDestQActorIDTerminalRuleCall_1_0_1; }
	}
	public class VarOrIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstINTTerminalRuleCall_1_0 = (RuleCall)cConstAssignment_1.eContents().get(0);
		
		//VarOrInt:
		//	var=Variable | const=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | const=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//const=INT
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }
		
		//INT
		public RuleCall getConstINTTerminalRuleCall_1_0() { return cConstINTTerminalRuleCall_1_0; }
	}
	public class VarOrAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstPAtomicParserRuleCall_1_0 = (RuleCall)cConstAssignment_1.eContents().get(0);
		
		//VarOrAtomic:
		//	var=Variable | const=PAtomic;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | const=PAtomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//const=PAtomic
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }
		
		//PAtomic
		public RuleCall getConstPAtomicParserRuleCall_1_0() { return cConstPAtomicParserRuleCall_1_0; }
	}
	public class VarOrStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstSTRINGTerminalRuleCall_1_0 = (RuleCall)cConstAssignment_1.eContents().get(0);
		
		//VarOrString:
		//	var=Variable | const=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | const=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//const=STRING
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }
		
		//STRING
		public RuleCall getConstSTRINGTerminalRuleCall_1_0() { return cConstSTRINGTerminalRuleCall_1_0; }
	}
	public class VarOrPStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrPStruct");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cPsrtuctAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPsrtuctPStructParserRuleCall_1_0 = (RuleCall)cPsrtuctAssignment_1.eContents().get(0);
		
		//VarOrPStruct:
		//	var=Variable | psrtuct=PStruct;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | psrtuct=PStruct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//psrtuct=PStruct
		public Assignment getPsrtuctAssignment_1() { return cPsrtuctAssignment_1; }
		
		//PStruct
		public RuleCall getPsrtuctPStructParserRuleCall_1_0() { return cPsrtuctPStructParserRuleCall_1_0; }
	}
	public class VarOrPheadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrPhead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cPheadAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPheadPHeadParserRuleCall_1_0 = (RuleCall)cPheadAssignment_1.eContents().get(0);
		
		//VarOrPhead:
		//	var=Variable | phead=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | phead=PHead
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//phead=PHead
		public Assignment getPheadAssignment_1() { return cPheadAssignment_1; }
		
		//PHead
		public RuleCall getPheadPHeadParserRuleCall_1_0() { return cPheadPHeadParserRuleCall_1_0; }
	}
	public class VarOrAtomOrPStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VarOrAtomOrPStruct");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cPsrtuctAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPsrtuctPStructParserRuleCall_1_0 = (RuleCall)cPsrtuctAssignment_1.eContents().get(0);
		private final Assignment cAtomAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAtomPAtomicParserRuleCall_2_0 = (RuleCall)cAtomAssignment_2.eContents().get(0);
		
		//VarOrAtomOrPStruct:
		//	var=Variable | psrtuct=PStruct | atom=PAtomic;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | psrtuct=PStruct | atom=PAtomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//psrtuct=PStruct
		public Assignment getPsrtuctAssignment_1() { return cPsrtuctAssignment_1; }
		
		//PStruct
		public RuleCall getPsrtuctPStructParserRuleCall_1_0() { return cPsrtuctPStructParserRuleCall_1_0; }
		
		//atom=PAtomic
		public Assignment getAtomAssignment_2() { return cAtomAssignment_2; }
		
		//PAtomic
		public RuleCall getAtomPAtomicParserRuleCall_2_0() { return cAtomPAtomicParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	{Variable} varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} varName=VARID
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class TimeLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.TimeLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cMsecAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cMsecINTTerminalRuleCall_3_0_0 = (RuleCall)cMsecAssignment_3_0.eContents().get(0);
		private final Assignment cVarAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_3_1_0 = (RuleCall)cVarAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimeLimit:
		//	{TimeLimit} "time" "(" (msec=INT | var=Variable) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeLimit} "time" "(" (msec=INT | var=Variable) ")"
		public Group getGroup() { return cGroup; }
		
		//{TimeLimit}
		public Action getTimeLimitAction_0() { return cTimeLimitAction_0; }
		
		//"time"
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(msec=INT | var=Variable)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//msec=INT
		public Assignment getMsecAssignment_3_0() { return cMsecAssignment_3_0; }
		
		//INT
		public RuleCall getMsecINTTerminalRuleCall_3_0_0() { return cMsecINTTerminalRuleCall_3_0_0; }
		
		//var=Variable
		public Assignment getVarAssignment_3_1() { return cVarAssignment_3_1; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_3_1_0() { return cVarVariableParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComponentIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.ComponentIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentIPAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHostKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostSTRINGTerminalRuleCall_3_0 = (RuleCall)cHostAssignment_3.eContents().get(0);
		private final Keyword cPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortINTTerminalRuleCall_5_0 = (RuleCall)cPortAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentIP:
		//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]"
		public Group getGroup() { return cGroup; }
		
		//{ComponentIP}
		public Action getComponentIPAction_0() { return cComponentIPAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//"host="
		public Keyword getHostKeyword_2() { return cHostKeyword_2; }
		
		//host=STRING
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_3_0() { return cHostSTRINGTerminalRuleCall_3_0; }
		
		//"port="
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }
		
		//port=INT
		public Assignment getPortAssignment_5() { return cPortAssignment_5; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_5_0() { return cPortINTTerminalRuleCall_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class MoveFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.MoveFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFnameVarOrStringParserRuleCall_3_0 = (RuleCall)cFnameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MoveFile:
		//	{MoveFile} "file" "(" fname=VarOrString ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveFile} "file" "(" fname=VarOrString ")"
		public Group getGroup() { return cGroup; }
		
		//{MoveFile}
		public Action getMoveFileAction_0() { return cMoveFileAction_0; }
		
		//"file"
		public Keyword getFileKeyword_1() { return cFileKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//fname=VarOrString
		public Assignment getFnameAssignment_3() { return cFnameAssignment_3; }
		
		//VarOrString
		public RuleCall getFnameVarOrStringParserRuleCall_3_0() { return cFnameVarOrStringParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class WindowColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.WindowColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWhiteWhiteKeyword_0_0 = (Keyword)cWhiteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGrayEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGrayGrayKeyword_1_0 = (Keyword)cGrayEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBlueBlueKeyword_2_0 = (Keyword)cBlueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreenGreenKeyword_3_0 = (Keyword)cGreenEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cYellowEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cYellowYellowKeyword_4_0 = (Keyword)cYellowEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCyanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCyanCyanKeyword_5_0 = (Keyword)cCyanEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum WindowColor:
		//	white | gray | blue | green | yellow | cyan;
		public EnumRule getRule() { return rule; }
		
		//white | gray | blue | green | yellow | cyan
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_0() { return cWhiteEnumLiteralDeclaration_0; }
		
		//"white"
		public Keyword getWhiteWhiteKeyword_0_0() { return cWhiteWhiteKeyword_0_0; }
		
		//gray
		public EnumLiteralDeclaration getGrayEnumLiteralDeclaration_1() { return cGrayEnumLiteralDeclaration_1; }
		
		//"gray"
		public Keyword getGrayGrayKeyword_1_0() { return cGrayGrayKeyword_1_0; }
		
		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_2() { return cBlueEnumLiteralDeclaration_2; }
		
		//"blue"
		public Keyword getBlueBlueKeyword_2_0() { return cBlueBlueKeyword_2_0; }
		
		//green
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_3() { return cGreenEnumLiteralDeclaration_3; }
		
		//"green"
		public Keyword getGreenGreenKeyword_3_0() { return cGreenGreenKeyword_3_0; }
		
		//yellow
		public EnumLiteralDeclaration getYellowEnumLiteralDeclaration_4() { return cYellowEnumLiteralDeclaration_4; }
		
		//"yellow"
		public Keyword getYellowYellowKeyword_4_0() { return cYellowYellowKeyword_4_0; }
		
		//cyan
		public EnumLiteralDeclaration getCyanEnumLiteralDeclaration_5() { return cCyanEnumLiteralDeclaration_5; }
		
		//"cyan"
		public Keyword getCyanCyanKeyword_5_0() { return cCyanCyanKeyword_5_0; }
	}
	
	private final QActorSystemElements pQActorSystem;
	private final QActorSystemSpecElements pQActorSystemSpec;
	private final RobotElements pRobot;
	private final MessageElements pMessage;
	private final OutOnlyMessageElements pOutOnlyMessage;
	private final OutInMessageElements pOutInMessage;
	private final EventElements pEvent;
	private final SignalElements pSignal;
	private final TokenElements pToken;
	private final DispatchElements pDispatch;
	private final RequestElements pRequest;
	private final InvitationElements pInvitation;
	private final ContextElements pContext;
	private final QActorElements pQActor;
	private final RuleElements pRule;
	private final TerminalRule tVARID;
	private final PHeadElements pPHead;
	private final PTermElements pPTerm;
	private final PAtomElements pPAtom;
	private final PAtomStringElements pPAtomString;
	private final PAtomicElements pPAtomic;
	private final PAtomNumElements pPAtomNum;
	private final PStructElements pPStruct;
	private final PActorCallElements pPActorCall;
	private final PPredefElements pPPredef;
	private final PIsElements pPIs;
	private final PAtomCutElements pPAtomCut;
	private final DataElements pData;
	private final IntegerDataElements pIntegerData;
	private final StringDataElements pStringData;
	private final ActionElements pAction;
	private final PlanElements pPlan;
	private final PlanActionElements pPlanAction;
	private final GuardElements pGuard;
	private final GuardPredicateElements pGuardPredicate;
	private final GuardPredicateRemovableElements pGuardPredicateRemovable;
	private final GuardPredicateStableElements pGuardPredicateStable;
	private final MoveElements pMove;
	private final ActionMoveElements pActionMove;
	private final ExecuteActionElements pExecuteAction;
	private final SolveGoalElements pSolveGoal;
	private final DemoElements pDemo;
	private final ActorOpElements pActorOp;
	private final BasicRobotMoveElements pBasicRobotMove;
	private final BasicMoveElements pBasicMove;
	private final PrintElements pPrint;
	private final PrintCurrentEventElements pPrintCurrentEvent;
	private final PrintCurrentMessageElements pPrintCurrentMessage;
	private final MemoCurrentEventElements pMemoCurrentEvent;
	private final MemoCurrentMessageElements pMemoCurrentMessage;
	private final PlanMoveElements pPlanMove;
	private final GetActivationEventElements pGetActivationEvent;
	private final GetSensedEventElements pGetSensedEvent;
	private final LoadPlanElements pLoadPlan;
	private final RunPlanElements pRunPlan;
	private final ResumePlanElements pResumePlan;
	private final SuspendPlanElements pSuspendPlan;
	private final RepeatPlanElements pRepeatPlan;
	private final SwitchPlanElements pSwitchPlan;
	private final EndPlanElements pEndPlan;
	private final EndActorElements pEndActor;
	private final GuardMoveElements pGuardMove;
	private final AddRuleElements pAddRule;
	private final RemoveRuleElements pRemoveRule;
	private final MessageMoveElements pMessageMove;
	private final SendDispatchElements pSendDispatch;
	private final SendRequestElements pSendRequest;
	private final ReplyToCallerElements pReplyToCaller;
	private final ReceiveMsgElements pReceiveMsg;
	private final MsgSpecElements pMsgSpec;
	private final OnReceiveMsgElements pOnReceiveMsg;
	private final MsgSelectElements pMsgSelect;
	private final RaiseEventElements pRaiseEvent;
	private final SenseEventElements pSenseEvent;
	private final MsgSwitchElements pMsgSwitch;
	private final EventSwitchElements pEventSwitch;
	private final ContinuationElements pContinuation;
	private final ExtensionMoveElements pExtensionMove;
	private final PhotoElements pPhoto;
	private final SoundElements pSound;
	private final VideoElements pVideo;
	private final DelayElements pDelay;
	private final AnswerEventElements pAnswerEvent;
	private final EventHandlerElements pEventHandler;
	private final EventHandlerBodyElements pEventHandlerBody;
	private final EventHandlerOperationElements pEventHandlerOperation;
	private final MemoOperationElements pMemoOperation;
	private final SolveOperationElements pSolveOperation;
	private final SendEventAsDispatchElements pSendEventAsDispatch;
	private final MemoRuleElements pMemoRule;
	private final MemoEventElements pMemoEvent;
	private final ReactionElements pReaction;
	private final AlarmEventElements pAlarmEvent;
	private final NormalEventElements pNormalEvent;
	private final ContinueEventElements pContinueEvent;
	private final VarOrQactorElements pVarOrQactor;
	private final VarOrIntElements pVarOrInt;
	private final VarOrAtomicElements pVarOrAtomic;
	private final VarOrStringElements pVarOrString;
	private final VarOrPStructElements pVarOrPStruct;
	private final VarOrPheadElements pVarOrPhead;
	private final VarOrAtomOrPStructElements pVarOrAtomOrPStruct;
	private final VariableElements pVariable;
	private final TimeLimitElements pTimeLimit;
	private final ComponentIPElements pComponentIP;
	private final MoveFileElements pMoveFile;
	private final WindowColorElements eWindowColor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QADockerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQActorSystem = new QActorSystemElements();
		this.pQActorSystemSpec = new QActorSystemSpecElements();
		this.pRobot = new RobotElements();
		this.pMessage = new MessageElements();
		this.pOutOnlyMessage = new OutOnlyMessageElements();
		this.pOutInMessage = new OutInMessageElements();
		this.pEvent = new EventElements();
		this.pSignal = new SignalElements();
		this.pToken = new TokenElements();
		this.pDispatch = new DispatchElements();
		this.pRequest = new RequestElements();
		this.pInvitation = new InvitationElements();
		this.pContext = new ContextElements();
		this.pQActor = new QActorElements();
		this.pRule = new RuleElements();
		this.tVARID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.qactor.QADocker.VARID");
		this.pPHead = new PHeadElements();
		this.pPTerm = new PTermElements();
		this.pPAtom = new PAtomElements();
		this.pPAtomString = new PAtomStringElements();
		this.pPAtomic = new PAtomicElements();
		this.pPAtomNum = new PAtomNumElements();
		this.pPStruct = new PStructElements();
		this.pPActorCall = new PActorCallElements();
		this.pPPredef = new PPredefElements();
		this.pPIs = new PIsElements();
		this.pPAtomCut = new PAtomCutElements();
		this.pData = new DataElements();
		this.pIntegerData = new IntegerDataElements();
		this.pStringData = new StringDataElements();
		this.pAction = new ActionElements();
		this.pPlan = new PlanElements();
		this.pPlanAction = new PlanActionElements();
		this.pGuard = new GuardElements();
		this.pGuardPredicate = new GuardPredicateElements();
		this.pGuardPredicateRemovable = new GuardPredicateRemovableElements();
		this.pGuardPredicateStable = new GuardPredicateStableElements();
		this.pMove = new MoveElements();
		this.pActionMove = new ActionMoveElements();
		this.pExecuteAction = new ExecuteActionElements();
		this.pSolveGoal = new SolveGoalElements();
		this.pDemo = new DemoElements();
		this.pActorOp = new ActorOpElements();
		this.pBasicRobotMove = new BasicRobotMoveElements();
		this.pBasicMove = new BasicMoveElements();
		this.pPrint = new PrintElements();
		this.pPrintCurrentEvent = new PrintCurrentEventElements();
		this.pPrintCurrentMessage = new PrintCurrentMessageElements();
		this.pMemoCurrentEvent = new MemoCurrentEventElements();
		this.pMemoCurrentMessage = new MemoCurrentMessageElements();
		this.pPlanMove = new PlanMoveElements();
		this.pGetActivationEvent = new GetActivationEventElements();
		this.pGetSensedEvent = new GetSensedEventElements();
		this.pLoadPlan = new LoadPlanElements();
		this.pRunPlan = new RunPlanElements();
		this.pResumePlan = new ResumePlanElements();
		this.pSuspendPlan = new SuspendPlanElements();
		this.pRepeatPlan = new RepeatPlanElements();
		this.pSwitchPlan = new SwitchPlanElements();
		this.pEndPlan = new EndPlanElements();
		this.pEndActor = new EndActorElements();
		this.pGuardMove = new GuardMoveElements();
		this.pAddRule = new AddRuleElements();
		this.pRemoveRule = new RemoveRuleElements();
		this.pMessageMove = new MessageMoveElements();
		this.pSendDispatch = new SendDispatchElements();
		this.pSendRequest = new SendRequestElements();
		this.pReplyToCaller = new ReplyToCallerElements();
		this.pReceiveMsg = new ReceiveMsgElements();
		this.pMsgSpec = new MsgSpecElements();
		this.pOnReceiveMsg = new OnReceiveMsgElements();
		this.pMsgSelect = new MsgSelectElements();
		this.pRaiseEvent = new RaiseEventElements();
		this.pSenseEvent = new SenseEventElements();
		this.pMsgSwitch = new MsgSwitchElements();
		this.pEventSwitch = new EventSwitchElements();
		this.pContinuation = new ContinuationElements();
		this.pExtensionMove = new ExtensionMoveElements();
		this.pPhoto = new PhotoElements();
		this.pSound = new SoundElements();
		this.pVideo = new VideoElements();
		this.pDelay = new DelayElements();
		this.pAnswerEvent = new AnswerEventElements();
		this.pEventHandler = new EventHandlerElements();
		this.pEventHandlerBody = new EventHandlerBodyElements();
		this.pEventHandlerOperation = new EventHandlerOperationElements();
		this.pMemoOperation = new MemoOperationElements();
		this.pSolveOperation = new SolveOperationElements();
		this.pSendEventAsDispatch = new SendEventAsDispatchElements();
		this.pMemoRule = new MemoRuleElements();
		this.pMemoEvent = new MemoEventElements();
		this.pReaction = new ReactionElements();
		this.pAlarmEvent = new AlarmEventElements();
		this.pNormalEvent = new NormalEventElements();
		this.pContinueEvent = new ContinueEventElements();
		this.pVarOrQactor = new VarOrQactorElements();
		this.pVarOrInt = new VarOrIntElements();
		this.pVarOrAtomic = new VarOrAtomicElements();
		this.pVarOrString = new VarOrStringElements();
		this.pVarOrPStruct = new VarOrPStructElements();
		this.pVarOrPhead = new VarOrPheadElements();
		this.pVarOrAtomOrPStruct = new VarOrAtomOrPStructElements();
		this.pVariable = new VariableElements();
		this.pTimeLimit = new TimeLimitElements();
		this.pComponentIP = new ComponentIPElements();
		this.pMoveFile = new MoveFileElements();
		this.eWindowColor = new WindowColorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.qactor.QADocker".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QActorSystem:
	//	"System" spec=QActorSystemSpec;
	public QActorSystemElements getQActorSystemAccess() {
		return pQActorSystem;
	}
	
	public ParserRule getQActorSystemRule() {
		return getQActorSystemAccess().getRule();
	}
	
	//QActorSystemSpec:
	//	name=ID testing?="-testing"?
	//	message+=Message*
	//	context+=Context*
	//	actor+=QActor*
	//	robot=Robot? //Specialized actor see it.unibo.xtext.qactor.robot
	//;
	public QActorSystemSpecElements getQActorSystemSpecAccess() {
		return pQActorSystemSpec;
	}
	
	public ParserRule getQActorSystemSpecRule() {
		return getQActorSystemSpecAccess().getRule();
	}
	
	/// *
	// * -------------------------------------------------
	// * TODO: 
	// * ( actor     += QGenericActor   )*
	// * QGenericActor : QActor | Robot ...
	// * -------------------------------------------------
	// * / //Compoment : QActor | Robot ; 
	//Robot:
	//	name=ID actor=QActor "TDDO";
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	/// *
	// * ------------------------------------------
	// * MESSAGE
	// * ------------------------------------------
	// * / Message:
	//	OutOnlyMessage | OutInMessage;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//OutOnlyMessage:
	//	Dispatch | Event | Signal | Token;
	public OutOnlyMessageElements getOutOnlyMessageAccess() {
		return pOutOnlyMessage;
	}
	
	public ParserRule getOutOnlyMessageRule() {
		return getOutOnlyMessageAccess().getRule();
	}
	
	//OutInMessage:
	//	Request | Invitation;
	public OutInMessageElements getOutInMessageAccess() {
		return pOutInMessage;
	}
	
	public ParserRule getOutInMessageRule() {
		return getOutInMessageAccess().getRule();
	}
	
	//Event:
	//	"Event" name=ID ":" msg=PHead;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Signal:
	//	"Signal" name=ID ":" msg=PHead;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Token:
	//	"Token" name=ID ":" msg=PHead;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//Dispatch:
	//	"Dispatch" name=ID ":" msg=PHead;
	public DispatchElements getDispatchAccess() {
		return pDispatch;
	}
	
	public ParserRule getDispatchRule() {
		return getDispatchAccess().getRule();
	}
	
	//Request:
	//	"Request" name=ID ":" msg=PHead;
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//Invitation:
	//	"Invitation" name=ID ":" msg=PHead;
	public InvitationElements getInvitationAccess() {
		return pInvitation;
	}
	
	public ParserRule getInvitationRule() {
		return getInvitationAccess().getRule();
	}
	
	/// * 
	// * Context
	// * / Context:
	//	"Context" name=ID "ip" ip=ComponentIP (env?="-g" color=WindowColor)?
	//	standalone?="-standalone"?
	//	httpserver?="-httpserver"?
	//	handler+=EventHandler*;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	/// * 
	// * ===========================================
	// * QACTOR
	// * ===========================================
	// * / QActor:
	//	"QActor" name=ID "context" context=[Context] (env?="-g" color=WindowColor)?
	//	"{" ("Rules" "{" rules+=Rule* "}")?
	//	data+=Data*
	//	action+=Action*
	//	plans+=Plan*
	//	"}";
	public QActorElements getQActorAccess() {
		return pQActor;
	}
	
	public ParserRule getQActorRule() {
		return getQActorAccess().getRule();
	}
	
	/// *
	//  * Rule (Aguzzi revised)
	//  * / Rule:
	//	head=PHead (":-" body+=PTerm (',' body+=PTerm)*)? ".";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//terminal VARID:
	//	('A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARIDRule() {
		return tVARID;
	}
	
	//PHead:
	//	PAtom | PStruct;
	public PHeadElements getPHeadAccess() {
		return pPHead;
	}
	
	public ParserRule getPHeadRule() {
		return getPHeadAccess().getRule();
	}
	
	//PTerm:
	//	PAtom | PStruct | PPredef | PActorCall;
	public PTermElements getPTermAccess() {
		return pPTerm;
	}
	
	public ParserRule getPTermRule() {
		return getPTermAccess().getRule();
	}
	
	//PAtom:
	//	PAtomString | Variable | PAtomNum | PAtomic //| Data
	//;
	public PAtomElements getPAtomAccess() {
		return pPAtom;
	}
	
	public ParserRule getPAtomRule() {
		return getPAtomAccess().getRule();
	}
	
	//PAtomString:
	//	val=STRING;
	public PAtomStringElements getPAtomStringAccess() {
		return pPAtomString;
	}
	
	public ParserRule getPAtomStringRule() {
		return getPAtomStringAccess().getRule();
	}
	
	//PAtomic:
	//	val=ID;
	public PAtomicElements getPAtomicAccess() {
		return pPAtomic;
	}
	
	public ParserRule getPAtomicRule() {
		return getPAtomicAccess().getRule();
	}
	
	//PAtomNum:
	//	val=INT;
	public PAtomNumElements getPAtomNumAccess() {
		return pPAtomNum;
	}
	
	public ParserRule getPAtomNumRule() {
		return getPAtomNumAccess().getRule();
	}
	
	//PStruct:
	//	functor=ID "(" msgArg+=PTerm? ("," msgArg+=PTerm)* ")";
	public PStructElements getPStructAccess() {
		return pPStruct;
	}
	
	public ParserRule getPStructRule() {
		return getPStructAccess().getRule();
	}
	
	//PActorCall:
	//	"Actor" "<-" body=PStruct;
	public PActorCallElements getPActorCallAccess() {
		return pPActorCall;
	}
	
	public ParserRule getPActorCallRule() {
		return getPActorCallAccess().getRule();
	}
	
	/// *
	// * Added by Aguzzi
	// * / //PPredicate :
	////	PStruct | PPredef
	////;
	//PPredef:
	//	PAtomCut | PIs;
	public PPredefElements getPPredefAccess() {
		return pPPredef;
	}
	
	public ParserRule getPPredefRule() {
		return getPPredefAccess().getRule();
	}
	
	//PIs:
	//	varout=Variable "is" varin=Variable "+" num=PAtomNum;
	public PIsElements getPIsAccess() {
		return pPIs;
	}
	
	public ParserRule getPIsRule() {
		return getPIsAccess().getRule();
	}
	
	//PAtomCut:
	//	{PAtomCut} "!";
	public PAtomCutElements getPAtomCutAccess() {
		return pPAtomCut;
	}
	
	public ParserRule getPAtomCutRule() {
		return getPAtomCutAccess().getRule();
	}
	
	/// *
	// * End Aguzzi
	// * / / *
	// * Data 
	// * / Data:
	//	IntegerData | StringData;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//IntegerData:
	//	{IntegerData} "int" name=ID "=" value=INT;
	public IntegerDataElements getIntegerDataAccess() {
		return pIntegerData;
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}
	
	//StringData:
	//	{StringData} "String" name=ID "=" value=STRING;
	public StringDataElements getStringDataAccess() {
		return pStringData;
	}
	
	public ParserRule getStringDataRule() {
		return getStringDataAccess().getRule();
	}
	
	/// *
	// * Action 
	// * / Action:
	//	"Action" name=ID undoable?="undoable"? ("maxtime" "(" msec=INT ")") ("arg" arg=PStruct)? ";";
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	/// *
	// * PLAN
	// * / Plan:
	//	"Plan" name=ID normal?="normal"? resume?="resumeLastPlan"?
	//	action+=PlanAction (";" action+=PlanAction)*;
	public PlanElements getPlanAccess() {
		return pPlan;
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}
	
	//PlanAction:
	//	guard=Guard? move=Move react=Reaction? ("else" elsemove=Move elsereact=Reaction?)?;
	public PlanActionElements getPlanActionAccess() {
		return pPlanAction;
	}
	
	public ParserRule getPlanActionRule() {
		return getPlanActionAccess().getRule();
	}
	
	/// *
	// * Guard   
	// * / Guard:
	//	{Guard} "[" not?="not"? guardspec=GuardPredicate "]";
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	////GuardSpec:
	//// 	GuardQuery //| GuardWait
	////;
	////GuardWait:
	////	name="!!" evId=[Event] ( "and" (not?="not")? guard = GuardQuery )?
	////;
	////GuardQuery :
	////	GuardPredicate //GuardAtom | 
	////;
	////GuardAtom :
	////	atom=ID //(stay?="!")? 
	////;
	//GuardPredicate:
	//	GuardPredicateStable | GuardPredicateRemovable;
	public GuardPredicateElements getGuardPredicateAccess() {
		return pGuardPredicate;
	}
	
	public ParserRule getGuardPredicateRule() {
		return getGuardPredicateAccess().getRule();
	}
	
	//GuardPredicateRemovable:
	//	{GuardPredicateRemovable} "??" pred=PTerm;
	public GuardPredicateRemovableElements getGuardPredicateRemovableAccess() {
		return pGuardPredicateRemovable;
	}
	
	public ParserRule getGuardPredicateRemovableRule() {
		return getGuardPredicateRemovableAccess().getRule();
	}
	
	//GuardPredicateStable:
	//	{GuardPredicateStable} "!?" pred=PTerm;
	public GuardPredicateStableElements getGuardPredicateStableAccess() {
		return pGuardPredicateStable;
	}
	
	public ParserRule getGuardPredicateStableRule() {
		return getGuardPredicateStableAccess().getRule();
	}
	
	/// * /
	//Predicate:
	//	functor=ID "(" args+=GuardArg ( "," args+=GuardArg )* ")"
	//;
	//GuardArg :
	// 	 VarArg	 | AtomArg | StringArg
	//;
	//VarArg:
	//	atom=ID	//UPCASE
	//;
	//AtomArg:
	//	IntAtonArg //| SymbolAtomArg
	//;
	//IntAtonArg:	atom=INT ;
	////SymbolAtomArg:	atom=ATOM ;
	////terminal ATOM :  ('a'..'z' ) ('a'..'z')* ;
	//StringArg: atom=STRING ; 
	// * / / *
	// * -----------------------------------
	// * MOVE
	// * -----------------------------------
	// * / Move:
	//	ActionMove | MessageMove | ExtensionMove | BasicMove | PlanMove | GuardMove | BasicRobotMove;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//ActionMove:
	//	ExecuteAction | SolveGoal | Demo | ActorOp;
	public ActionMoveElements getActionMoveAccess() {
		return pActionMove;
	}
	
	public ParserRule getActionMoveRule() {
		return getActionMoveAccess().getRule();
	}
	
	//ExecuteAction:
	//	{ExecuteAction} "execute" action=[Action] ("with" arg=PHead)? | "dosentence" sentence=PHead;
	public ExecuteActionElements getExecuteActionAccess() {
		return pExecuteAction;
	}
	
	public ParserRule getExecuteActionRule() {
		return getExecuteActionAccess().getRule();
	}
	
	//SolveGoal:
	//	{SolveGoal} "solve" goal=PHead duration=TimeLimit ("onFailSwitchTo" plan=[Plan])?;
	public SolveGoalElements getSolveGoalAccess() {
		return pSolveGoal;
	}
	
	public ParserRule getSolveGoalRule() {
		return getSolveGoalAccess().getRule();
	}
	
	//Demo:
	//	{Demo} "demo" goal=PHead ("onFailSwitchTo" plan=[Plan])?;
	public DemoElements getDemoAccess() {
		return pDemo;
	}
	
	public ParserRule getDemoRule() {
		return getDemoAccess().getRule();
	}
	
	//ActorOp:
	//	{ActorOp} "actorOp" goal=PHead ("onFailSwitchTo" plan=[Plan])?;
	public ActorOpElements getActorOpAccess() {
		return pActorOp;
	}
	
	public ParserRule getActorOpRule() {
		return getActorOpAccess().getRule();
	}
	
	//BasicRobotMove:
	//	{BasicRobotMove} "dummyRobotMove" //(re)defined in it.unibo.qactor.robot
	//;
	public BasicRobotMoveElements getBasicRobotMoveAccess() {
		return pBasicRobotMove;
	}
	
	public ParserRule getBasicRobotMoveRule() {
		return getBasicRobotMoveAccess().getRule();
	}
	
	//BasicMove:
	//	Print | PrintCurrentEvent | PrintCurrentMessage | MemoCurrentEvent | MemoCurrentMessage;
	public BasicMoveElements getBasicMoveAccess() {
		return pBasicMove;
	}
	
	public ParserRule getBasicMoveRule() {
		return getBasicMoveAccess().getRule();
	}
	
	//Print:
	//	{Print} "println" "(" args=PHead ")" //MoveArgs  
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//PrintCurrentEvent:
	//	{PrintCurrentEvent} "printCurrentEvent" memo?="-memo"?;
	public PrintCurrentEventElements getPrintCurrentEventAccess() {
		return pPrintCurrentEvent;
	}
	
	public ParserRule getPrintCurrentEventRule() {
		return getPrintCurrentEventAccess().getRule();
	}
	
	//PrintCurrentMessage:
	//	{PrintCurrentMessage} "printCurrentMessage" memo?="-memo"?;
	public PrintCurrentMessageElements getPrintCurrentMessageAccess() {
		return pPrintCurrentMessage;
	}
	
	public ParserRule getPrintCurrentMessageRule() {
		return getPrintCurrentMessageAccess().getRule();
	}
	
	//MemoCurrentEvent:
	//	{MemoCurrentEvent} "memoCurrentEvent" lastonly?="-lastonly"?;
	public MemoCurrentEventElements getMemoCurrentEventAccess() {
		return pMemoCurrentEvent;
	}
	
	public ParserRule getMemoCurrentEventRule() {
		return getMemoCurrentEventAccess().getRule();
	}
	
	//MemoCurrentMessage:
	//	{MemoCurrentMessage} "memoCurrentMessage" lastonly?="-lastonly"?;
	public MemoCurrentMessageElements getMemoCurrentMessageAccess() {
		return pMemoCurrentMessage;
	}
	
	public ParserRule getMemoCurrentMessageRule() {
		return getMemoCurrentMessageAccess().getRule();
	}
	
	/// *
	// * -----------------------------------
	// * PlanMove
	// * -----------------------------------
	// * / PlanMove:
	//	GetActivationEvent | GetSensedEvent | LoadPlan | RunPlan | ResumePlan | RepeatPlan | SwitchPlan | SuspendPlan |
	//	EndPlan | EndActor;
	public PlanMoveElements getPlanMoveAccess() {
		return pPlanMove;
	}
	
	public ParserRule getPlanMoveRule() {
		return getPlanMoveAccess().getRule();
	}
	
	//GetActivationEvent:
	//	{GetActivationEvent} "getActivationEvent" var=Variable //used in a plan to know the event that triggers it
	//;
	public GetActivationEventElements getGetActivationEventAccess() {
		return pGetActivationEvent;
	}
	
	public ParserRule getGetActivationEventRule() {
		return getGetActivationEventAccess().getRule();
	}
	
	//GetSensedEvent:
	//	{GetSensedEvent} "getSensedEvent" var=Variable //used in a actor to know the event that resumes the actor
	//;
	public GetSensedEventElements getGetSensedEventAccess() {
		return pGetSensedEvent;
	}
	
	public ParserRule getGetSensedEventRule() {
		return getGetSensedEventAccess().getRule();
	}
	
	//LoadPlan:
	//	{LoadPlan} "loadPlan" fname=VarOrString;
	public LoadPlanElements getLoadPlanAccess() {
		return pLoadPlan;
	}
	
	public ParserRule getLoadPlanRule() {
		return getLoadPlanAccess().getRule();
	}
	
	//RunPlan:
	//	{RunPlan} "runPlan" plainid=VarOrAtomic duration=TimeLimit;
	public RunPlanElements getRunPlanAccess() {
		return pRunPlan;
	}
	
	public ParserRule getRunPlanRule() {
		return getRunPlanAccess().getRule();
	}
	
	//ResumePlan:
	//	{ResumePlan} "resumeLastPlan";
	public ResumePlanElements getResumePlanAccess() {
		return pResumePlan;
	}
	
	public ParserRule getResumePlanRule() {
		return getResumePlanAccess().getRule();
	}
	
	//SuspendPlan:
	//	{SuspendPlan} "suspendLastPlan";
	public SuspendPlanElements getSuspendPlanAccess() {
		return pSuspendPlan;
	}
	
	public ParserRule getSuspendPlanRule() {
		return getSuspendPlanAccess().getRule();
	}
	
	//RepeatPlan:
	//	{RepeatPlan} "repeatPlan" niter=VarOrInt?;
	public RepeatPlanElements getRepeatPlanAccess() {
		return pRepeatPlan;
	}
	
	public ParserRule getRepeatPlanRule() {
		return getRepeatPlanAccess().getRule();
	}
	
	//SwitchPlan:
	//	{SwitchPlan} "switchToPlan" plan=[Plan];
	public SwitchPlanElements getSwitchPlanAccess() {
		return pSwitchPlan;
	}
	
	public ParserRule getSwitchPlanRule() {
		return getSwitchPlanAccess().getRule();
	}
	
	//EndPlan:
	//	{EndPlan} "endPlan" msg=STRING;
	public EndPlanElements getEndPlanAccess() {
		return pEndPlan;
	}
	
	public ParserRule getEndPlanRule() {
		return getEndPlanAccess().getRule();
	}
	
	//EndActor:
	//	{EndActor} "endQActor" msg=STRING;
	public EndActorElements getEndActorAccess() {
		return pEndActor;
	}
	
	public ParserRule getEndActorRule() {
		return getEndActorAccess().getRule();
	}
	
	/// *
	// * -----------------------------------
	// * GuardMove 
	// * -----------------------------------
	// * / GuardMove:
	//	AddRule | RemoveRule;
	public GuardMoveElements getGuardMoveAccess() {
		return pGuardMove;
	}
	
	public ParserRule getGuardMoveRule() {
		return getGuardMoveAccess().getRule();
	}
	
	//AddRule:
	//	{AddRule} "addRule" rule=PHead;
	public AddRuleElements getAddRuleAccess() {
		return pAddRule;
	}
	
	public ParserRule getAddRuleRule() {
		return getAddRuleAccess().getRule();
	}
	
	//RemoveRule:
	//	{RemoveRule} "removeRule" rule=PHead;
	public RemoveRuleElements getRemoveRuleAccess() {
		return pRemoveRule;
	}
	
	public ParserRule getRemoveRuleRule() {
		return getRemoveRuleAccess().getRule();
	}
	
	/// *
	// * -----------------------------------
	// * MessageMove
	// * -----------------------------------
	// * / MessageMove:
	//	SendDispatch | SendRequest | ReplyToCaller | ReceiveMsg | OnReceiveMsg | MsgSelect | RaiseEvent | SenseEvent |
	//	MsgSwitch | EventSwitch;
	public MessageMoveElements getMessageMoveAccess() {
		return pMessageMove;
	}
	
	public ParserRule getMessageMoveRule() {
		return getMessageMoveAccess().getRule();
	}
	
	//SendDispatch:
	//	{SendDispatch} "forward" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead;
	public SendDispatchElements getSendDispatchAccess() {
		return pSendDispatch;
	}
	
	public ParserRule getSendDispatchRule() {
		return getSendDispatchAccess().getRule();
	}
	
	//SendRequest:
	//	{SendRequest} "demand" dest=VarOrQactor "-m" msgref=[Message] ":" val=PHead "answHandle"?;
	public SendRequestElements getSendRequestAccess() {
		return pSendRequest;
	}
	
	public ParserRule getSendRequestRule() {
		return getSendRequestAccess().getRule();
	}
	
	////  SendAnswer :
	////  	{} "answerTo" dest=ID "-m" id=[Message] "seqnum" seqnum=VarOrString 
	////  	(":" val = VarOrPStruct )?
	////   ;
	//ReplyToCaller:
	//	{ReplyToCaller} "replyToCaller" "-m" msgref=[Message] ":" val=PHead;
	public ReplyToCallerElements getReplyToCallerAccess() {
		return pReplyToCaller;
	}
	
	public ParserRule getReplyToCallerRule() {
		return getReplyToCallerAccess().getRule();
	}
	
	//ReceiveMsg:
	//	{ReceiveMsg} "receiveMsg" duration=TimeLimit spec=MsgSpec?;
	public ReceiveMsgElements getReceiveMsgAccess() {
		return pReceiveMsg;
	}
	
	public ParserRule getReceiveMsgRule() {
		return getReceiveMsgAccess().getRule();
	}
	
	////AKKA
	//// OnReceive :
	//// 	"onReceive" duration=TimeLimit (spec=MsgSpec)? "->" move = SwitchPlan 
	//// ;
	//MsgSpec:
	//	"-m" msg=[Message] "sender" sender=VarOrAtomic "content" content=PHead;
	public MsgSpecElements getMsgSpecAccess() {
		return pMsgSpec;
	}
	
	public ParserRule getMsgSpecRule() {
		return getMsgSpecAccess().getRule();
	}
	
	////MSGID:MSGTYPE:SENDER:RECEIVER:CONTENT:SEQNUM
	//OnReceiveMsg:
	//	{OnReceiveMsg} "receiveTheMsg" "m" "(" msgid=PHead "," msgtype=PHead ","
	//	msgsender=PHead "," msgreceiver=PHead "," msgcontent=PHead "," msgseqnum=PHead ")"
	//	duration=TimeLimit;
	public OnReceiveMsgElements getOnReceiveMsgAccess() {
		return pOnReceiveMsg;
	}
	
	public ParserRule getOnReceiveMsgRule() {
		return getOnReceiveMsgAccess().getRule();
	}
	
	//MsgSelect:
	//	{MsgSelect} "receiveAndSwitch" duration=TimeLimit messages+=[Message] ("," messages+=[Message])*
	//	"->"
	//	plans+=[Plan] ("," plans+=[Plan])*;
	public MsgSelectElements getMsgSelectAccess() {
		return pMsgSelect;
	}
	
	public ParserRule getMsgSelectRule() {
		return getMsgSelectAccess().getRule();
	}
	
	//RaiseEvent:
	//	{RaiseEvent} "emit" ev=[Event] ":" content=PHead;
	public RaiseEventElements getRaiseEventAccess() {
		return pRaiseEvent;
	}
	
	public ParserRule getRaiseEventRule() {
		return getRaiseEventAccess().getRule();
	}
	
	//SenseEvent:
	//	{SenseEvent} "sense" duration=TimeLimit
	//	events+=[Event] ("," events+=[Event])* "->" plans+=Continuation ("," plans+=Continuation)*;
	public SenseEventElements getSenseEventAccess() {
		return pSenseEvent;
	}
	
	public ParserRule getSenseEventRule() {
		return getSenseEventAccess().getRule();
	}
	
	//MsgSwitch:
	//	{MsgSwitch} "onMsg" message=[Message] ":" msg=PHead "->" move=Move;
	public MsgSwitchElements getMsgSwitchAccess() {
		return pMsgSwitch;
	}
	
	public ParserRule getMsgSwitchRule() {
		return getMsgSwitchAccess().getRule();
	}
	
	//EventSwitch:
	//	{EventSwitch} "onEvent" event=[Event] ":" msg=PHead "->" move=Move;
	public EventSwitchElements getEventSwitchAccess() {
		return pEventSwitch;
	}
	
	public ParserRule getEventSwitchRule() {
		return getEventSwitchAccess().getRule();
	}
	
	//Continuation:
	//	plan=[Plan] | nane="continue";
	public ContinuationElements getContinuationAccess() {
		return pContinuation;
	}
	
	public ParserRule getContinuationRule() {
		return getContinuationAccess().getRule();
	}
	
	/// *
	// * -----------------------------------
	// * ExtensionMove
	// * -----------------------------------
	// * / ExtensionMove:
	//	Photo | Sound | Video | Delay;
	public ExtensionMoveElements getExtensionMoveAccess() {
		return pExtensionMove;
	}
	
	public ParserRule getExtensionMoveRule() {
		return getExtensionMoveAccess().getRule();
	}
	
	/// *
	// * AnswerEvent is defined so to handle the termination of a asynch action
	// * that cannot be reactive 
	// * / Photo:
	//	{Photo} "photo" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?;
	public PhotoElements getPhotoAccess() {
		return pPhoto;
	}
	
	public ParserRule getPhotoRule() {
		return getPhotoAccess().getRule();
	}
	
	//Sound:
	//	{Sound} "sound" duration=TimeLimit srcfile=MoveFile answerEvent=AnswerEvent?;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//Video:
	//	{Video} "video" duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?;
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}
	
	//Delay:
	//	{Delay} "delay" duration=TimeLimit;
	public DelayElements getDelayAccess() {
		return pDelay;
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}
	
	/// * 
	// * EVENTS
	// * / AnswerEvent:
	//	"answerEv" evName=ID;
	public AnswerEventElements getAnswerEventAccess() {
		return pAnswerEvent;
	}
	
	public ParserRule getAnswerEventRule() {
		return getAnswerEventAccess().getRule();
	}
	
	/// *
	// * ===============================================
	// * Event-driven
	// * ===============================================
	// * / EventHandler:
	//	"EventHandler" name=ID ("for" events+=[Event] ("," events+=[Event])*)? print?="-print"? ("{" body=EventHandlerBody
	//	"}")? ";";
	public EventHandlerElements getEventHandlerAccess() {
		return pEventHandler;
	}
	
	public ParserRule getEventHandlerRule() {
		return getEventHandlerAccess().getRule();
	}
	
	//EventHandlerBody:
	//	op+=EventHandlerOperation (";" op+=EventHandlerOperation)*;
	public EventHandlerBodyElements getEventHandlerBodyAccess() {
		return pEventHandlerBody;
	}
	
	public ParserRule getEventHandlerBodyRule() {
		return getEventHandlerBodyAccess().getRule();
	}
	
	//EventHandlerOperation:
	//	MemoOperation | SolveOperation | RaiseEvent | SendEventAsDispatch;
	public EventHandlerOperationElements getEventHandlerOperationAccess() {
		return pEventHandlerOperation;
	}
	
	public ParserRule getEventHandlerOperationRule() {
		return getEventHandlerOperationAccess().getRule();
	}
	
	//MemoOperation:
	//	"memo" rule=MemoRule "for" actor=[QActor] | doMemo=MemoCurrentEvent "for" actor=[QActor];
	public MemoOperationElements getMemoOperationAccess() {
		return pMemoOperation;
	}
	
	public ParserRule getMemoOperationRule() {
		return getMemoOperationAccess().getRule();
	}
	
	//SolveOperation:
	//	"solve" goal=PTerm "for" actor=[QActor];
	public SolveOperationElements getSolveOperationAccess() {
		return pSolveOperation;
	}
	
	public ParserRule getSolveOperationRule() {
		return getSolveOperationAccess().getRule();
	}
	
	/// *
	// * Guards for event handler operations should be executed by whom?
	// * / SendEventAsDispatch:
	//	"forwardEvent" actor=[QActor] "-m" msgref=[Message];
	public SendEventAsDispatchElements getSendEventAsDispatchAccess() {
		return pSendEventAsDispatch;
	}
	
	public ParserRule getSendEventAsDispatchRule() {
		return getSendEventAsDispatchAccess().getRule();
	}
	
	//MemoRule:
	//	MemoEvent //  | Others memo rules
	//;
	public MemoRuleElements getMemoRuleAccess() {
		return pMemoRule;
	}
	
	public ParserRule getMemoRuleRule() {
		return getMemoRuleAccess().getRule();
	}
	
	//MemoEvent:
	//	{MemoEvent} "currentEvent";
	public MemoEventElements getMemoEventAccess() {
		return pMemoEvent;
	}
	
	public ParserRule getMemoEventRule() {
		return getMemoEventAccess().getRule();
	}
	
	////Task :
	////	"Task" name=ID  "for" events += [Event] ( "," events += [Event] )* ";"
	////;
	/// *
	// * ===============================================
	// * Reaction - Alarm event
	// * ===============================================
	// * / Reaction:
	//	{Reaction} "react" alarms+=AlarmEvent ("or" alarms+=AlarmEvent)*;
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//AlarmEvent:
	//	NormalEvent | ContinueEvent;
	public AlarmEventElements getAlarmEventAccess() {
		return pAlarmEvent;
	}
	
	public ParserRule getAlarmEventRule() {
		return getAlarmEventAccess().getRule();
	}
	
	//NormalEvent:
	//	{NormalEvent} "event" ev=[Event] "->" planRef=[Plan];
	public NormalEventElements getNormalEventAccess() {
		return pNormalEvent;
	}
	
	public ParserRule getNormalEventRule() {
		return getNormalEventAccess().getRule();
	}
	
	//ContinueEvent:
	//	{ContinueEvent} "when" evOccur=[Event];
	public ContinueEventElements getContinueEventAccess() {
		return pContinueEvent;
	}
	
	public ParserRule getContinueEventRule() {
		return getContinueEventAccess().getRule();
	}
	
	/// *
	// * BASIC
	// * / VarOrQactor:
	//	var=Variable | dest=[QActor];
	public VarOrQactorElements getVarOrQactorAccess() {
		return pVarOrQactor;
	}
	
	public ParserRule getVarOrQactorRule() {
		return getVarOrQactorAccess().getRule();
	}
	
	//VarOrInt:
	//	var=Variable | const=INT;
	public VarOrIntElements getVarOrIntAccess() {
		return pVarOrInt;
	}
	
	public ParserRule getVarOrIntRule() {
		return getVarOrIntAccess().getRule();
	}
	
	//VarOrAtomic:
	//	var=Variable | const=PAtomic;
	public VarOrAtomicElements getVarOrAtomicAccess() {
		return pVarOrAtomic;
	}
	
	public ParserRule getVarOrAtomicRule() {
		return getVarOrAtomicAccess().getRule();
	}
	
	//VarOrString:
	//	var=Variable | const=STRING;
	public VarOrStringElements getVarOrStringAccess() {
		return pVarOrString;
	}
	
	public ParserRule getVarOrStringRule() {
		return getVarOrStringAccess().getRule();
	}
	
	//VarOrPStruct:
	//	var=Variable | psrtuct=PStruct;
	public VarOrPStructElements getVarOrPStructAccess() {
		return pVarOrPStruct;
	}
	
	public ParserRule getVarOrPStructRule() {
		return getVarOrPStructAccess().getRule();
	}
	
	//VarOrPhead:
	//	var=Variable | phead=PHead;
	public VarOrPheadElements getVarOrPheadAccess() {
		return pVarOrPhead;
	}
	
	public ParserRule getVarOrPheadRule() {
		return getVarOrPheadAccess().getRule();
	}
	
	//VarOrAtomOrPStruct:
	//	var=Variable | psrtuct=PStruct | atom=PAtomic;
	public VarOrAtomOrPStructElements getVarOrAtomOrPStructAccess() {
		return pVarOrAtomOrPStruct;
	}
	
	public ParserRule getVarOrAtomOrPStructRule() {
		return getVarOrAtomOrPStructAccess().getRule();
	}
	
	//Variable:
	//	{Variable} varName=VARID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//TimeLimit:
	//	{TimeLimit} "time" "(" (msec=INT | var=Variable) ")";
	public TimeLimitElements getTimeLimitAccess() {
		return pTimeLimit;
	}
	
	public ParserRule getTimeLimitRule() {
		return getTimeLimitAccess().getRule();
	}
	
	//ComponentIP:
	//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
	public ComponentIPElements getComponentIPAccess() {
		return pComponentIP;
	}
	
	public ParserRule getComponentIPRule() {
		return getComponentIPAccess().getRule();
	}
	
	//MoveFile:
	//	{MoveFile} "file" "(" fname=VarOrString ")";
	public MoveFileElements getMoveFileAccess() {
		return pMoveFile;
	}
	
	public ParserRule getMoveFileRule() {
		return getMoveFileAccess().getRule();
	}
	
	//enum WindowColor:
	//	white | gray | blue | green | yellow | cyan;
	public WindowColorElements getWindowColorAccess() {
		return eWindowColor;
	}
	
	public EnumRule getWindowColorRule() {
		return getWindowColorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
