/*
 * generated by Xtext 2.10.0
 */
package xtext.qactor.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xtext.qactor.services.QADockerGrammarAccess;

@SuppressWarnings("all")
public class QADockerSyntacticSequencer extends AbstractSyntacticSequencer {

	protected QADockerGrammarAccess grammarAccess;
	protected AbstractElementAlias match_QActor___RulesKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q;
	protected AbstractElementAlias match_SendRequest_AnswHandleKeyword_7_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (QADockerGrammarAccess) access;
		match_QActor___RulesKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getQActorAccess().getRulesKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getQActorAccess().getLeftCurlyBracketKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getQActorAccess().getRightCurlyBracketKeyword_6_3()));
		match_SendRequest_AnswHandleKeyword_7_q = new TokenAlias(false, true, grammarAccess.getSendRequestAccess().getAnswHandleKeyword_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_QActor___RulesKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q.equals(syntax))
				emit_QActor___RulesKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SendRequest_AnswHandleKeyword_7_q.equals(syntax))
				emit_SendRequest_AnswHandleKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('Rules' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     color=WindowColor '{' (ambiguity) '}' (rule end)
	 *     color=WindowColor '{' (ambiguity) action+=Action
	 *     color=WindowColor '{' (ambiguity) data+=Data
	 *     color=WindowColor '{' (ambiguity) plans+=Plan
	 *     context=[Context|ID] '{' (ambiguity) '}' (rule end)
	 *     context=[Context|ID] '{' (ambiguity) action+=Action
	 *     context=[Context|ID] '{' (ambiguity) data+=Data
	 *     context=[Context|ID] '{' (ambiguity) plans+=Plan
	 */
	protected void emit_QActor___RulesKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'answHandle'?
	 *
	 * This ambiguous syntax occurs at:
	 *     val=PHead (ambiguity) (rule end)
	 */
	protected void emit_SendRequest_AnswHandleKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
