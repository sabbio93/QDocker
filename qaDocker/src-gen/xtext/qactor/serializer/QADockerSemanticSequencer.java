/*
 * generated by Xtext 2.10.0
 */
package xtext.qactor.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.qactor.qADocker.ActorOp;
import xtext.qactor.qADocker.AddRule;
import xtext.qactor.qADocker.AnswerEvent;
import xtext.qactor.qADocker.BasicRobotMove;
import xtext.qactor.qADocker.ComponentIP;
import xtext.qactor.qADocker.Context;
import xtext.qactor.qADocker.Continuation;
import xtext.qactor.qADocker.ContinueEvent;
import xtext.qactor.qADocker.Delay;
import xtext.qactor.qADocker.Demo;
import xtext.qactor.qADocker.Dispatch;
import xtext.qactor.qADocker.EndActor;
import xtext.qactor.qADocker.EndPlan;
import xtext.qactor.qADocker.Event;
import xtext.qactor.qADocker.EventHandler;
import xtext.qactor.qADocker.EventHandlerBody;
import xtext.qactor.qADocker.EventSwitch;
import xtext.qactor.qADocker.ExecuteAction;
import xtext.qactor.qADocker.GetActivationEvent;
import xtext.qactor.qADocker.GetSensedEvent;
import xtext.qactor.qADocker.Guard;
import xtext.qactor.qADocker.GuardPredicateRemovable;
import xtext.qactor.qADocker.GuardPredicateStable;
import xtext.qactor.qADocker.IntegerData;
import xtext.qactor.qADocker.Invitation;
import xtext.qactor.qADocker.LoadPlan;
import xtext.qactor.qADocker.MemoCurrentEvent;
import xtext.qactor.qADocker.MemoCurrentMessage;
import xtext.qactor.qADocker.MemoEvent;
import xtext.qactor.qADocker.MemoOperation;
import xtext.qactor.qADocker.MoveFile;
import xtext.qactor.qADocker.MsgSelect;
import xtext.qactor.qADocker.MsgSpec;
import xtext.qactor.qADocker.MsgSwitch;
import xtext.qactor.qADocker.NormalEvent;
import xtext.qactor.qADocker.OnReceiveMsg;
import xtext.qactor.qADocker.PActorCall;
import xtext.qactor.qADocker.PAtomCut;
import xtext.qactor.qADocker.PAtomNum;
import xtext.qactor.qADocker.PAtomString;
import xtext.qactor.qADocker.PAtomic;
import xtext.qactor.qADocker.PIs;
import xtext.qactor.qADocker.PStruct;
import xtext.qactor.qADocker.Photo;
import xtext.qactor.qADocker.Plan;
import xtext.qactor.qADocker.PlanAction;
import xtext.qactor.qADocker.Print;
import xtext.qactor.qADocker.PrintCurrentEvent;
import xtext.qactor.qADocker.PrintCurrentMessage;
import xtext.qactor.qADocker.QADockerPackage;
import xtext.qactor.qADocker.QActor;
import xtext.qactor.qADocker.QActorSystem;
import xtext.qactor.qADocker.QActorSystemSpec;
import xtext.qactor.qADocker.RaiseEvent;
import xtext.qactor.qADocker.Reaction;
import xtext.qactor.qADocker.ReceiveMsg;
import xtext.qactor.qADocker.RemoveRule;
import xtext.qactor.qADocker.RepeatPlan;
import xtext.qactor.qADocker.ReplyToCaller;
import xtext.qactor.qADocker.Request;
import xtext.qactor.qADocker.ResumePlan;
import xtext.qactor.qADocker.Robot;
import xtext.qactor.qADocker.Rule;
import xtext.qactor.qADocker.RunPlan;
import xtext.qactor.qADocker.SendDispatch;
import xtext.qactor.qADocker.SendEventAsDispatch;
import xtext.qactor.qADocker.SendRequest;
import xtext.qactor.qADocker.SenseEvent;
import xtext.qactor.qADocker.Signal;
import xtext.qactor.qADocker.SolveGoal;
import xtext.qactor.qADocker.SolveOperation;
import xtext.qactor.qADocker.Sound;
import xtext.qactor.qADocker.StringData;
import xtext.qactor.qADocker.SuspendPlan;
import xtext.qactor.qADocker.SwitchPlan;
import xtext.qactor.qADocker.TimeLimit;
import xtext.qactor.qADocker.Token;
import xtext.qactor.qADocker.VarOrAtomOrPStruct;
import xtext.qactor.qADocker.VarOrAtomic;
import xtext.qactor.qADocker.VarOrInt;
import xtext.qactor.qADocker.VarOrPStruct;
import xtext.qactor.qADocker.VarOrPhead;
import xtext.qactor.qADocker.VarOrQactor;
import xtext.qactor.qADocker.VarOrString;
import xtext.qactor.qADocker.Variable;
import xtext.qactor.qADocker.Video;
import xtext.qactor.services.QADockerGrammarAccess;

@SuppressWarnings("all")
public class QADockerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QADockerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QADockerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QADockerPackage.ACTION:
				sequence_Action(context, (xtext.qactor.qADocker.Action) semanticObject); 
				return; 
			case QADockerPackage.ACTOR_OP:
				sequence_ActorOp(context, (ActorOp) semanticObject); 
				return; 
			case QADockerPackage.ADD_RULE:
				sequence_AddRule(context, (AddRule) semanticObject); 
				return; 
			case QADockerPackage.ANSWER_EVENT:
				sequence_AnswerEvent(context, (AnswerEvent) semanticObject); 
				return; 
			case QADockerPackage.BASIC_ROBOT_MOVE:
				sequence_BasicRobotMove(context, (BasicRobotMove) semanticObject); 
				return; 
			case QADockerPackage.COMPONENT_IP:
				sequence_ComponentIP(context, (ComponentIP) semanticObject); 
				return; 
			case QADockerPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			case QADockerPackage.CONTINUATION:
				sequence_Continuation(context, (Continuation) semanticObject); 
				return; 
			case QADockerPackage.CONTINUE_EVENT:
				sequence_ContinueEvent(context, (ContinueEvent) semanticObject); 
				return; 
			case QADockerPackage.DELAY:
				sequence_Delay(context, (Delay) semanticObject); 
				return; 
			case QADockerPackage.DEMO:
				sequence_Demo(context, (Demo) semanticObject); 
				return; 
			case QADockerPackage.DISPATCH:
				sequence_Dispatch(context, (Dispatch) semanticObject); 
				return; 
			case QADockerPackage.END_ACTOR:
				sequence_EndActor(context, (EndActor) semanticObject); 
				return; 
			case QADockerPackage.END_PLAN:
				sequence_EndPlan(context, (EndPlan) semanticObject); 
				return; 
			case QADockerPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case QADockerPackage.EVENT_HANDLER:
				sequence_EventHandler(context, (EventHandler) semanticObject); 
				return; 
			case QADockerPackage.EVENT_HANDLER_BODY:
				sequence_EventHandlerBody(context, (EventHandlerBody) semanticObject); 
				return; 
			case QADockerPackage.EVENT_SWITCH:
				sequence_EventSwitch(context, (EventSwitch) semanticObject); 
				return; 
			case QADockerPackage.EXECUTE_ACTION:
				sequence_ExecuteAction(context, (ExecuteAction) semanticObject); 
				return; 
			case QADockerPackage.GET_ACTIVATION_EVENT:
				sequence_GetActivationEvent(context, (GetActivationEvent) semanticObject); 
				return; 
			case QADockerPackage.GET_SENSED_EVENT:
				sequence_GetSensedEvent(context, (GetSensedEvent) semanticObject); 
				return; 
			case QADockerPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case QADockerPackage.GUARD_PREDICATE_REMOVABLE:
				sequence_GuardPredicateRemovable(context, (GuardPredicateRemovable) semanticObject); 
				return; 
			case QADockerPackage.GUARD_PREDICATE_STABLE:
				sequence_GuardPredicateStable(context, (GuardPredicateStable) semanticObject); 
				return; 
			case QADockerPackage.INTEGER_DATA:
				sequence_IntegerData(context, (IntegerData) semanticObject); 
				return; 
			case QADockerPackage.INVITATION:
				sequence_Invitation(context, (Invitation) semanticObject); 
				return; 
			case QADockerPackage.LOAD_PLAN:
				sequence_LoadPlan(context, (LoadPlan) semanticObject); 
				return; 
			case QADockerPackage.MEMO_CURRENT_EVENT:
				sequence_MemoCurrentEvent(context, (MemoCurrentEvent) semanticObject); 
				return; 
			case QADockerPackage.MEMO_CURRENT_MESSAGE:
				sequence_MemoCurrentMessage(context, (MemoCurrentMessage) semanticObject); 
				return; 
			case QADockerPackage.MEMO_EVENT:
				sequence_MemoEvent(context, (MemoEvent) semanticObject); 
				return; 
			case QADockerPackage.MEMO_OPERATION:
				sequence_MemoOperation(context, (MemoOperation) semanticObject); 
				return; 
			case QADockerPackage.MOVE_FILE:
				sequence_MoveFile(context, (MoveFile) semanticObject); 
				return; 
			case QADockerPackage.MSG_SELECT:
				sequence_MsgSelect(context, (MsgSelect) semanticObject); 
				return; 
			case QADockerPackage.MSG_SPEC:
				sequence_MsgSpec(context, (MsgSpec) semanticObject); 
				return; 
			case QADockerPackage.MSG_SWITCH:
				sequence_MsgSwitch(context, (MsgSwitch) semanticObject); 
				return; 
			case QADockerPackage.NORMAL_EVENT:
				sequence_NormalEvent(context, (NormalEvent) semanticObject); 
				return; 
			case QADockerPackage.ON_RECEIVE_MSG:
				sequence_OnReceiveMsg(context, (OnReceiveMsg) semanticObject); 
				return; 
			case QADockerPackage.PACTOR_CALL:
				sequence_PActorCall(context, (PActorCall) semanticObject); 
				return; 
			case QADockerPackage.PATOM_CUT:
				sequence_PAtomCut(context, (PAtomCut) semanticObject); 
				return; 
			case QADockerPackage.PATOM_NUM:
				sequence_PAtomNum(context, (PAtomNum) semanticObject); 
				return; 
			case QADockerPackage.PATOM_STRING:
				sequence_PAtomString(context, (PAtomString) semanticObject); 
				return; 
			case QADockerPackage.PATOMIC:
				sequence_PAtomic(context, (PAtomic) semanticObject); 
				return; 
			case QADockerPackage.PIS:
				sequence_PIs(context, (PIs) semanticObject); 
				return; 
			case QADockerPackage.PSTRUCT:
				sequence_PStruct(context, (PStruct) semanticObject); 
				return; 
			case QADockerPackage.PHOTO:
				sequence_Photo(context, (Photo) semanticObject); 
				return; 
			case QADockerPackage.PLAN:
				sequence_Plan(context, (Plan) semanticObject); 
				return; 
			case QADockerPackage.PLAN_ACTION:
				sequence_PlanAction(context, (PlanAction) semanticObject); 
				return; 
			case QADockerPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case QADockerPackage.PRINT_CURRENT_EVENT:
				sequence_PrintCurrentEvent(context, (PrintCurrentEvent) semanticObject); 
				return; 
			case QADockerPackage.PRINT_CURRENT_MESSAGE:
				sequence_PrintCurrentMessage(context, (PrintCurrentMessage) semanticObject); 
				return; 
			case QADockerPackage.QACTOR:
				sequence_QActor(context, (QActor) semanticObject); 
				return; 
			case QADockerPackage.QACTOR_SYSTEM:
				sequence_QActorSystem(context, (QActorSystem) semanticObject); 
				return; 
			case QADockerPackage.QACTOR_SYSTEM_SPEC:
				sequence_QActorSystemSpec(context, (QActorSystemSpec) semanticObject); 
				return; 
			case QADockerPackage.RAISE_EVENT:
				sequence_RaiseEvent(context, (RaiseEvent) semanticObject); 
				return; 
			case QADockerPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case QADockerPackage.RECEIVE_MSG:
				sequence_ReceiveMsg(context, (ReceiveMsg) semanticObject); 
				return; 
			case QADockerPackage.REMOVE_RULE:
				sequence_RemoveRule(context, (RemoveRule) semanticObject); 
				return; 
			case QADockerPackage.REPEAT_PLAN:
				sequence_RepeatPlan(context, (RepeatPlan) semanticObject); 
				return; 
			case QADockerPackage.REPLY_TO_CALLER:
				sequence_ReplyToCaller(context, (ReplyToCaller) semanticObject); 
				return; 
			case QADockerPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case QADockerPackage.RESUME_PLAN:
				sequence_ResumePlan(context, (ResumePlan) semanticObject); 
				return; 
			case QADockerPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case QADockerPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case QADockerPackage.RUN_PLAN:
				sequence_RunPlan(context, (RunPlan) semanticObject); 
				return; 
			case QADockerPackage.SEND_DISPATCH:
				sequence_SendDispatch(context, (SendDispatch) semanticObject); 
				return; 
			case QADockerPackage.SEND_EVENT_AS_DISPATCH:
				sequence_SendEventAsDispatch(context, (SendEventAsDispatch) semanticObject); 
				return; 
			case QADockerPackage.SEND_REQUEST:
				sequence_SendRequest(context, (SendRequest) semanticObject); 
				return; 
			case QADockerPackage.SENSE_EVENT:
				sequence_SenseEvent(context, (SenseEvent) semanticObject); 
				return; 
			case QADockerPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case QADockerPackage.SOLVE_GOAL:
				sequence_SolveGoal(context, (SolveGoal) semanticObject); 
				return; 
			case QADockerPackage.SOLVE_OPERATION:
				sequence_SolveOperation(context, (SolveOperation) semanticObject); 
				return; 
			case QADockerPackage.SOUND:
				sequence_Sound(context, (Sound) semanticObject); 
				return; 
			case QADockerPackage.STRING_DATA:
				sequence_StringData(context, (StringData) semanticObject); 
				return; 
			case QADockerPackage.SUSPEND_PLAN:
				sequence_SuspendPlan(context, (SuspendPlan) semanticObject); 
				return; 
			case QADockerPackage.SWITCH_PLAN:
				sequence_SwitchPlan(context, (SwitchPlan) semanticObject); 
				return; 
			case QADockerPackage.TIME_LIMIT:
				sequence_TimeLimit(context, (TimeLimit) semanticObject); 
				return; 
			case QADockerPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_ATOM_OR_PSTRUCT:
				sequence_VarOrAtomOrPStruct(context, (VarOrAtomOrPStruct) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_ATOMIC:
				sequence_VarOrAtomic(context, (VarOrAtomic) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_INT:
				sequence_VarOrInt(context, (VarOrInt) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_PSTRUCT:
				sequence_VarOrPStruct(context, (VarOrPStruct) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_PHEAD:
				sequence_VarOrPhead(context, (VarOrPhead) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_QACTOR:
				sequence_VarOrQactor(context, (VarOrQactor) semanticObject); 
				return; 
			case QADockerPackage.VAR_OR_STRING:
				sequence_VarOrString(context, (VarOrString) semanticObject); 
				return; 
			case QADockerPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case QADockerPackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID undoable?='undoable'? msec=INT arg=PStruct?)
	 */
	protected void sequence_Action(ISerializationContext context, xtext.qactor.qADocker.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns ActorOp
	 *     ActionMove returns ActorOp
	 *     ActorOp returns ActorOp
	 *
	 * Constraint:
	 *     (goal=PHead plan=[Plan|ID]?)
	 */
	protected void sequence_ActorOp(ISerializationContext context, ActorOp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns AddRule
	 *     GuardMove returns AddRule
	 *     AddRule returns AddRule
	 *
	 * Constraint:
	 *     rule=PHead
	 */
	protected void sequence_AddRule(ISerializationContext context, AddRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GUARD_MOVE__RULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GUARD_MOVE__RULE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddRuleAccess().getRulePHeadParserRuleCall_2_0(), semanticObject.getRule());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnswerEvent returns AnswerEvent
	 *
	 * Constraint:
	 *     evName=ID
	 */
	protected void sequence_AnswerEvent(ISerializationContext context, AnswerEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ANSWER_EVENT__EV_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ANSWER_EVENT__EV_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnswerEventAccess().getEvNameIDTerminalRuleCall_1_0(), semanticObject.getEvName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns BasicRobotMove
	 *     BasicRobotMove returns BasicRobotMove
	 *
	 * Constraint:
	 *     {BasicRobotMove}
	 */
	protected void sequence_BasicRobotMove(ISerializationContext context, BasicRobotMove semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentIP returns ComponentIP
	 *
	 * Constraint:
	 *     (host=STRING port=INT)
	 */
	protected void sequence_ComponentIP(ISerializationContext context, ComponentIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.COMPONENT_IP__HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.COMPONENT_IP__HOST));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.COMPONENT_IP__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.COMPONENT_IP__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentIPAccess().getHostSTRINGTerminalRuleCall_3_0(), semanticObject.getHost());
		feeder.accept(grammarAccess.getComponentIPAccess().getPortINTTerminalRuleCall_5_0(), semanticObject.getPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Context returns Context
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ip=ComponentIP 
	 *         (env?='-g' color=WindowColor)? 
	 *         standalone?='-standalone'? 
	 *         httpserver?='-httpserver'? 
	 *         handler+=EventHandler*
	 *     )
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Continuation returns Continuation
	 *
	 * Constraint:
	 *     (plan=[Plan|ID] | nane='continue')
	 */
	protected void sequence_Continuation(ISerializationContext context, Continuation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlarmEvent returns ContinueEvent
	 *     ContinueEvent returns ContinueEvent
	 *
	 * Constraint:
	 *     evOccur=[Event|ID]
	 */
	protected void sequence_ContinueEvent(ISerializationContext context, ContinueEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.CONTINUE_EVENT__EV_OCCUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.CONTINUE_EVENT__EV_OCCUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContinueEventAccess().getEvOccurEventIDTerminalRuleCall_2_0_1(), semanticObject.getEvOccur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Delay
	 *     ExtensionMove returns Delay
	 *     Delay returns Delay
	 *
	 * Constraint:
	 *     duration=TimeLimit
	 */
	protected void sequence_Delay(ISerializationContext context, Delay semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.EXTENSION_MOVE__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.EXTENSION_MOVE__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayAccess().getDurationTimeLimitParserRuleCall_2_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Demo
	 *     ActionMove returns Demo
	 *     Demo returns Demo
	 *
	 * Constraint:
	 *     (goal=PHead plan=[Plan|ID]?)
	 */
	protected void sequence_Demo(ISerializationContext context, Demo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Dispatch
	 *     OutOnlyMessage returns Dispatch
	 *     Dispatch returns Dispatch
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Dispatch(ISerializationContext context, Dispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDispatchAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns EndActor
	 *     PlanMove returns EndActor
	 *     EndActor returns EndActor
	 *
	 * Constraint:
	 *     msg=STRING
	 */
	protected void sequence_EndActor(ISerializationContext context, EndActor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.END_ACTOR__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.END_ACTOR__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndActorAccess().getMsgSTRINGTerminalRuleCall_2_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns EndPlan
	 *     PlanMove returns EndPlan
	 *     EndPlan returns EndPlan
	 *
	 * Constraint:
	 *     msg=STRING
	 */
	protected void sequence_EndPlan(ISerializationContext context, EndPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.END_PLAN__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.END_PLAN__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndPlanAccess().getMsgSTRINGTerminalRuleCall_2_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventHandlerBody returns EventHandlerBody
	 *
	 * Constraint:
	 *     (op+=EventHandlerOperation op+=EventHandlerOperation*)
	 */
	protected void sequence_EventHandlerBody(ISerializationContext context, EventHandlerBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventHandler returns EventHandler
	 *
	 * Constraint:
	 *     (name=ID (events+=[Event|ID] events+=[Event|ID]*)? print?='-print'? body=EventHandlerBody?)
	 */
	protected void sequence_EventHandler(ISerializationContext context, EventHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns EventSwitch
	 *     MessageMove returns EventSwitch
	 *     EventSwitch returns EventSwitch
	 *
	 * Constraint:
	 *     (event=[Event|ID] msg=PHead move=Move)
	 */
	protected void sequence_EventSwitch(ISerializationContext context, EventSwitch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__EVENT));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__MSG));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__MOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.EVENT_SWITCH__MOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventSwitchAccess().getEventEventIDTerminalRuleCall_2_0_1(), semanticObject.getEvent());
		feeder.accept(grammarAccess.getEventSwitchAccess().getMsgPHeadParserRuleCall_4_0(), semanticObject.getMsg());
		feeder.accept(grammarAccess.getEventSwitchAccess().getMoveMoveParserRuleCall_6_0(), semanticObject.getMove());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Event
	 *     OutOnlyMessage returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns ExecuteAction
	 *     ActionMove returns ExecuteAction
	 *     ExecuteAction returns ExecuteAction
	 *
	 * Constraint:
	 *     ((action=[Action|ID] arg=PHead?) | sentence=PHead)
	 */
	protected void sequence_ExecuteAction(ISerializationContext context, ExecuteAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns GetActivationEvent
	 *     PlanMove returns GetActivationEvent
	 *     GetActivationEvent returns GetActivationEvent
	 *
	 * Constraint:
	 *     var=Variable
	 */
	protected void sequence_GetActivationEvent(ISerializationContext context, GetActivationEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GET_ACTIVATION_EVENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GET_ACTIVATION_EVENT__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetActivationEventAccess().getVarVariableParserRuleCall_2_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns GetSensedEvent
	 *     PlanMove returns GetSensedEvent
	 *     GetSensedEvent returns GetSensedEvent
	 *
	 * Constraint:
	 *     var=Variable
	 */
	protected void sequence_GetSensedEvent(ISerializationContext context, GetSensedEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GET_SENSED_EVENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GET_SENSED_EVENT__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetSensedEventAccess().getVarVariableParserRuleCall_2_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuardPredicate returns GuardPredicateRemovable
	 *     GuardPredicateRemovable returns GuardPredicateRemovable
	 *
	 * Constraint:
	 *     pred=PTerm
	 */
	protected void sequence_GuardPredicateRemovable(ISerializationContext context, GuardPredicateRemovable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GUARD_PREDICATE__PRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GUARD_PREDICATE__PRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardPredicateRemovableAccess().getPredPTermParserRuleCall_2_0(), semanticObject.getPred());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuardPredicate returns GuardPredicateStable
	 *     GuardPredicateStable returns GuardPredicateStable
	 *
	 * Constraint:
	 *     pred=PTerm
	 */
	protected void sequence_GuardPredicateStable(ISerializationContext context, GuardPredicateStable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GUARD_PREDICATE__PRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GUARD_PREDICATE__PRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardPredicateStableAccess().getPredPTermParserRuleCall_2_0(), semanticObject.getPred());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     (not?='not'? guardspec=GuardPredicate)
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns IntegerData
	 *     IntegerData returns IntegerData
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_IntegerData(ISerializationContext context, IntegerData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.DATA__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.INTEGER_DATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.INTEGER_DATA__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerDataAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIntegerDataAccess().getValueINTTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Invitation
	 *     OutInMessage returns Invitation
	 *     Invitation returns Invitation
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Invitation(ISerializationContext context, Invitation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvitationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInvitationAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns LoadPlan
	 *     PlanMove returns LoadPlan
	 *     LoadPlan returns LoadPlan
	 *
	 * Constraint:
	 *     fname=VarOrString
	 */
	protected void sequence_LoadPlan(ISerializationContext context, LoadPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.LOAD_PLAN__FNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.LOAD_PLAN__FNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadPlanAccess().getFnameVarOrStringParserRuleCall_2_0(), semanticObject.getFname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MemoCurrentEvent
	 *     BasicMove returns MemoCurrentEvent
	 *     MemoCurrentEvent returns MemoCurrentEvent
	 *
	 * Constraint:
	 *     lastonly?='-lastonly'?
	 */
	protected void sequence_MemoCurrentEvent(ISerializationContext context, MemoCurrentEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MemoCurrentMessage
	 *     BasicMove returns MemoCurrentMessage
	 *     MemoCurrentMessage returns MemoCurrentMessage
	 *
	 * Constraint:
	 *     lastonly?='-lastonly'?
	 */
	protected void sequence_MemoCurrentMessage(ISerializationContext context, MemoCurrentMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemoRule returns MemoEvent
	 *     MemoEvent returns MemoEvent
	 *
	 * Constraint:
	 *     {MemoEvent}
	 */
	protected void sequence_MemoEvent(ISerializationContext context, MemoEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventHandlerOperation returns MemoOperation
	 *     MemoOperation returns MemoOperation
	 *
	 * Constraint:
	 *     ((rule=MemoRule actor=[QActor|ID]) | (doMemo=MemoCurrentEvent actor=[QActor|ID]))
	 */
	protected void sequence_MemoOperation(ISerializationContext context, MemoOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MoveFile returns MoveFile
	 *
	 * Constraint:
	 *     fname=VarOrString
	 */
	protected void sequence_MoveFile(ISerializationContext context, MoveFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MOVE_FILE__FNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MOVE_FILE__FNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveFileAccess().getFnameVarOrStringParserRuleCall_3_0(), semanticObject.getFname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MsgSelect
	 *     MessageMove returns MsgSelect
	 *     MsgSelect returns MsgSelect
	 *
	 * Constraint:
	 *     (duration=TimeLimit messages+=[Message|ID] messages+=[Message|ID]* plans+=[Plan|ID] plans+=[Plan|ID]*)
	 */
	protected void sequence_MsgSelect(ISerializationContext context, MsgSelect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MsgSpec returns MsgSpec
	 *
	 * Constraint:
	 *     (msg=[Message|ID] sender=VarOrAtomic content=PHead)
	 */
	protected void sequence_MsgSpec(ISerializationContext context, MsgSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SPEC__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SPEC__MSG));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SPEC__SENDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SPEC__SENDER));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SPEC__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SPEC__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMsgSpecAccess().getMsgMessageIDTerminalRuleCall_1_0_1(), semanticObject.getMsg());
		feeder.accept(grammarAccess.getMsgSpecAccess().getSenderVarOrAtomicParserRuleCall_3_0(), semanticObject.getSender());
		feeder.accept(grammarAccess.getMsgSpecAccess().getContentPHeadParserRuleCall_5_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MsgSwitch
	 *     MessageMove returns MsgSwitch
	 *     MsgSwitch returns MsgSwitch
	 *
	 * Constraint:
	 *     (message=[Message|ID] msg=PHead move=Move)
	 */
	protected void sequence_MsgSwitch(ISerializationContext context, MsgSwitch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MESSAGE));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MSG));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MSG_SWITCH__MOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMsgSwitchAccess().getMessageMessageIDTerminalRuleCall_2_0_1(), semanticObject.getMessage());
		feeder.accept(grammarAccess.getMsgSwitchAccess().getMsgPHeadParserRuleCall_4_0(), semanticObject.getMsg());
		feeder.accept(grammarAccess.getMsgSwitchAccess().getMoveMoveParserRuleCall_6_0(), semanticObject.getMove());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AlarmEvent returns NormalEvent
	 *     NormalEvent returns NormalEvent
	 *
	 * Constraint:
	 *     (ev=[Event|ID] planRef=[Plan|ID])
	 */
	protected void sequence_NormalEvent(ISerializationContext context, NormalEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.NORMAL_EVENT__EV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.NORMAL_EVENT__EV));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.NORMAL_EVENT__PLAN_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.NORMAL_EVENT__PLAN_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalEventAccess().getEvEventIDTerminalRuleCall_2_0_1(), semanticObject.getEv());
		feeder.accept(grammarAccess.getNormalEventAccess().getPlanRefPlanIDTerminalRuleCall_4_0_1(), semanticObject.getPlanRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns OnReceiveMsg
	 *     MessageMove returns OnReceiveMsg
	 *     OnReceiveMsg returns OnReceiveMsg
	 *
	 * Constraint:
	 *     (
	 *         msgid=PHead 
	 *         msgtype=PHead 
	 *         msgsender=PHead 
	 *         msgreceiver=PHead 
	 *         msgcontent=PHead 
	 *         msgseqnum=PHead 
	 *         duration=TimeLimit
	 *     )
	 */
	protected void sequence_OnReceiveMsg(ISerializationContext context, OnReceiveMsg semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGID));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGTYPE));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGSENDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGSENDER));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGRECEIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGRECEIVER));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGCONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGCONTENT));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGSEQNUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__MSGSEQNUM));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ON_RECEIVE_MSG__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgidPHeadParserRuleCall_4_0(), semanticObject.getMsgid());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgtypePHeadParserRuleCall_6_0(), semanticObject.getMsgtype());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgsenderPHeadParserRuleCall_8_0(), semanticObject.getMsgsender());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgreceiverPHeadParserRuleCall_10_0(), semanticObject.getMsgreceiver());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgcontentPHeadParserRuleCall_12_0(), semanticObject.getMsgcontent());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getMsgseqnumPHeadParserRuleCall_14_0(), semanticObject.getMsgseqnum());
		feeder.accept(grammarAccess.getOnReceiveMsgAccess().getDurationTimeLimitParserRuleCall_16_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PTerm returns PActorCall
	 *     PActorCall returns PActorCall
	 *
	 * Constraint:
	 *     body=PStruct
	 */
	protected void sequence_PActorCall(ISerializationContext context, PActorCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PACTOR_CALL__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PACTOR_CALL__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPActorCallAccess().getBodyPStructParserRuleCall_2_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PTerm returns PAtomCut
	 *     PPredef returns PAtomCut
	 *     PAtomCut returns PAtomCut
	 *
	 * Constraint:
	 *     {PAtomCut}
	 */
	protected void sequence_PAtomCut(ISerializationContext context, PAtomCut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomNum
	 *     PTerm returns PAtomNum
	 *     PAtom returns PAtomNum
	 *     PAtomNum returns PAtomNum
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_PAtomNum(ISerializationContext context, PAtomNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PATOM_NUM__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PATOM_NUM__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomNumAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomString
	 *     PTerm returns PAtomString
	 *     PAtom returns PAtomString
	 *     PAtomString returns PAtomString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_PAtomString(ISerializationContext context, PAtomString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PATOM_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PATOM_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomic
	 *     PTerm returns PAtomic
	 *     PAtom returns PAtomic
	 *     PAtomic returns PAtomic
	 *
	 * Constraint:
	 *     val=ID
	 */
	protected void sequence_PAtomic(ISerializationContext context, PAtomic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PATOMIC__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PATOMIC__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomicAccess().getValIDTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PTerm returns PIs
	 *     PPredef returns PIs
	 *     PIs returns PIs
	 *
	 * Constraint:
	 *     (varout=Variable varin=Variable num=PAtomNum)
	 */
	protected void sequence_PIs(ISerializationContext context, PIs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PIS__VAROUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PIS__VAROUT));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PIS__VARIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PIS__VARIN));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PIS__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PIS__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPIsAccess().getVaroutVariableParserRuleCall_0_0(), semanticObject.getVarout());
		feeder.accept(grammarAccess.getPIsAccess().getVarinVariableParserRuleCall_2_0(), semanticObject.getVarin());
		feeder.accept(grammarAccess.getPIsAccess().getNumPAtomNumParserRuleCall_4_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PStruct
	 *     PTerm returns PStruct
	 *     PStruct returns PStruct
	 *
	 * Constraint:
	 *     (functor=ID msgArg+=PTerm? msgArg+=PTerm*)
	 */
	protected void sequence_PStruct(ISerializationContext context, PStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Photo
	 *     ExtensionMove returns Photo
	 *     Photo returns Photo
	 *
	 * Constraint:
	 *     (duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?)
	 */
	protected void sequence_Photo(ISerializationContext context, Photo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlanAction returns PlanAction
	 *
	 * Constraint:
	 *     (guard=Guard? move=Move react=Reaction? (elsemove=Move elsereact=Reaction?)?)
	 */
	protected void sequence_PlanAction(ISerializationContext context, PlanAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plan returns Plan
	 *
	 * Constraint:
	 *     (name=ID normal?='normal'? resume?='resumeLastPlan'? action+=PlanAction action+=PlanAction*)
	 */
	protected void sequence_Plan(ISerializationContext context, Plan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns PrintCurrentEvent
	 *     BasicMove returns PrintCurrentEvent
	 *     PrintCurrentEvent returns PrintCurrentEvent
	 *
	 * Constraint:
	 *     memo?='-memo'?
	 */
	protected void sequence_PrintCurrentEvent(ISerializationContext context, PrintCurrentEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns PrintCurrentMessage
	 *     BasicMove returns PrintCurrentMessage
	 *     PrintCurrentMessage returns PrintCurrentMessage
	 *
	 * Constraint:
	 *     memo?='-memo'?
	 */
	protected void sequence_PrintCurrentMessage(ISerializationContext context, PrintCurrentMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Print
	 *     BasicMove returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     args=PHead
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.PRINT__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.PRINT__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getArgsPHeadParserRuleCall_3_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActorSystemSpec returns QActorSystemSpec
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         testing?='-testing'? 
	 *         message+=Message* 
	 *         context+=Context* 
	 *         actor+=QActor* 
	 *         robot=Robot?
	 *     )
	 */
	protected void sequence_QActorSystemSpec(ISerializationContext context, QActorSystemSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QActorSystem returns QActorSystem
	 *
	 * Constraint:
	 *     spec=QActorSystemSpec
	 */
	protected void sequence_QActorSystem(ISerializationContext context, QActorSystem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.QACTOR_SYSTEM__SPEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.QACTOR_SYSTEM__SPEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQActorSystemAccess().getSpecQActorSystemSpecParserRuleCall_1_0(), semanticObject.getSpec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActor returns QActor
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         context=[Context|ID] 
	 *         (env?='-g' color=WindowColor)? 
	 *         rules+=Rule* 
	 *         data+=Data* 
	 *         action+=Action* 
	 *         plans+=Plan*
	 *     )
	 */
	protected void sequence_QActor(ISerializationContext context, QActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns RaiseEvent
	 *     MessageMove returns RaiseEvent
	 *     RaiseEvent returns RaiseEvent
	 *     EventHandlerOperation returns RaiseEvent
	 *
	 * Constraint:
	 *     (ev=[Event|ID] content=PHead)
	 */
	protected void sequence_RaiseEvent(ISerializationContext context, RaiseEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.RAISE_EVENT__EV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.RAISE_EVENT__EV));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.RAISE_EVENT__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.RAISE_EVENT__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRaiseEventAccess().getEvEventIDTerminalRuleCall_2_0_1(), semanticObject.getEv());
		feeder.accept(grammarAccess.getRaiseEventAccess().getContentPHeadParserRuleCall_4_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (alarms+=AlarmEvent alarms+=AlarmEvent*)
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns ReceiveMsg
	 *     MessageMove returns ReceiveMsg
	 *     ReceiveMsg returns ReceiveMsg
	 *
	 * Constraint:
	 *     (duration=TimeLimit spec=MsgSpec?)
	 */
	protected void sequence_ReceiveMsg(ISerializationContext context, ReceiveMsg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns RemoveRule
	 *     GuardMove returns RemoveRule
	 *     RemoveRule returns RemoveRule
	 *
	 * Constraint:
	 *     rule=PHead
	 */
	protected void sequence_RemoveRule(ISerializationContext context, RemoveRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.GUARD_MOVE__RULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.GUARD_MOVE__RULE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveRuleAccess().getRulePHeadParserRuleCall_2_0(), semanticObject.getRule());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns RepeatPlan
	 *     PlanMove returns RepeatPlan
	 *     RepeatPlan returns RepeatPlan
	 *
	 * Constraint:
	 *     niter=VarOrInt?
	 */
	protected void sequence_RepeatPlan(ISerializationContext context, RepeatPlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns ReplyToCaller
	 *     MessageMove returns ReplyToCaller
	 *     ReplyToCaller returns ReplyToCaller
	 *
	 * Constraint:
	 *     (msgref=[Message|ID] val=PHead)
	 */
	protected void sequence_ReplyToCaller(ISerializationContext context, ReplyToCaller semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.REPLY_TO_CALLER__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.REPLY_TO_CALLER__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.REPLY_TO_CALLER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.REPLY_TO_CALLER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReplyToCallerAccess().getMsgrefMessageIDTerminalRuleCall_3_0_1(), semanticObject.getMsgref());
		feeder.accept(grammarAccess.getReplyToCallerAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Request
	 *     OutInMessage returns Request
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRequestAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns ResumePlan
	 *     PlanMove returns ResumePlan
	 *     ResumePlan returns ResumePlan
	 *
	 * Constraint:
	 *     {ResumePlan}
	 */
	protected void sequence_ResumePlan(ISerializationContext context, ResumePlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID actor=QActor)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ROBOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ROBOT__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.ROBOT__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.ROBOT__ACTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRobotAccess().getActorQActorParserRuleCall_1_0(), semanticObject.getActor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (head=PHead (body+=PTerm body+=PTerm*)?)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns RunPlan
	 *     PlanMove returns RunPlan
	 *     RunPlan returns RunPlan
	 *
	 * Constraint:
	 *     (plainid=VarOrAtomic duration=TimeLimit)
	 */
	protected void sequence_RunPlan(ISerializationContext context, RunPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.RUN_PLAN__PLAINID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.RUN_PLAN__PLAINID));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.RUN_PLAN__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.RUN_PLAN__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunPlanAccess().getPlainidVarOrAtomicParserRuleCall_2_0(), semanticObject.getPlainid());
		feeder.accept(grammarAccess.getRunPlanAccess().getDurationTimeLimitParserRuleCall_3_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SendDispatch
	 *     MessageMove returns SendDispatch
	 *     SendDispatch returns SendDispatch
	 *
	 * Constraint:
	 *     (dest=VarOrQactor msgref=[Message|ID] val=PHead)
	 */
	protected void sequence_SendDispatch(ISerializationContext context, SendDispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__DEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__DEST));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_DISPATCH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendDispatchAccess().getDestVarOrQactorParserRuleCall_2_0(), semanticObject.getDest());
		feeder.accept(grammarAccess.getSendDispatchAccess().getMsgrefMessageIDTerminalRuleCall_4_0_1(), semanticObject.getMsgref());
		feeder.accept(grammarAccess.getSendDispatchAccess().getValPHeadParserRuleCall_6_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventHandlerOperation returns SendEventAsDispatch
	 *     SendEventAsDispatch returns SendEventAsDispatch
	 *
	 * Constraint:
	 *     (actor=[QActor|ID] msgref=[Message|ID])
	 */
	protected void sequence_SendEventAsDispatch(ISerializationContext context, SendEventAsDispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_EVENT_AS_DISPATCH__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_EVENT_AS_DISPATCH__ACTOR));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_EVENT_AS_DISPATCH__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_EVENT_AS_DISPATCH__MSGREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendEventAsDispatchAccess().getActorQActorIDTerminalRuleCall_1_0_1(), semanticObject.getActor());
		feeder.accept(grammarAccess.getSendEventAsDispatchAccess().getMsgrefMessageIDTerminalRuleCall_3_0_1(), semanticObject.getMsgref());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SendRequest
	 *     MessageMove returns SendRequest
	 *     SendRequest returns SendRequest
	 *
	 * Constraint:
	 *     (dest=VarOrQactor msgref=[Message|ID] val=PHead)
	 */
	protected void sequence_SendRequest(ISerializationContext context, SendRequest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_REQUEST__DEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_REQUEST__DEST));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_REQUEST__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_REQUEST__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SEND_REQUEST__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SEND_REQUEST__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendRequestAccess().getDestVarOrQactorParserRuleCall_2_0(), semanticObject.getDest());
		feeder.accept(grammarAccess.getSendRequestAccess().getMsgrefMessageIDTerminalRuleCall_4_0_1(), semanticObject.getMsgref());
		feeder.accept(grammarAccess.getSendRequestAccess().getValPHeadParserRuleCall_6_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SenseEvent
	 *     MessageMove returns SenseEvent
	 *     SenseEvent returns SenseEvent
	 *
	 * Constraint:
	 *     (duration=TimeLimit events+=[Event|ID] events+=[Event|ID]* plans+=Continuation plans+=Continuation*)
	 */
	protected void sequence_SenseEvent(ISerializationContext context, SenseEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Signal
	 *     OutOnlyMessage returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSignalAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SolveGoal
	 *     ActionMove returns SolveGoal
	 *     SolveGoal returns SolveGoal
	 *
	 * Constraint:
	 *     (goal=PHead duration=TimeLimit plan=[Plan|ID]?)
	 */
	protected void sequence_SolveGoal(ISerializationContext context, SolveGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventHandlerOperation returns SolveOperation
	 *     SolveOperation returns SolveOperation
	 *
	 * Constraint:
	 *     (goal=PTerm actor=[QActor|ID])
	 */
	protected void sequence_SolveOperation(ISerializationContext context, SolveOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SOLVE_OPERATION__GOAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SOLVE_OPERATION__GOAL));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SOLVE_OPERATION__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SOLVE_OPERATION__ACTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSolveOperationAccess().getGoalPTermParserRuleCall_1_0(), semanticObject.getGoal());
		feeder.accept(grammarAccess.getSolveOperationAccess().getActorQActorIDTerminalRuleCall_3_0_1(), semanticObject.getActor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Sound
	 *     ExtensionMove returns Sound
	 *     Sound returns Sound
	 *
	 * Constraint:
	 *     (duration=TimeLimit srcfile=MoveFile answerEvent=AnswerEvent?)
	 */
	protected void sequence_Sound(ISerializationContext context, Sound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns StringData
	 *     StringData returns StringData
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_StringData(ISerializationContext context, StringData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.DATA__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.STRING_DATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.STRING_DATA__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringDataAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStringDataAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SuspendPlan
	 *     PlanMove returns SuspendPlan
	 *     SuspendPlan returns SuspendPlan
	 *
	 * Constraint:
	 *     {SuspendPlan}
	 */
	protected void sequence_SuspendPlan(ISerializationContext context, SuspendPlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns SwitchPlan
	 *     PlanMove returns SwitchPlan
	 *     SwitchPlan returns SwitchPlan
	 *
	 * Constraint:
	 *     plan=[Plan|ID]
	 */
	protected void sequence_SwitchPlan(ISerializationContext context, SwitchPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.SWITCH_PLAN__PLAN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.SWITCH_PLAN__PLAN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSwitchPlanAccess().getPlanPlanIDTerminalRuleCall_2_0_1(), semanticObject.getPlan());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeLimit returns TimeLimit
	 *
	 * Constraint:
	 *     (msec=INT | var=Variable)
	 */
	protected void sequence_TimeLimit(ISerializationContext context, TimeLimit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Token
	 *     OutOnlyMessage returns Token
	 *     Token returns Token
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTokenAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarOrAtomOrPStruct returns VarOrAtomOrPStruct
	 *
	 * Constraint:
	 *     (var=Variable | psrtuct=PStruct | atom=PAtomic)
	 */
	protected void sequence_VarOrAtomOrPStruct(ISerializationContext context, VarOrAtomOrPStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrAtomic returns VarOrAtomic
	 *
	 * Constraint:
	 *     (var=Variable | const=PAtomic)
	 */
	protected void sequence_VarOrAtomic(ISerializationContext context, VarOrAtomic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrInt returns VarOrInt
	 *
	 * Constraint:
	 *     (var=Variable | const=INT)
	 */
	protected void sequence_VarOrInt(ISerializationContext context, VarOrInt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrPStruct returns VarOrPStruct
	 *
	 * Constraint:
	 *     (var=Variable | psrtuct=PStruct)
	 */
	protected void sequence_VarOrPStruct(ISerializationContext context, VarOrPStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrPhead returns VarOrPhead
	 *
	 * Constraint:
	 *     (var=Variable | phead=PHead)
	 */
	protected void sequence_VarOrPhead(ISerializationContext context, VarOrPhead semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrQactor returns VarOrQactor
	 *
	 * Constraint:
	 *     (var=Variable | dest=[QActor|ID])
	 */
	protected void sequence_VarOrQactor(ISerializationContext context, VarOrQactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOrString returns VarOrString
	 *
	 * Constraint:
	 *     (var=Variable | const=STRING)
	 */
	protected void sequence_VarOrString(ISerializationContext context, VarOrString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns Variable
	 *     PTerm returns Variable
	 *     PAtom returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QADockerPackage.Literals.VARIABLE__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QADockerPackage.Literals.VARIABLE__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns Video
	 *     ExtensionMove returns Video
	 *     Video returns Video
	 *
	 * Constraint:
	 *     (duration=TimeLimit destfile=MoveFile answerEvent=AnswerEvent?)
	 */
	protected void sequence_Video(ISerializationContext context, Video semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
