/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.qactor.qADocker.ComponentIP;
import xtext.qactor.qADocker.Context;
import xtext.qactor.qADocker.EventHandler;
import xtext.qactor.qADocker.QADockerPackage;
import xtext.qactor.qADocker.WindowColor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#getIp <em>Ip</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#isEnv <em>Env</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#getColor <em>Color</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#isStandalone <em>Standalone</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#isHttpserver <em>Httpserver</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.ContextImpl#getHandler <em>Handler</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContextImpl extends MinimalEObjectImpl.Container implements Context
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIp() <em>Ip</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIp()
   * @generated
   * @ordered
   */
  protected ComponentIP ip;

  /**
   * The default value of the '{@link #isEnv() <em>Env</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnv()
   * @generated
   * @ordered
   */
  protected static final boolean ENV_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEnv() <em>Env</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnv()
   * @generated
   * @ordered
   */
  protected boolean env = ENV_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final WindowColor COLOR_EDEFAULT = WindowColor.WHITE;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected WindowColor color = COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #isStandalone() <em>Standalone</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStandalone()
   * @generated
   * @ordered
   */
  protected static final boolean STANDALONE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStandalone() <em>Standalone</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStandalone()
   * @generated
   * @ordered
   */
  protected boolean standalone = STANDALONE_EDEFAULT;

  /**
   * The default value of the '{@link #isHttpserver() <em>Httpserver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHttpserver()
   * @generated
   * @ordered
   */
  protected static final boolean HTTPSERVER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHttpserver() <em>Httpserver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHttpserver()
   * @generated
   * @ordered
   */
  protected boolean httpserver = HTTPSERVER_EDEFAULT;

  /**
   * The cached value of the '{@link #getHandler() <em>Handler</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandler()
   * @generated
   * @ordered
   */
  protected EList<EventHandler> handler;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QADockerPackage.Literals.CONTEXT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentIP getIp()
  {
    return ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIp(ComponentIP newIp, NotificationChain msgs)
  {
    ComponentIP oldIp = ip;
    ip = newIp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__IP, oldIp, newIp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIp(ComponentIP newIp)
  {
    if (newIp != ip)
    {
      NotificationChain msgs = null;
      if (ip != null)
        msgs = ((InternalEObject)ip).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.CONTEXT__IP, null, msgs);
      if (newIp != null)
        msgs = ((InternalEObject)newIp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.CONTEXT__IP, null, msgs);
      msgs = basicSetIp(newIp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__IP, newIp, newIp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEnv()
  {
    return env;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnv(boolean newEnv)
  {
    boolean oldEnv = env;
    env = newEnv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__ENV, oldEnv, env));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WindowColor getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(WindowColor newColor)
  {
    WindowColor oldColor = color;
    color = newColor == null ? COLOR_EDEFAULT : newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isStandalone()
  {
    return standalone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStandalone(boolean newStandalone)
  {
    boolean oldStandalone = standalone;
    standalone = newStandalone;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__STANDALONE, oldStandalone, standalone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHttpserver()
  {
    return httpserver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHttpserver(boolean newHttpserver)
  {
    boolean oldHttpserver = httpserver;
    httpserver = newHttpserver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTEXT__HTTPSERVER, oldHttpserver, httpserver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EventHandler> getHandler()
  {
    if (handler == null)
    {
      handler = new EObjectContainmentEList<EventHandler>(EventHandler.class, this, QADockerPackage.CONTEXT__HANDLER);
    }
    return handler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTEXT__IP:
        return basicSetIp(null, msgs);
      case QADockerPackage.CONTEXT__HANDLER:
        return ((InternalEList<?>)getHandler()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTEXT__NAME:
        return getName();
      case QADockerPackage.CONTEXT__IP:
        return getIp();
      case QADockerPackage.CONTEXT__ENV:
        return isEnv();
      case QADockerPackage.CONTEXT__COLOR:
        return getColor();
      case QADockerPackage.CONTEXT__STANDALONE:
        return isStandalone();
      case QADockerPackage.CONTEXT__HTTPSERVER:
        return isHttpserver();
      case QADockerPackage.CONTEXT__HANDLER:
        return getHandler();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTEXT__NAME:
        setName((String)newValue);
        return;
      case QADockerPackage.CONTEXT__IP:
        setIp((ComponentIP)newValue);
        return;
      case QADockerPackage.CONTEXT__ENV:
        setEnv((Boolean)newValue);
        return;
      case QADockerPackage.CONTEXT__COLOR:
        setColor((WindowColor)newValue);
        return;
      case QADockerPackage.CONTEXT__STANDALONE:
        setStandalone((Boolean)newValue);
        return;
      case QADockerPackage.CONTEXT__HTTPSERVER:
        setHttpserver((Boolean)newValue);
        return;
      case QADockerPackage.CONTEXT__HANDLER:
        getHandler().clear();
        getHandler().addAll((Collection<? extends EventHandler>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTEXT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case QADockerPackage.CONTEXT__IP:
        setIp((ComponentIP)null);
        return;
      case QADockerPackage.CONTEXT__ENV:
        setEnv(ENV_EDEFAULT);
        return;
      case QADockerPackage.CONTEXT__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case QADockerPackage.CONTEXT__STANDALONE:
        setStandalone(STANDALONE_EDEFAULT);
        return;
      case QADockerPackage.CONTEXT__HTTPSERVER:
        setHttpserver(HTTPSERVER_EDEFAULT);
        return;
      case QADockerPackage.CONTEXT__HANDLER:
        getHandler().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTEXT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case QADockerPackage.CONTEXT__IP:
        return ip != null;
      case QADockerPackage.CONTEXT__ENV:
        return env != ENV_EDEFAULT;
      case QADockerPackage.CONTEXT__COLOR:
        return color != COLOR_EDEFAULT;
      case QADockerPackage.CONTEXT__STANDALONE:
        return standalone != STANDALONE_EDEFAULT;
      case QADockerPackage.CONTEXT__HTTPSERVER:
        return httpserver != HTTPSERVER_EDEFAULT;
      case QADockerPackage.CONTEXT__HANDLER:
        return handler != null && !handler.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", env: ");
    result.append(env);
    result.append(", color: ");
    result.append(color);
    result.append(", standalone: ");
    result.append(standalone);
    result.append(", httpserver: ");
    result.append(httpserver);
    result.append(')');
    return result.toString();
  }

} //ContextImpl
