/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.qactor.qADocker.Context;
import xtext.qactor.qADocker.Message;
import xtext.qactor.qADocker.QADockerPackage;
import xtext.qactor.qADocker.QActor;
import xtext.qactor.qADocker.QActorSystemSpec;
import xtext.qactor.qADocker.Robot;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>QActor System Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#isTesting <em>Testing</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#getMessage <em>Message</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#getContext <em>Context</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.QActorSystemSpecImpl#getRobot <em>Robot</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QActorSystemSpecImpl extends MinimalEObjectImpl.Container implements QActorSystemSpec
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isTesting() <em>Testing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTesting()
   * @generated
   * @ordered
   */
  protected static final boolean TESTING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTesting() <em>Testing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTesting()
   * @generated
   * @ordered
   */
  protected boolean testing = TESTING_EDEFAULT;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected EList<Message> message;

  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected EList<Context> context;

  /**
   * The cached value of the '{@link #getActor() <em>Actor</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActor()
   * @generated
   * @ordered
   */
  protected EList<QActor> actor;

  /**
   * The cached value of the '{@link #getRobot() <em>Robot</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobot()
   * @generated
   * @ordered
   */
  protected Robot robot;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QActorSystemSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QADockerPackage.Literals.QACTOR_SYSTEM_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.QACTOR_SYSTEM_SPEC__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTesting()
  {
    return testing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTesting(boolean newTesting)
  {
    boolean oldTesting = testing;
    testing = newTesting;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.QACTOR_SYSTEM_SPEC__TESTING, oldTesting, testing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Message> getMessage()
  {
    if (message == null)
    {
      message = new EObjectContainmentEList<Message>(Message.class, this, QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE);
    }
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Context> getContext()
  {
    if (context == null)
    {
      context = new EObjectContainmentEList<Context>(Context.class, this, QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT);
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<QActor> getActor()
  {
    if (actor == null)
    {
      actor = new EObjectContainmentEList<QActor>(QActor.class, this, QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR);
    }
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Robot getRobot()
  {
    return robot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRobot(Robot newRobot, NotificationChain msgs)
  {
    Robot oldRobot = robot;
    robot = newRobot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT, oldRobot, newRobot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRobot(Robot newRobot)
  {
    if (newRobot != robot)
    {
      NotificationChain msgs = null;
      if (robot != null)
        msgs = ((InternalEObject)robot).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT, null, msgs);
      if (newRobot != null)
        msgs = ((InternalEObject)newRobot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT, null, msgs);
      msgs = basicSetRobot(newRobot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT, newRobot, newRobot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE:
        return ((InternalEList<?>)getMessage()).basicRemove(otherEnd, msgs);
      case QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT:
        return ((InternalEList<?>)getContext()).basicRemove(otherEnd, msgs);
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR:
        return ((InternalEList<?>)getActor()).basicRemove(otherEnd, msgs);
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT:
        return basicSetRobot(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QADockerPackage.QACTOR_SYSTEM_SPEC__NAME:
        return getName();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__TESTING:
        return isTesting();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE:
        return getMessage();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT:
        return getContext();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR:
        return getActor();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT:
        return getRobot();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QADockerPackage.QACTOR_SYSTEM_SPEC__NAME:
        setName((String)newValue);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__TESTING:
        setTesting((Boolean)newValue);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE:
        getMessage().clear();
        getMessage().addAll((Collection<? extends Message>)newValue);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT:
        getContext().clear();
        getContext().addAll((Collection<? extends Context>)newValue);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR:
        getActor().clear();
        getActor().addAll((Collection<? extends QActor>)newValue);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT:
        setRobot((Robot)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.QACTOR_SYSTEM_SPEC__NAME:
        setName(NAME_EDEFAULT);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__TESTING:
        setTesting(TESTING_EDEFAULT);
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE:
        getMessage().clear();
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT:
        getContext().clear();
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR:
        getActor().clear();
        return;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT:
        setRobot((Robot)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.QACTOR_SYSTEM_SPEC__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case QADockerPackage.QACTOR_SYSTEM_SPEC__TESTING:
        return testing != TESTING_EDEFAULT;
      case QADockerPackage.QACTOR_SYSTEM_SPEC__MESSAGE:
        return message != null && !message.isEmpty();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__CONTEXT:
        return context != null && !context.isEmpty();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ACTOR:
        return actor != null && !actor.isEmpty();
      case QADockerPackage.QACTOR_SYSTEM_SPEC__ROBOT:
        return robot != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", testing: ");
    result.append(testing);
    result.append(')');
    return result.toString();
  }

} //QActorSystemSpecImpl
