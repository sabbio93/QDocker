/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.qactor.qADocker.Guard;
import xtext.qactor.qADocker.Move;
import xtext.qactor.qADocker.PlanAction;
import xtext.qactor.qADocker.QADockerPackage;
import xtext.qactor.qADocker.Reaction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Plan Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.qactor.qADocker.impl.PlanActionImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.PlanActionImpl#getMove <em>Move</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.PlanActionImpl#getReact <em>React</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.PlanActionImpl#getElsemove <em>Elsemove</em>}</li>
 *   <li>{@link xtext.qactor.qADocker.impl.PlanActionImpl#getElsereact <em>Elsereact</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PlanActionImpl extends MinimalEObjectImpl.Container implements PlanAction
{
  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Guard guard;

  /**
   * The cached value of the '{@link #getMove() <em>Move</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMove()
   * @generated
   * @ordered
   */
  protected Move move;

  /**
   * The cached value of the '{@link #getReact() <em>React</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReact()
   * @generated
   * @ordered
   */
  protected Reaction react;

  /**
   * The cached value of the '{@link #getElsemove() <em>Elsemove</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElsemove()
   * @generated
   * @ordered
   */
  protected Move elsemove;

  /**
   * The cached value of the '{@link #getElsereact() <em>Elsereact</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElsereact()
   * @generated
   * @ordered
   */
  protected Reaction elsereact;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PlanActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QADockerPackage.Literals.PLAN_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Guard getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Guard newGuard, NotificationChain msgs)
  {
    Guard oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGuard(Guard newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Move getMove()
  {
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMove(Move newMove, NotificationChain msgs)
  {
    Move oldMove = move;
    move = newMove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__MOVE, oldMove, newMove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMove(Move newMove)
  {
    if (newMove != move)
    {
      NotificationChain msgs = null;
      if (move != null)
        msgs = ((InternalEObject)move).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__MOVE, null, msgs);
      if (newMove != null)
        msgs = ((InternalEObject)newMove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__MOVE, null, msgs);
      msgs = basicSetMove(newMove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__MOVE, newMove, newMove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reaction getReact()
  {
    return react;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReact(Reaction newReact, NotificationChain msgs)
  {
    Reaction oldReact = react;
    react = newReact;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__REACT, oldReact, newReact);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReact(Reaction newReact)
  {
    if (newReact != react)
    {
      NotificationChain msgs = null;
      if (react != null)
        msgs = ((InternalEObject)react).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__REACT, null, msgs);
      if (newReact != null)
        msgs = ((InternalEObject)newReact).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__REACT, null, msgs);
      msgs = basicSetReact(newReact, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__REACT, newReact, newReact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Move getElsemove()
  {
    return elsemove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElsemove(Move newElsemove, NotificationChain msgs)
  {
    Move oldElsemove = elsemove;
    elsemove = newElsemove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__ELSEMOVE, oldElsemove, newElsemove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElsemove(Move newElsemove)
  {
    if (newElsemove != elsemove)
    {
      NotificationChain msgs = null;
      if (elsemove != null)
        msgs = ((InternalEObject)elsemove).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__ELSEMOVE, null, msgs);
      if (newElsemove != null)
        msgs = ((InternalEObject)newElsemove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__ELSEMOVE, null, msgs);
      msgs = basicSetElsemove(newElsemove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__ELSEMOVE, newElsemove, newElsemove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reaction getElsereact()
  {
    return elsereact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElsereact(Reaction newElsereact, NotificationChain msgs)
  {
    Reaction oldElsereact = elsereact;
    elsereact = newElsereact;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__ELSEREACT, oldElsereact, newElsereact);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElsereact(Reaction newElsereact)
  {
    if (newElsereact != elsereact)
    {
      NotificationChain msgs = null;
      if (elsereact != null)
        msgs = ((InternalEObject)elsereact).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__ELSEREACT, null, msgs);
      if (newElsereact != null)
        msgs = ((InternalEObject)newElsereact).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QADockerPackage.PLAN_ACTION__ELSEREACT, null, msgs);
      msgs = basicSetElsereact(newElsereact, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.PLAN_ACTION__ELSEREACT, newElsereact, newElsereact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QADockerPackage.PLAN_ACTION__GUARD:
        return basicSetGuard(null, msgs);
      case QADockerPackage.PLAN_ACTION__MOVE:
        return basicSetMove(null, msgs);
      case QADockerPackage.PLAN_ACTION__REACT:
        return basicSetReact(null, msgs);
      case QADockerPackage.PLAN_ACTION__ELSEMOVE:
        return basicSetElsemove(null, msgs);
      case QADockerPackage.PLAN_ACTION__ELSEREACT:
        return basicSetElsereact(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QADockerPackage.PLAN_ACTION__GUARD:
        return getGuard();
      case QADockerPackage.PLAN_ACTION__MOVE:
        return getMove();
      case QADockerPackage.PLAN_ACTION__REACT:
        return getReact();
      case QADockerPackage.PLAN_ACTION__ELSEMOVE:
        return getElsemove();
      case QADockerPackage.PLAN_ACTION__ELSEREACT:
        return getElsereact();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QADockerPackage.PLAN_ACTION__GUARD:
        setGuard((Guard)newValue);
        return;
      case QADockerPackage.PLAN_ACTION__MOVE:
        setMove((Move)newValue);
        return;
      case QADockerPackage.PLAN_ACTION__REACT:
        setReact((Reaction)newValue);
        return;
      case QADockerPackage.PLAN_ACTION__ELSEMOVE:
        setElsemove((Move)newValue);
        return;
      case QADockerPackage.PLAN_ACTION__ELSEREACT:
        setElsereact((Reaction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.PLAN_ACTION__GUARD:
        setGuard((Guard)null);
        return;
      case QADockerPackage.PLAN_ACTION__MOVE:
        setMove((Move)null);
        return;
      case QADockerPackage.PLAN_ACTION__REACT:
        setReact((Reaction)null);
        return;
      case QADockerPackage.PLAN_ACTION__ELSEMOVE:
        setElsemove((Move)null);
        return;
      case QADockerPackage.PLAN_ACTION__ELSEREACT:
        setElsereact((Reaction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.PLAN_ACTION__GUARD:
        return guard != null;
      case QADockerPackage.PLAN_ACTION__MOVE:
        return move != null;
      case QADockerPackage.PLAN_ACTION__REACT:
        return react != null;
      case QADockerPackage.PLAN_ACTION__ELSEMOVE:
        return elsemove != null;
      case QADockerPackage.PLAN_ACTION__ELSEREACT:
        return elsereact != null;
    }
    return super.eIsSet(featureID);
  }

} //PlanActionImpl
