/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.qactor.qADocker.ContinueEvent;
import xtext.qactor.qADocker.Event;
import xtext.qactor.qADocker.QADockerPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Continue Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.qactor.qADocker.impl.ContinueEventImpl#getEvOccur <em>Ev Occur</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContinueEventImpl extends AlarmEventImpl implements ContinueEvent
{
  /**
   * The cached value of the '{@link #getEvOccur() <em>Ev Occur</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvOccur()
   * @generated
   * @ordered
   */
  protected Event evOccur;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContinueEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QADockerPackage.Literals.CONTINUE_EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event getEvOccur()
  {
    if (evOccur != null && evOccur.eIsProxy())
    {
      InternalEObject oldEvOccur = (InternalEObject)evOccur;
      evOccur = (Event)eResolveProxy(oldEvOccur);
      if (evOccur != oldEvOccur)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, QADockerPackage.CONTINUE_EVENT__EV_OCCUR, oldEvOccur, evOccur));
      }
    }
    return evOccur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event basicGetEvOccur()
  {
    return evOccur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvOccur(Event newEvOccur)
  {
    Event oldEvOccur = evOccur;
    evOccur = newEvOccur;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QADockerPackage.CONTINUE_EVENT__EV_OCCUR, oldEvOccur, evOccur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTINUE_EVENT__EV_OCCUR:
        if (resolve) return getEvOccur();
        return basicGetEvOccur();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTINUE_EVENT__EV_OCCUR:
        setEvOccur((Event)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTINUE_EVENT__EV_OCCUR:
        setEvOccur((Event)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QADockerPackage.CONTINUE_EVENT__EV_OCCUR:
        return evOccur != null;
    }
    return super.eIsSet(featureID);
  }

} //ContinueEventImpl
