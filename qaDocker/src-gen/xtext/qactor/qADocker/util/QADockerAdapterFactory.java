/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.qactor.qADocker.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.qactor.qADocker.QADockerPackage
 * @generated
 */
public class QADockerAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QADockerPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QADockerAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = QADockerPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QADockerSwitch<Adapter> modelSwitch =
    new QADockerSwitch<Adapter>()
    {
      @Override
      public Adapter caseQActorSystem(QActorSystem object)
      {
        return createQActorSystemAdapter();
      }
      @Override
      public Adapter caseQActorSystemSpec(QActorSystemSpec object)
      {
        return createQActorSystemSpecAdapter();
      }
      @Override
      public Adapter caseRobot(Robot object)
      {
        return createRobotAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseOutOnlyMessage(OutOnlyMessage object)
      {
        return createOutOnlyMessageAdapter();
      }
      @Override
      public Adapter caseOutInMessage(OutInMessage object)
      {
        return createOutInMessageAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseToken(Token object)
      {
        return createTokenAdapter();
      }
      @Override
      public Adapter caseDispatch(Dispatch object)
      {
        return createDispatchAdapter();
      }
      @Override
      public Adapter caseRequest(Request object)
      {
        return createRequestAdapter();
      }
      @Override
      public Adapter caseInvitation(Invitation object)
      {
        return createInvitationAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseQActor(QActor object)
      {
        return createQActorAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter casePHead(PHead object)
      {
        return createPHeadAdapter();
      }
      @Override
      public Adapter casePTerm(PTerm object)
      {
        return createPTermAdapter();
      }
      @Override
      public Adapter casePAtom(PAtom object)
      {
        return createPAtomAdapter();
      }
      @Override
      public Adapter casePAtomString(PAtomString object)
      {
        return createPAtomStringAdapter();
      }
      @Override
      public Adapter casePAtomic(PAtomic object)
      {
        return createPAtomicAdapter();
      }
      @Override
      public Adapter casePAtomNum(PAtomNum object)
      {
        return createPAtomNumAdapter();
      }
      @Override
      public Adapter casePStruct(PStruct object)
      {
        return createPStructAdapter();
      }
      @Override
      public Adapter casePActorCall(PActorCall object)
      {
        return createPActorCallAdapter();
      }
      @Override
      public Adapter casePPredef(PPredef object)
      {
        return createPPredefAdapter();
      }
      @Override
      public Adapter casePIs(PIs object)
      {
        return createPIsAdapter();
      }
      @Override
      public Adapter casePAtomCut(PAtomCut object)
      {
        return createPAtomCutAdapter();
      }
      @Override
      public Adapter caseData(Data object)
      {
        return createDataAdapter();
      }
      @Override
      public Adapter caseIntegerData(IntegerData object)
      {
        return createIntegerDataAdapter();
      }
      @Override
      public Adapter caseStringData(StringData object)
      {
        return createStringDataAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter casePlan(Plan object)
      {
        return createPlanAdapter();
      }
      @Override
      public Adapter casePlanAction(PlanAction object)
      {
        return createPlanActionAdapter();
      }
      @Override
      public Adapter caseGuard(Guard object)
      {
        return createGuardAdapter();
      }
      @Override
      public Adapter caseGuardPredicate(GuardPredicate object)
      {
        return createGuardPredicateAdapter();
      }
      @Override
      public Adapter caseGuardPredicateRemovable(GuardPredicateRemovable object)
      {
        return createGuardPredicateRemovableAdapter();
      }
      @Override
      public Adapter caseGuardPredicateStable(GuardPredicateStable object)
      {
        return createGuardPredicateStableAdapter();
      }
      @Override
      public Adapter caseMove(Move object)
      {
        return createMoveAdapter();
      }
      @Override
      public Adapter caseActionMove(ActionMove object)
      {
        return createActionMoveAdapter();
      }
      @Override
      public Adapter caseExecuteAction(ExecuteAction object)
      {
        return createExecuteActionAdapter();
      }
      @Override
      public Adapter caseSolveGoal(SolveGoal object)
      {
        return createSolveGoalAdapter();
      }
      @Override
      public Adapter caseDemo(Demo object)
      {
        return createDemoAdapter();
      }
      @Override
      public Adapter caseActorOp(ActorOp object)
      {
        return createActorOpAdapter();
      }
      @Override
      public Adapter caseBasicRobotMove(BasicRobotMove object)
      {
        return createBasicRobotMoveAdapter();
      }
      @Override
      public Adapter caseBasicMove(BasicMove object)
      {
        return createBasicMoveAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter casePrintCurrentEvent(PrintCurrentEvent object)
      {
        return createPrintCurrentEventAdapter();
      }
      @Override
      public Adapter casePrintCurrentMessage(PrintCurrentMessage object)
      {
        return createPrintCurrentMessageAdapter();
      }
      @Override
      public Adapter caseMemoCurrentEvent(MemoCurrentEvent object)
      {
        return createMemoCurrentEventAdapter();
      }
      @Override
      public Adapter caseMemoCurrentMessage(MemoCurrentMessage object)
      {
        return createMemoCurrentMessageAdapter();
      }
      @Override
      public Adapter casePlanMove(PlanMove object)
      {
        return createPlanMoveAdapter();
      }
      @Override
      public Adapter caseGetActivationEvent(GetActivationEvent object)
      {
        return createGetActivationEventAdapter();
      }
      @Override
      public Adapter caseGetSensedEvent(GetSensedEvent object)
      {
        return createGetSensedEventAdapter();
      }
      @Override
      public Adapter caseLoadPlan(LoadPlan object)
      {
        return createLoadPlanAdapter();
      }
      @Override
      public Adapter caseRunPlan(RunPlan object)
      {
        return createRunPlanAdapter();
      }
      @Override
      public Adapter caseResumePlan(ResumePlan object)
      {
        return createResumePlanAdapter();
      }
      @Override
      public Adapter caseSuspendPlan(SuspendPlan object)
      {
        return createSuspendPlanAdapter();
      }
      @Override
      public Adapter caseRepeatPlan(RepeatPlan object)
      {
        return createRepeatPlanAdapter();
      }
      @Override
      public Adapter caseSwitchPlan(SwitchPlan object)
      {
        return createSwitchPlanAdapter();
      }
      @Override
      public Adapter caseEndPlan(EndPlan object)
      {
        return createEndPlanAdapter();
      }
      @Override
      public Adapter caseEndActor(EndActor object)
      {
        return createEndActorAdapter();
      }
      @Override
      public Adapter caseGuardMove(GuardMove object)
      {
        return createGuardMoveAdapter();
      }
      @Override
      public Adapter caseAddRule(AddRule object)
      {
        return createAddRuleAdapter();
      }
      @Override
      public Adapter caseRemoveRule(RemoveRule object)
      {
        return createRemoveRuleAdapter();
      }
      @Override
      public Adapter caseMessageMove(MessageMove object)
      {
        return createMessageMoveAdapter();
      }
      @Override
      public Adapter caseSendDispatch(SendDispatch object)
      {
        return createSendDispatchAdapter();
      }
      @Override
      public Adapter caseSendRequest(SendRequest object)
      {
        return createSendRequestAdapter();
      }
      @Override
      public Adapter caseReplyToCaller(ReplyToCaller object)
      {
        return createReplyToCallerAdapter();
      }
      @Override
      public Adapter caseReceiveMsg(ReceiveMsg object)
      {
        return createReceiveMsgAdapter();
      }
      @Override
      public Adapter caseMsgSpec(MsgSpec object)
      {
        return createMsgSpecAdapter();
      }
      @Override
      public Adapter caseOnReceiveMsg(OnReceiveMsg object)
      {
        return createOnReceiveMsgAdapter();
      }
      @Override
      public Adapter caseMsgSelect(MsgSelect object)
      {
        return createMsgSelectAdapter();
      }
      @Override
      public Adapter caseRaiseEvent(RaiseEvent object)
      {
        return createRaiseEventAdapter();
      }
      @Override
      public Adapter caseSenseEvent(SenseEvent object)
      {
        return createSenseEventAdapter();
      }
      @Override
      public Adapter caseMsgSwitch(MsgSwitch object)
      {
        return createMsgSwitchAdapter();
      }
      @Override
      public Adapter caseEventSwitch(EventSwitch object)
      {
        return createEventSwitchAdapter();
      }
      @Override
      public Adapter caseContinuation(Continuation object)
      {
        return createContinuationAdapter();
      }
      @Override
      public Adapter caseExtensionMove(ExtensionMove object)
      {
        return createExtensionMoveAdapter();
      }
      @Override
      public Adapter casePhoto(Photo object)
      {
        return createPhotoAdapter();
      }
      @Override
      public Adapter caseSound(Sound object)
      {
        return createSoundAdapter();
      }
      @Override
      public Adapter caseVideo(Video object)
      {
        return createVideoAdapter();
      }
      @Override
      public Adapter caseDelay(Delay object)
      {
        return createDelayAdapter();
      }
      @Override
      public Adapter caseAnswerEvent(AnswerEvent object)
      {
        return createAnswerEventAdapter();
      }
      @Override
      public Adapter caseEventHandler(EventHandler object)
      {
        return createEventHandlerAdapter();
      }
      @Override
      public Adapter caseEventHandlerBody(EventHandlerBody object)
      {
        return createEventHandlerBodyAdapter();
      }
      @Override
      public Adapter caseEventHandlerOperation(EventHandlerOperation object)
      {
        return createEventHandlerOperationAdapter();
      }
      @Override
      public Adapter caseMemoOperation(MemoOperation object)
      {
        return createMemoOperationAdapter();
      }
      @Override
      public Adapter caseSolveOperation(SolveOperation object)
      {
        return createSolveOperationAdapter();
      }
      @Override
      public Adapter caseSendEventAsDispatch(SendEventAsDispatch object)
      {
        return createSendEventAsDispatchAdapter();
      }
      @Override
      public Adapter caseMemoRule(MemoRule object)
      {
        return createMemoRuleAdapter();
      }
      @Override
      public Adapter caseMemoEvent(MemoEvent object)
      {
        return createMemoEventAdapter();
      }
      @Override
      public Adapter caseReaction(Reaction object)
      {
        return createReactionAdapter();
      }
      @Override
      public Adapter caseAlarmEvent(AlarmEvent object)
      {
        return createAlarmEventAdapter();
      }
      @Override
      public Adapter caseNormalEvent(NormalEvent object)
      {
        return createNormalEventAdapter();
      }
      @Override
      public Adapter caseContinueEvent(ContinueEvent object)
      {
        return createContinueEventAdapter();
      }
      @Override
      public Adapter caseVarOrQactor(VarOrQactor object)
      {
        return createVarOrQactorAdapter();
      }
      @Override
      public Adapter caseVarOrInt(VarOrInt object)
      {
        return createVarOrIntAdapter();
      }
      @Override
      public Adapter caseVarOrAtomic(VarOrAtomic object)
      {
        return createVarOrAtomicAdapter();
      }
      @Override
      public Adapter caseVarOrString(VarOrString object)
      {
        return createVarOrStringAdapter();
      }
      @Override
      public Adapter caseVarOrPStruct(VarOrPStruct object)
      {
        return createVarOrPStructAdapter();
      }
      @Override
      public Adapter caseVarOrPhead(VarOrPhead object)
      {
        return createVarOrPheadAdapter();
      }
      @Override
      public Adapter caseVarOrAtomOrPStruct(VarOrAtomOrPStruct object)
      {
        return createVarOrAtomOrPStructAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseTimeLimit(TimeLimit object)
      {
        return createTimeLimitAdapter();
      }
      @Override
      public Adapter caseComponentIP(ComponentIP object)
      {
        return createComponentIPAdapter();
      }
      @Override
      public Adapter caseMoveFile(MoveFile object)
      {
        return createMoveFileAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.QActorSystem <em>QActor System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.QActorSystem
   * @generated
   */
  public Adapter createQActorSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.QActorSystemSpec <em>QActor System Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.QActorSystemSpec
   * @generated
   */
  public Adapter createQActorSystemSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Robot <em>Robot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Robot
   * @generated
   */
  public Adapter createRobotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.OutOnlyMessage <em>Out Only Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.OutOnlyMessage
   * @generated
   */
  public Adapter createOutOnlyMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.OutInMessage <em>Out In Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.OutInMessage
   * @generated
   */
  public Adapter createOutInMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Token <em>Token</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Token
   * @generated
   */
  public Adapter createTokenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Dispatch <em>Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Dispatch
   * @generated
   */
  public Adapter createDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Request <em>Request</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Request
   * @generated
   */
  public Adapter createRequestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Invitation <em>Invitation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Invitation
   * @generated
   */
  public Adapter createInvitationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.QActor <em>QActor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.QActor
   * @generated
   */
  public Adapter createQActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PHead <em>PHead</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PHead
   * @generated
   */
  public Adapter createPHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PTerm <em>PTerm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PTerm
   * @generated
   */
  public Adapter createPTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PAtom <em>PAtom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PAtom
   * @generated
   */
  public Adapter createPAtomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PAtomString <em>PAtom String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PAtomString
   * @generated
   */
  public Adapter createPAtomStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PAtomic <em>PAtomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PAtomic
   * @generated
   */
  public Adapter createPAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PAtomNum <em>PAtom Num</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PAtomNum
   * @generated
   */
  public Adapter createPAtomNumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PStruct <em>PStruct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PStruct
   * @generated
   */
  public Adapter createPStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PActorCall <em>PActor Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PActorCall
   * @generated
   */
  public Adapter createPActorCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PPredef <em>PPredef</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PPredef
   * @generated
   */
  public Adapter createPPredefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PIs <em>PIs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PIs
   * @generated
   */
  public Adapter createPIsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PAtomCut <em>PAtom Cut</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PAtomCut
   * @generated
   */
  public Adapter createPAtomCutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Data <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Data
   * @generated
   */
  public Adapter createDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.IntegerData <em>Integer Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.IntegerData
   * @generated
   */
  public Adapter createIntegerDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.StringData <em>String Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.StringData
   * @generated
   */
  public Adapter createStringDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Plan <em>Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Plan
   * @generated
   */
  public Adapter createPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PlanAction <em>Plan Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PlanAction
   * @generated
   */
  public Adapter createPlanActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Guard <em>Guard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Guard
   * @generated
   */
  public Adapter createGuardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GuardPredicate <em>Guard Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GuardPredicate
   * @generated
   */
  public Adapter createGuardPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GuardPredicateRemovable <em>Guard Predicate Removable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GuardPredicateRemovable
   * @generated
   */
  public Adapter createGuardPredicateRemovableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GuardPredicateStable <em>Guard Predicate Stable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GuardPredicateStable
   * @generated
   */
  public Adapter createGuardPredicateStableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Move <em>Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Move
   * @generated
   */
  public Adapter createMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ActionMove <em>Action Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ActionMove
   * @generated
   */
  public Adapter createActionMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ExecuteAction <em>Execute Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ExecuteAction
   * @generated
   */
  public Adapter createExecuteActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SolveGoal <em>Solve Goal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SolveGoal
   * @generated
   */
  public Adapter createSolveGoalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Demo <em>Demo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Demo
   * @generated
   */
  public Adapter createDemoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ActorOp <em>Actor Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ActorOp
   * @generated
   */
  public Adapter createActorOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.BasicRobotMove <em>Basic Robot Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.BasicRobotMove
   * @generated
   */
  public Adapter createBasicRobotMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.BasicMove <em>Basic Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.BasicMove
   * @generated
   */
  public Adapter createBasicMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PrintCurrentEvent <em>Print Current Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PrintCurrentEvent
   * @generated
   */
  public Adapter createPrintCurrentEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PrintCurrentMessage <em>Print Current Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PrintCurrentMessage
   * @generated
   */
  public Adapter createPrintCurrentMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MemoCurrentEvent <em>Memo Current Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MemoCurrentEvent
   * @generated
   */
  public Adapter createMemoCurrentEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MemoCurrentMessage <em>Memo Current Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MemoCurrentMessage
   * @generated
   */
  public Adapter createMemoCurrentMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.PlanMove <em>Plan Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.PlanMove
   * @generated
   */
  public Adapter createPlanMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GetActivationEvent <em>Get Activation Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GetActivationEvent
   * @generated
   */
  public Adapter createGetActivationEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GetSensedEvent <em>Get Sensed Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GetSensedEvent
   * @generated
   */
  public Adapter createGetSensedEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.LoadPlan <em>Load Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.LoadPlan
   * @generated
   */
  public Adapter createLoadPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.RunPlan <em>Run Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.RunPlan
   * @generated
   */
  public Adapter createRunPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ResumePlan <em>Resume Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ResumePlan
   * @generated
   */
  public Adapter createResumePlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SuspendPlan <em>Suspend Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SuspendPlan
   * @generated
   */
  public Adapter createSuspendPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.RepeatPlan <em>Repeat Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.RepeatPlan
   * @generated
   */
  public Adapter createRepeatPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SwitchPlan <em>Switch Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SwitchPlan
   * @generated
   */
  public Adapter createSwitchPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EndPlan <em>End Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EndPlan
   * @generated
   */
  public Adapter createEndPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EndActor <em>End Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EndActor
   * @generated
   */
  public Adapter createEndActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.GuardMove <em>Guard Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.GuardMove
   * @generated
   */
  public Adapter createGuardMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.AddRule <em>Add Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.AddRule
   * @generated
   */
  public Adapter createAddRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.RemoveRule <em>Remove Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.RemoveRule
   * @generated
   */
  public Adapter createRemoveRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MessageMove <em>Message Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MessageMove
   * @generated
   */
  public Adapter createMessageMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SendDispatch <em>Send Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SendDispatch
   * @generated
   */
  public Adapter createSendDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SendRequest <em>Send Request</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SendRequest
   * @generated
   */
  public Adapter createSendRequestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ReplyToCaller <em>Reply To Caller</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ReplyToCaller
   * @generated
   */
  public Adapter createReplyToCallerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ReceiveMsg <em>Receive Msg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ReceiveMsg
   * @generated
   */
  public Adapter createReceiveMsgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MsgSpec <em>Msg Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MsgSpec
   * @generated
   */
  public Adapter createMsgSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.OnReceiveMsg <em>On Receive Msg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.OnReceiveMsg
   * @generated
   */
  public Adapter createOnReceiveMsgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MsgSelect <em>Msg Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MsgSelect
   * @generated
   */
  public Adapter createMsgSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.RaiseEvent <em>Raise Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.RaiseEvent
   * @generated
   */
  public Adapter createRaiseEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SenseEvent <em>Sense Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SenseEvent
   * @generated
   */
  public Adapter createSenseEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MsgSwitch <em>Msg Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MsgSwitch
   * @generated
   */
  public Adapter createMsgSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EventSwitch <em>Event Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EventSwitch
   * @generated
   */
  public Adapter createEventSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Continuation <em>Continuation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Continuation
   * @generated
   */
  public Adapter createContinuationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ExtensionMove <em>Extension Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ExtensionMove
   * @generated
   */
  public Adapter createExtensionMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Photo <em>Photo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Photo
   * @generated
   */
  public Adapter createPhotoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Sound <em>Sound</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Sound
   * @generated
   */
  public Adapter createSoundAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Video <em>Video</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Video
   * @generated
   */
  public Adapter createVideoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Delay <em>Delay</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Delay
   * @generated
   */
  public Adapter createDelayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.AnswerEvent <em>Answer Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.AnswerEvent
   * @generated
   */
  public Adapter createAnswerEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EventHandler <em>Event Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EventHandler
   * @generated
   */
  public Adapter createEventHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EventHandlerBody <em>Event Handler Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EventHandlerBody
   * @generated
   */
  public Adapter createEventHandlerBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.EventHandlerOperation <em>Event Handler Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.EventHandlerOperation
   * @generated
   */
  public Adapter createEventHandlerOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MemoOperation <em>Memo Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MemoOperation
   * @generated
   */
  public Adapter createMemoOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SolveOperation <em>Solve Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SolveOperation
   * @generated
   */
  public Adapter createSolveOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.SendEventAsDispatch <em>Send Event As Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.SendEventAsDispatch
   * @generated
   */
  public Adapter createSendEventAsDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MemoRule <em>Memo Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MemoRule
   * @generated
   */
  public Adapter createMemoRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MemoEvent <em>Memo Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MemoEvent
   * @generated
   */
  public Adapter createMemoEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Reaction <em>Reaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Reaction
   * @generated
   */
  public Adapter createReactionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.AlarmEvent <em>Alarm Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.AlarmEvent
   * @generated
   */
  public Adapter createAlarmEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.NormalEvent <em>Normal Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.NormalEvent
   * @generated
   */
  public Adapter createNormalEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ContinueEvent <em>Continue Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ContinueEvent
   * @generated
   */
  public Adapter createContinueEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrQactor <em>Var Or Qactor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrQactor
   * @generated
   */
  public Adapter createVarOrQactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrInt <em>Var Or Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrInt
   * @generated
   */
  public Adapter createVarOrIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrAtomic <em>Var Or Atomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrAtomic
   * @generated
   */
  public Adapter createVarOrAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrString <em>Var Or String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrString
   * @generated
   */
  public Adapter createVarOrStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrPStruct <em>Var Or PStruct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrPStruct
   * @generated
   */
  public Adapter createVarOrPStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrPhead <em>Var Or Phead</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrPhead
   * @generated
   */
  public Adapter createVarOrPheadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.VarOrAtomOrPStruct <em>Var Or Atom Or PStruct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.VarOrAtomOrPStruct
   * @generated
   */
  public Adapter createVarOrAtomOrPStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.TimeLimit <em>Time Limit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.TimeLimit
   * @generated
   */
  public Adapter createTimeLimitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.ComponentIP <em>Component IP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.ComponentIP
   * @generated
   */
  public Adapter createComponentIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.qactor.qADocker.MoveFile <em>Move File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.qactor.qADocker.MoveFile
   * @generated
   */
  public Adapter createMoveFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //QADockerAdapterFactory
