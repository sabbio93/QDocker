/**
 * generated by Xtext 2.10.0
 */
package xtext.qactor.qADocker.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import xtext.qactor.qADocker.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see xtext.qactor.qADocker.QADockerPackage
 * @generated
 */
public class QADockerSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QADockerPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QADockerSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = QADockerPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case QADockerPackage.QACTOR_SYSTEM:
      {
        QActorSystem qActorSystem = (QActorSystem)theEObject;
        T result = caseQActorSystem(qActorSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.QACTOR_SYSTEM_SPEC:
      {
        QActorSystemSpec qActorSystemSpec = (QActorSystemSpec)theEObject;
        T result = caseQActorSystemSpec(qActorSystemSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ROBOT:
      {
        Robot robot = (Robot)theEObject;
        T result = caseRobot(robot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.OUT_ONLY_MESSAGE:
      {
        OutOnlyMessage outOnlyMessage = (OutOnlyMessage)theEObject;
        T result = caseOutOnlyMessage(outOnlyMessage);
        if (result == null) result = caseMessage(outOnlyMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.OUT_IN_MESSAGE:
      {
        OutInMessage outInMessage = (OutInMessage)theEObject;
        T result = caseOutInMessage(outInMessage);
        if (result == null) result = caseMessage(outInMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = caseOutOnlyMessage(event);
        if (result == null) result = caseMessage(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = caseOutOnlyMessage(signal);
        if (result == null) result = caseMessage(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.TOKEN:
      {
        Token token = (Token)theEObject;
        T result = caseToken(token);
        if (result == null) result = caseOutOnlyMessage(token);
        if (result == null) result = caseMessage(token);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.DISPATCH:
      {
        Dispatch dispatch = (Dispatch)theEObject;
        T result = caseDispatch(dispatch);
        if (result == null) result = caseOutOnlyMessage(dispatch);
        if (result == null) result = caseMessage(dispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.REQUEST:
      {
        Request request = (Request)theEObject;
        T result = caseRequest(request);
        if (result == null) result = caseOutInMessage(request);
        if (result == null) result = caseMessage(request);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.INVITATION:
      {
        Invitation invitation = (Invitation)theEObject;
        T result = caseInvitation(invitation);
        if (result == null) result = caseOutInMessage(invitation);
        if (result == null) result = caseMessage(invitation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.QACTOR:
      {
        QActor qActor = (QActor)theEObject;
        T result = caseQActor(qActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PHEAD:
      {
        PHead pHead = (PHead)theEObject;
        T result = casePHead(pHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PTERM:
      {
        PTerm pTerm = (PTerm)theEObject;
        T result = casePTerm(pTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PATOM:
      {
        PAtom pAtom = (PAtom)theEObject;
        T result = casePAtom(pAtom);
        if (result == null) result = casePHead(pAtom);
        if (result == null) result = casePTerm(pAtom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PATOM_STRING:
      {
        PAtomString pAtomString = (PAtomString)theEObject;
        T result = casePAtomString(pAtomString);
        if (result == null) result = casePAtom(pAtomString);
        if (result == null) result = casePHead(pAtomString);
        if (result == null) result = casePTerm(pAtomString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PATOMIC:
      {
        PAtomic pAtomic = (PAtomic)theEObject;
        T result = casePAtomic(pAtomic);
        if (result == null) result = casePAtom(pAtomic);
        if (result == null) result = casePHead(pAtomic);
        if (result == null) result = casePTerm(pAtomic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PATOM_NUM:
      {
        PAtomNum pAtomNum = (PAtomNum)theEObject;
        T result = casePAtomNum(pAtomNum);
        if (result == null) result = casePAtom(pAtomNum);
        if (result == null) result = casePHead(pAtomNum);
        if (result == null) result = casePTerm(pAtomNum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PSTRUCT:
      {
        PStruct pStruct = (PStruct)theEObject;
        T result = casePStruct(pStruct);
        if (result == null) result = casePHead(pStruct);
        if (result == null) result = casePTerm(pStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PACTOR_CALL:
      {
        PActorCall pActorCall = (PActorCall)theEObject;
        T result = casePActorCall(pActorCall);
        if (result == null) result = casePTerm(pActorCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PPREDEF:
      {
        PPredef pPredef = (PPredef)theEObject;
        T result = casePPredef(pPredef);
        if (result == null) result = casePTerm(pPredef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PIS:
      {
        PIs pIs = (PIs)theEObject;
        T result = casePIs(pIs);
        if (result == null) result = casePPredef(pIs);
        if (result == null) result = casePTerm(pIs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PATOM_CUT:
      {
        PAtomCut pAtomCut = (PAtomCut)theEObject;
        T result = casePAtomCut(pAtomCut);
        if (result == null) result = casePPredef(pAtomCut);
        if (result == null) result = casePTerm(pAtomCut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.DATA:
      {
        Data data = (Data)theEObject;
        T result = caseData(data);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.INTEGER_DATA:
      {
        IntegerData integerData = (IntegerData)theEObject;
        T result = caseIntegerData(integerData);
        if (result == null) result = caseData(integerData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.STRING_DATA:
      {
        StringData stringData = (StringData)theEObject;
        T result = caseStringData(stringData);
        if (result == null) result = caseData(stringData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PLAN:
      {
        Plan plan = (Plan)theEObject;
        T result = casePlan(plan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PLAN_ACTION:
      {
        PlanAction planAction = (PlanAction)theEObject;
        T result = casePlanAction(planAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GUARD:
      {
        Guard guard = (Guard)theEObject;
        T result = caseGuard(guard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GUARD_PREDICATE:
      {
        GuardPredicate guardPredicate = (GuardPredicate)theEObject;
        T result = caseGuardPredicate(guardPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GUARD_PREDICATE_REMOVABLE:
      {
        GuardPredicateRemovable guardPredicateRemovable = (GuardPredicateRemovable)theEObject;
        T result = caseGuardPredicateRemovable(guardPredicateRemovable);
        if (result == null) result = caseGuardPredicate(guardPredicateRemovable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GUARD_PREDICATE_STABLE:
      {
        GuardPredicateStable guardPredicateStable = (GuardPredicateStable)theEObject;
        T result = caseGuardPredicateStable(guardPredicateStable);
        if (result == null) result = caseGuardPredicate(guardPredicateStable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MOVE:
      {
        Move move = (Move)theEObject;
        T result = caseMove(move);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ACTION_MOVE:
      {
        ActionMove actionMove = (ActionMove)theEObject;
        T result = caseActionMove(actionMove);
        if (result == null) result = caseMove(actionMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EXECUTE_ACTION:
      {
        ExecuteAction executeAction = (ExecuteAction)theEObject;
        T result = caseExecuteAction(executeAction);
        if (result == null) result = caseActionMove(executeAction);
        if (result == null) result = caseMove(executeAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SOLVE_GOAL:
      {
        SolveGoal solveGoal = (SolveGoal)theEObject;
        T result = caseSolveGoal(solveGoal);
        if (result == null) result = caseActionMove(solveGoal);
        if (result == null) result = caseMove(solveGoal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.DEMO:
      {
        Demo demo = (Demo)theEObject;
        T result = caseDemo(demo);
        if (result == null) result = caseActionMove(demo);
        if (result == null) result = caseMove(demo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ACTOR_OP:
      {
        ActorOp actorOp = (ActorOp)theEObject;
        T result = caseActorOp(actorOp);
        if (result == null) result = caseActionMove(actorOp);
        if (result == null) result = caseMove(actorOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.BASIC_ROBOT_MOVE:
      {
        BasicRobotMove basicRobotMove = (BasicRobotMove)theEObject;
        T result = caseBasicRobotMove(basicRobotMove);
        if (result == null) result = caseMove(basicRobotMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.BASIC_MOVE:
      {
        BasicMove basicMove = (BasicMove)theEObject;
        T result = caseBasicMove(basicMove);
        if (result == null) result = caseMove(basicMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = caseBasicMove(print);
        if (result == null) result = caseMove(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PRINT_CURRENT_EVENT:
      {
        PrintCurrentEvent printCurrentEvent = (PrintCurrentEvent)theEObject;
        T result = casePrintCurrentEvent(printCurrentEvent);
        if (result == null) result = caseBasicMove(printCurrentEvent);
        if (result == null) result = caseMove(printCurrentEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PRINT_CURRENT_MESSAGE:
      {
        PrintCurrentMessage printCurrentMessage = (PrintCurrentMessage)theEObject;
        T result = casePrintCurrentMessage(printCurrentMessage);
        if (result == null) result = caseBasicMove(printCurrentMessage);
        if (result == null) result = caseMove(printCurrentMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MEMO_CURRENT_EVENT:
      {
        MemoCurrentEvent memoCurrentEvent = (MemoCurrentEvent)theEObject;
        T result = caseMemoCurrentEvent(memoCurrentEvent);
        if (result == null) result = caseBasicMove(memoCurrentEvent);
        if (result == null) result = caseMove(memoCurrentEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MEMO_CURRENT_MESSAGE:
      {
        MemoCurrentMessage memoCurrentMessage = (MemoCurrentMessage)theEObject;
        T result = caseMemoCurrentMessage(memoCurrentMessage);
        if (result == null) result = caseBasicMove(memoCurrentMessage);
        if (result == null) result = caseMove(memoCurrentMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PLAN_MOVE:
      {
        PlanMove planMove = (PlanMove)theEObject;
        T result = casePlanMove(planMove);
        if (result == null) result = caseMove(planMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GET_ACTIVATION_EVENT:
      {
        GetActivationEvent getActivationEvent = (GetActivationEvent)theEObject;
        T result = caseGetActivationEvent(getActivationEvent);
        if (result == null) result = casePlanMove(getActivationEvent);
        if (result == null) result = caseMove(getActivationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GET_SENSED_EVENT:
      {
        GetSensedEvent getSensedEvent = (GetSensedEvent)theEObject;
        T result = caseGetSensedEvent(getSensedEvent);
        if (result == null) result = casePlanMove(getSensedEvent);
        if (result == null) result = caseMove(getSensedEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.LOAD_PLAN:
      {
        LoadPlan loadPlan = (LoadPlan)theEObject;
        T result = caseLoadPlan(loadPlan);
        if (result == null) result = casePlanMove(loadPlan);
        if (result == null) result = caseMove(loadPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.RUN_PLAN:
      {
        RunPlan runPlan = (RunPlan)theEObject;
        T result = caseRunPlan(runPlan);
        if (result == null) result = casePlanMove(runPlan);
        if (result == null) result = caseMove(runPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.RESUME_PLAN:
      {
        ResumePlan resumePlan = (ResumePlan)theEObject;
        T result = caseResumePlan(resumePlan);
        if (result == null) result = casePlanMove(resumePlan);
        if (result == null) result = caseMove(resumePlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SUSPEND_PLAN:
      {
        SuspendPlan suspendPlan = (SuspendPlan)theEObject;
        T result = caseSuspendPlan(suspendPlan);
        if (result == null) result = casePlanMove(suspendPlan);
        if (result == null) result = caseMove(suspendPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.REPEAT_PLAN:
      {
        RepeatPlan repeatPlan = (RepeatPlan)theEObject;
        T result = caseRepeatPlan(repeatPlan);
        if (result == null) result = casePlanMove(repeatPlan);
        if (result == null) result = caseMove(repeatPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SWITCH_PLAN:
      {
        SwitchPlan switchPlan = (SwitchPlan)theEObject;
        T result = caseSwitchPlan(switchPlan);
        if (result == null) result = casePlanMove(switchPlan);
        if (result == null) result = caseMove(switchPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.END_PLAN:
      {
        EndPlan endPlan = (EndPlan)theEObject;
        T result = caseEndPlan(endPlan);
        if (result == null) result = casePlanMove(endPlan);
        if (result == null) result = caseMove(endPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.END_ACTOR:
      {
        EndActor endActor = (EndActor)theEObject;
        T result = caseEndActor(endActor);
        if (result == null) result = casePlanMove(endActor);
        if (result == null) result = caseMove(endActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.GUARD_MOVE:
      {
        GuardMove guardMove = (GuardMove)theEObject;
        T result = caseGuardMove(guardMove);
        if (result == null) result = caseMove(guardMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ADD_RULE:
      {
        AddRule addRule = (AddRule)theEObject;
        T result = caseAddRule(addRule);
        if (result == null) result = caseGuardMove(addRule);
        if (result == null) result = caseMove(addRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.REMOVE_RULE:
      {
        RemoveRule removeRule = (RemoveRule)theEObject;
        T result = caseRemoveRule(removeRule);
        if (result == null) result = caseGuardMove(removeRule);
        if (result == null) result = caseMove(removeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MESSAGE_MOVE:
      {
        MessageMove messageMove = (MessageMove)theEObject;
        T result = caseMessageMove(messageMove);
        if (result == null) result = caseMove(messageMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SEND_DISPATCH:
      {
        SendDispatch sendDispatch = (SendDispatch)theEObject;
        T result = caseSendDispatch(sendDispatch);
        if (result == null) result = caseMessageMove(sendDispatch);
        if (result == null) result = caseMove(sendDispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SEND_REQUEST:
      {
        SendRequest sendRequest = (SendRequest)theEObject;
        T result = caseSendRequest(sendRequest);
        if (result == null) result = caseMessageMove(sendRequest);
        if (result == null) result = caseMove(sendRequest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.REPLY_TO_CALLER:
      {
        ReplyToCaller replyToCaller = (ReplyToCaller)theEObject;
        T result = caseReplyToCaller(replyToCaller);
        if (result == null) result = caseMessageMove(replyToCaller);
        if (result == null) result = caseMove(replyToCaller);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.RECEIVE_MSG:
      {
        ReceiveMsg receiveMsg = (ReceiveMsg)theEObject;
        T result = caseReceiveMsg(receiveMsg);
        if (result == null) result = caseMessageMove(receiveMsg);
        if (result == null) result = caseMove(receiveMsg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MSG_SPEC:
      {
        MsgSpec msgSpec = (MsgSpec)theEObject;
        T result = caseMsgSpec(msgSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ON_RECEIVE_MSG:
      {
        OnReceiveMsg onReceiveMsg = (OnReceiveMsg)theEObject;
        T result = caseOnReceiveMsg(onReceiveMsg);
        if (result == null) result = caseMessageMove(onReceiveMsg);
        if (result == null) result = caseMove(onReceiveMsg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MSG_SELECT:
      {
        MsgSelect msgSelect = (MsgSelect)theEObject;
        T result = caseMsgSelect(msgSelect);
        if (result == null) result = caseMessageMove(msgSelect);
        if (result == null) result = caseMove(msgSelect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.RAISE_EVENT:
      {
        RaiseEvent raiseEvent = (RaiseEvent)theEObject;
        T result = caseRaiseEvent(raiseEvent);
        if (result == null) result = caseMessageMove(raiseEvent);
        if (result == null) result = caseEventHandlerOperation(raiseEvent);
        if (result == null) result = caseMove(raiseEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SENSE_EVENT:
      {
        SenseEvent senseEvent = (SenseEvent)theEObject;
        T result = caseSenseEvent(senseEvent);
        if (result == null) result = caseMessageMove(senseEvent);
        if (result == null) result = caseMove(senseEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MSG_SWITCH:
      {
        MsgSwitch msgSwitch = (MsgSwitch)theEObject;
        T result = caseMsgSwitch(msgSwitch);
        if (result == null) result = caseMessageMove(msgSwitch);
        if (result == null) result = caseMove(msgSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EVENT_SWITCH:
      {
        EventSwitch eventSwitch = (EventSwitch)theEObject;
        T result = caseEventSwitch(eventSwitch);
        if (result == null) result = caseMessageMove(eventSwitch);
        if (result == null) result = caseMove(eventSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.CONTINUATION:
      {
        Continuation continuation = (Continuation)theEObject;
        T result = caseContinuation(continuation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EXTENSION_MOVE:
      {
        ExtensionMove extensionMove = (ExtensionMove)theEObject;
        T result = caseExtensionMove(extensionMove);
        if (result == null) result = caseMove(extensionMove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.PHOTO:
      {
        Photo photo = (Photo)theEObject;
        T result = casePhoto(photo);
        if (result == null) result = caseExtensionMove(photo);
        if (result == null) result = caseMove(photo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SOUND:
      {
        Sound sound = (Sound)theEObject;
        T result = caseSound(sound);
        if (result == null) result = caseExtensionMove(sound);
        if (result == null) result = caseMove(sound);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VIDEO:
      {
        Video video = (Video)theEObject;
        T result = caseVideo(video);
        if (result == null) result = caseExtensionMove(video);
        if (result == null) result = caseMove(video);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.DELAY:
      {
        Delay delay = (Delay)theEObject;
        T result = caseDelay(delay);
        if (result == null) result = caseExtensionMove(delay);
        if (result == null) result = caseMove(delay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ANSWER_EVENT:
      {
        AnswerEvent answerEvent = (AnswerEvent)theEObject;
        T result = caseAnswerEvent(answerEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EVENT_HANDLER:
      {
        EventHandler eventHandler = (EventHandler)theEObject;
        T result = caseEventHandler(eventHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EVENT_HANDLER_BODY:
      {
        EventHandlerBody eventHandlerBody = (EventHandlerBody)theEObject;
        T result = caseEventHandlerBody(eventHandlerBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.EVENT_HANDLER_OPERATION:
      {
        EventHandlerOperation eventHandlerOperation = (EventHandlerOperation)theEObject;
        T result = caseEventHandlerOperation(eventHandlerOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MEMO_OPERATION:
      {
        MemoOperation memoOperation = (MemoOperation)theEObject;
        T result = caseMemoOperation(memoOperation);
        if (result == null) result = caseEventHandlerOperation(memoOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SOLVE_OPERATION:
      {
        SolveOperation solveOperation = (SolveOperation)theEObject;
        T result = caseSolveOperation(solveOperation);
        if (result == null) result = caseEventHandlerOperation(solveOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.SEND_EVENT_AS_DISPATCH:
      {
        SendEventAsDispatch sendEventAsDispatch = (SendEventAsDispatch)theEObject;
        T result = caseSendEventAsDispatch(sendEventAsDispatch);
        if (result == null) result = caseEventHandlerOperation(sendEventAsDispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MEMO_RULE:
      {
        MemoRule memoRule = (MemoRule)theEObject;
        T result = caseMemoRule(memoRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MEMO_EVENT:
      {
        MemoEvent memoEvent = (MemoEvent)theEObject;
        T result = caseMemoEvent(memoEvent);
        if (result == null) result = caseMemoRule(memoEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.REACTION:
      {
        Reaction reaction = (Reaction)theEObject;
        T result = caseReaction(reaction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.ALARM_EVENT:
      {
        AlarmEvent alarmEvent = (AlarmEvent)theEObject;
        T result = caseAlarmEvent(alarmEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.NORMAL_EVENT:
      {
        NormalEvent normalEvent = (NormalEvent)theEObject;
        T result = caseNormalEvent(normalEvent);
        if (result == null) result = caseAlarmEvent(normalEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.CONTINUE_EVENT:
      {
        ContinueEvent continueEvent = (ContinueEvent)theEObject;
        T result = caseContinueEvent(continueEvent);
        if (result == null) result = caseAlarmEvent(continueEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_QACTOR:
      {
        VarOrQactor varOrQactor = (VarOrQactor)theEObject;
        T result = caseVarOrQactor(varOrQactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_INT:
      {
        VarOrInt varOrInt = (VarOrInt)theEObject;
        T result = caseVarOrInt(varOrInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_ATOMIC:
      {
        VarOrAtomic varOrAtomic = (VarOrAtomic)theEObject;
        T result = caseVarOrAtomic(varOrAtomic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_STRING:
      {
        VarOrString varOrString = (VarOrString)theEObject;
        T result = caseVarOrString(varOrString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_PSTRUCT:
      {
        VarOrPStruct varOrPStruct = (VarOrPStruct)theEObject;
        T result = caseVarOrPStruct(varOrPStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_PHEAD:
      {
        VarOrPhead varOrPhead = (VarOrPhead)theEObject;
        T result = caseVarOrPhead(varOrPhead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VAR_OR_ATOM_OR_PSTRUCT:
      {
        VarOrAtomOrPStruct varOrAtomOrPStruct = (VarOrAtomOrPStruct)theEObject;
        T result = caseVarOrAtomOrPStruct(varOrAtomOrPStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = casePAtom(variable);
        if (result == null) result = casePHead(variable);
        if (result == null) result = casePTerm(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.TIME_LIMIT:
      {
        TimeLimit timeLimit = (TimeLimit)theEObject;
        T result = caseTimeLimit(timeLimit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.COMPONENT_IP:
      {
        ComponentIP componentIP = (ComponentIP)theEObject;
        T result = caseComponentIP(componentIP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QADockerPackage.MOVE_FILE:
      {
        MoveFile moveFile = (MoveFile)theEObject;
        T result = caseMoveFile(moveFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorSystem(QActorSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorSystemSpec(QActorSystemSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Robot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Robot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRobot(Robot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutOnlyMessage(OutOnlyMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutInMessage(OutInMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Token</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Token</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseToken(Token object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatch(Dispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequest(Request object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvitation(Invitation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActor(QActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PHead</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PHead</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePHead(PHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PTerm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PTerm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePTerm(PTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtom(PAtom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomString(PAtomString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomic(PAtomic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomNum(PAtomNum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePStruct(PStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PActor Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PActor Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePActorCall(PActorCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PPredef</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PPredef</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePPredef(PPredef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PIs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PIs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePIs(PIs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Cut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Cut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomCut(PAtomCut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseData(Data object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerData(IntegerData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringData(StringData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlan(Plan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plan Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plan Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlanAction(PlanAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuard(Guard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guard Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guard Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardPredicate(GuardPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guard Predicate Removable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guard Predicate Removable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardPredicateRemovable(GuardPredicateRemovable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guard Predicate Stable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guard Predicate Stable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardPredicateStable(GuardPredicateStable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMove(Move object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionMove(ActionMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteAction(ExecuteAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolveGoal(SolveGoal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Demo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Demo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDemo(Demo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Actor Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Actor Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActorOp(ActorOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Robot Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Robot Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicRobotMove(BasicRobotMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicMove(BasicMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Current Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Current Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintCurrentEvent(PrintCurrentEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Current Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Current Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintCurrentMessage(PrintCurrentMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Current Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Current Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoCurrentEvent(MemoCurrentEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Current Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Current Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoCurrentMessage(MemoCurrentMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plan Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plan Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlanMove(PlanMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Activation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Activation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetActivationEvent(GetActivationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Sensed Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Sensed Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetSensedEvent(GetSensedEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadPlan(LoadPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Run Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Run Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRunPlan(RunPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resume Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resume Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResumePlan(ResumePlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Suspend Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Suspend Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuspendPlan(SuspendPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Repeat Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Repeat Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRepeatPlan(RepeatPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Switch Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Switch Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwitchPlan(SwitchPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndPlan(EndPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Actor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Actor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndActor(EndActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guard Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guard Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardMove(GuardMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddRule(AddRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveRule(RemoveRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageMove(MessageMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendDispatch(SendDispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendRequest(SendRequest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reply To Caller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reply To Caller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplyToCaller(ReplyToCaller object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Receive Msg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Receive Msg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReceiveMsg(ReceiveMsg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgSpec(MsgSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>On Receive Msg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>On Receive Msg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnReceiveMsg(OnReceiveMsg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Select</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Select</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgSelect(MsgSelect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Raise Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Raise Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRaiseEvent(RaiseEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sense Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sense Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSenseEvent(SenseEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgSwitch(MsgSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventSwitch(EventSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continuation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continuation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinuation(Continuation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extension Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extension Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtensionMove(ExtensionMove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Photo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Photo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhoto(Photo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sound</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sound</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSound(Sound object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Video</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Video</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVideo(Video object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelay(Delay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Answer Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Answer Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnswerEvent(AnswerEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventHandler(EventHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Handler Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Handler Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventHandlerBody(EventHandlerBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Handler Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Handler Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventHandlerOperation(EventHandlerOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoOperation(MemoOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solve Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solve Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolveOperation(SolveOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Send Event As Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Send Event As Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSendEventAsDispatch(SendEventAsDispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoRule(MemoRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoEvent(MemoEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReaction(Reaction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alarm Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alarm Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlarmEvent(AlarmEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Normal Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Normal Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNormalEvent(NormalEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continue Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continue Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinueEvent(ContinueEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or Qactor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or Qactor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrQactor(VarOrQactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrInt(VarOrInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or Atomic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or Atomic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrAtomic(VarOrAtomic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrString(VarOrString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or PStruct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or PStruct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrPStruct(VarOrPStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or Phead</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or Phead</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrPhead(VarOrPhead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Or Atom Or PStruct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Or Atom Or PStruct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarOrAtomOrPStruct(VarOrAtomOrPStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Limit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Limit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeLimit(TimeLimit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentIP(ComponentIP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMoveFile(MoveFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //QADockerSwitch
